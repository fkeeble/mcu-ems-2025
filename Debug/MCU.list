
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006490  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b8  080066b8  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080066b8  080066b8  000076b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c0  080066c0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c0  080066c0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066c4  080066c4  000076c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080066c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000006c  08006734  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08006734  000083fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015794  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a55  00000000  00000000  0001d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00020280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f53  00000000  00000000  000215e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac2d  00000000  00000000  0002253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183bb  00000000  00000000  0003d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae698  00000000  00000000  00055523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103bbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c5c  00000000  00000000  00103c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010885c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006534 	.word	0x08006534

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08006534 	.word	0x08006534

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	000a      	movs	r2, r1
 800064a:	1cfb      	adds	r3, r7, #3
 800064c:	701a      	strb	r2, [r3, #0]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 800064e:	200f      	movs	r0, #15
 8000650:	183b      	adds	r3, r7, r0
 8000652:	1cfa      	adds	r2, r7, #3
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	210f      	movs	r1, #15
 8000658:	438a      	bics	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 800065c:	1cfb      	adds	r3, r7, #3
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	011a      	lsls	r2, r3, #4
 8000662:	240e      	movs	r4, #14
 8000664:	193b      	adds	r3, r7, r4
 8000666:	701a      	strb	r2, [r3, #0]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000668:	183b      	adds	r3, r7, r0
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	220c      	movs	r2, #12
 800066e:	4313      	orrs	r3, r2
 8000670:	b2da      	uxtb	r2, r3
 8000672:	2108      	movs	r1, #8
 8000674:	187b      	adds	r3, r7, r1
 8000676:	701a      	strb	r2, [r3, #0]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000678:	183b      	adds	r3, r7, r0
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2208      	movs	r2, #8
 800067e:	4313      	orrs	r3, r2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	187b      	adds	r3, r7, r1
 8000684:	705a      	strb	r2, [r3, #1]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000686:	193b      	adds	r3, r7, r4
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	220c      	movs	r2, #12
 800068c:	4313      	orrs	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	187b      	adds	r3, r7, r1
 8000692:	709a      	strb	r2, [r3, #2]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000694:	193b      	adds	r3, r7, r4
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2208      	movs	r2, #8
 800069a:	4313      	orrs	r3, r2
 800069c:	b2da      	uxtb	r2, r3
 800069e:	000c      	movs	r4, r1
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	70da      	strb	r2, [r3, #3]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	0019      	movs	r1, r3
 80006ae:	193a      	adds	r2, r7, r4
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2304      	movs	r3, #4
 80006b6:	f002 f931 	bl	800291c <HAL_I2C_Master_Transmit>
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b005      	add	sp, #20
 80006c0:	bd90      	pop	{r4, r7, pc}

080006c2 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80006c2:	b590      	push	{r4, r7, lr}
 80006c4:	b087      	sub	sp, #28
 80006c6:	af02      	add	r7, sp, #8
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	000a      	movs	r2, r1
 80006cc:	1cfb      	adds	r3, r7, #3
 80006ce:	701a      	strb	r2, [r3, #0]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80006d0:	200f      	movs	r0, #15
 80006d2:	183b      	adds	r3, r7, r0
 80006d4:	1cfa      	adds	r2, r7, #3
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	210f      	movs	r1, #15
 80006da:	438a      	bics	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	011a      	lsls	r2, r3, #4
 80006e4:	240e      	movs	r4, #14
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	701a      	strb	r2, [r3, #0]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80006ea:	183b      	adds	r3, r7, r0
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	220d      	movs	r2, #13
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	2108      	movs	r1, #8
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	701a      	strb	r2, [r3, #0]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2209      	movs	r2, #9
 8000700:	4313      	orrs	r3, r2
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	705a      	strb	r2, [r3, #1]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	220d      	movs	r2, #13
 800070e:	4313      	orrs	r3, r2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	187b      	adds	r3, r7, r1
 8000714:	709a      	strb	r2, [r3, #2]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000716:	193b      	adds	r3, r7, r4
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2209      	movs	r2, #9
 800071c:	4313      	orrs	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	000c      	movs	r4, r1
 8000722:	187b      	adds	r3, r7, r1
 8000724:	70da      	strb	r2, [r3, #3]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	0019      	movs	r1, r3
 8000730:	193a      	adds	r2, r7, r4
 8000732:	2364      	movs	r3, #100	@ 0x64
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2304      	movs	r3, #4
 8000738:	f002 f8f0 	bl	800291c <HAL_I2C_Master_Transmit>
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b005      	add	sp, #20
 8000742:	bd90      	pop	{r4, r7, pc}

08000744 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff ff75 	bl	8000640 <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e007      	b.n	800076c <lcd_clear+0x28>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2120      	movs	r1, #32
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ffae 	bl	80006c2 <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b4f      	cmp	r3, #79	@ 0x4f
 8000770:	ddf4      	ble.n	800075c <lcd_clear+0x18>
    }
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b004      	add	sp, #16
 800077a:	bd80      	pop	{r7, pc}

0800077c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d024      	beq.n	80007d8 <lcd_gotoxy+0x5c>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b03      	cmp	r3, #3
 8000792:	dc31      	bgt.n	80007f8 <lcd_gotoxy+0x7c>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d017      	beq.n	80007ca <lcd_gotoxy+0x4e>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc2b      	bgt.n	80007f8 <lcd_gotoxy+0x7c>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <lcd_gotoxy+0x32>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d007      	beq.n	80007bc <lcd_gotoxy+0x40>
    {
        case 0: address = 0x80 + col; break;  // First row
        case 1: address = 0xC0 + col; break;  // Second row
        case 2: address = 0x94 + col; break;  // Third row
        case 3: address = 0xD4 + col; break;  // Fourth row
        default: return;  // Ignore invalid row numbers
 80007ac:	e024      	b.n	80007f8 <lcd_gotoxy+0x7c>
        case 0: address = 0x80 + col; break;  // First row
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	2317      	movs	r3, #23
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	3a80      	subs	r2, #128	@ 0x80
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e014      	b.n	80007e6 <lcd_gotoxy+0x6a>
        case 1: address = 0xC0 + col; break;  // Second row
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	2317      	movs	r3, #23
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	3a40      	subs	r2, #64	@ 0x40
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e00d      	b.n	80007e6 <lcd_gotoxy+0x6a>
        case 2: address = 0x94 + col; break;  // Third row
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	2317      	movs	r3, #23
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	3a6c      	subs	r2, #108	@ 0x6c
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e006      	b.n	80007e6 <lcd_gotoxy+0x6a>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	2317      	movs	r3, #23
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	3a2c      	subs	r2, #44	@ 0x2c
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	46c0      	nop			@ (mov r8, r8)
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 80007e6:	2317      	movs	r3, #23
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff25 	bl	8000640 <lcd_send_cmd>
 80007f6:	e000      	b.n	80007fa <lcd_gotoxy+0x7e>
        default: return;  // Ignore invalid row numbers
 80007f8:	46c0      	nop			@ (mov r8, r8)
}
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b006      	add	sp, #24
 80007fe:	bd80      	pop	{r7, pc}

08000800 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000808:	2032      	movs	r0, #50	@ 0x32
 800080a:	f000 ffdd 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2130      	movs	r1, #48	@ 0x30
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff ff14 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(5);
 8000818:	2005      	movs	r0, #5
 800081a:	f000 ffd5 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2130      	movs	r1, #48	@ 0x30
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff ff0c 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f000 ffcd 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2130      	movs	r1, #48	@ 0x30
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff04 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 ffc5 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2120      	movs	r1, #32
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff fefc 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(10);
 8000848:	200a      	movs	r0, #10
 800084a:	f000 ffbd 	bl	80017c8 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2128      	movs	r1, #40	@ 0x28
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fef4 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 ffb5 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2108      	movs	r1, #8
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff feec 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f000 ffad 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2101      	movs	r1, #1
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff fee4 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(2);
 8000878:	2002      	movs	r0, #2
 800087a:	f000 ffa5 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2106      	movs	r1, #6
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff fedc 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 ff9d 	bl	80017c8 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	210c      	movs	r1, #12
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fed4 	bl	8000640 <lcd_send_cmd>
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}

080008a0 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80008aa:	e008      	b.n	80008be <lcd_puts+0x1e>
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	603a      	str	r2, [r7, #0]
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff ff02 	bl	80006c2 <lcd_send_data>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f2      	bne.n	80008ac <lcd_puts+0xc>
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <map>:

    return debounced_state;
}
*/
//=====MAP FUNCTION=====		// Calculates input range, calculates output range, then uses linear interpolation formula - taken from arduino source code
int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	69b9      	ldr	r1, [r7, #24]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	435a      	muls	r2, r3
 80008ec:	0010      	movs	r0, r2
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	0019      	movs	r1, r3
 80008f6:	f7ff fca1 	bl	800023c <__divsi3>
 80008fa:	0003      	movs	r3, r0
 80008fc:	001a      	movs	r2, r3
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	18d3      	adds	r3, r2, r3
}
 8000902:	0018      	movs	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <lcd_print_int>:

//=====LCD PRINT INT FUNCTION=====
void lcd_print_int(int num){
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	char holdme[16]; //storing string version of integer
	sprintf(holdme, "%d", num); //conversion of integer to string
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4908      	ldr	r1, [pc, #32]	@ (8000938 <lcd_print_int+0x2c>)
 8000918:	2408      	movs	r4, #8
 800091a:	193b      	adds	r3, r7, r4
 800091c:	0018      	movs	r0, r3
 800091e:	f005 f96b 	bl	8005bf8 <siprintf>
	lcd_puts(&lcd1, holdme);			//send to LCD
 8000922:	193a      	adds	r2, r7, r4
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <lcd_print_int+0x30>)
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ffb9 	bl	80008a0 <lcd_puts>
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b007      	add	sp, #28
 8000934:	bd90      	pop	{r4, r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	0800654c 	.word	0x0800654c
 800093c:	20000220 	.word	0x20000220

08000940 <setServoPulse>:

//=====SET SERVO PULSE FUNCTION=====
void setServoPulse(uint16_t pulse) {
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b08b      	sub	sp, #44	@ 0x2c
 8000944:	af00      	add	r7, sp, #0
 8000946:	0002      	movs	r2, r0
 8000948:	1dbb      	adds	r3, r7, #6
 800094a:	801a      	strh	r2, [r3, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	240c      	movs	r4, #12
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	231c      	movs	r3, #28
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f005 f96e 	bl	8005c38 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095c:	0021      	movs	r1, r4
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2260      	movs	r2, #96	@ 0x60
 8000962:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = pulse;
 8000964:	1dbb      	adds	r3, r7, #6
 8000966:	881a      	ldrh	r2, [r3, #0]
 8000968:	187b      	adds	r3, r7, r1
 800096a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&SERVO_TIM_HANDLE, &sConfigOC, SERVO_TIM_CHANNEL);
 8000978:	1879      	adds	r1, r7, r1
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <setServoPulse+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	0018      	movs	r0, r3
 8000980:	f003 fbce 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&SERVO_TIM_HANDLE, SERVO_TIM_CHANNEL);
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <setServoPulse+0x58>)
 8000986:	2100      	movs	r1, #0
 8000988:	0018      	movs	r0, r3
 800098a:	f003 fadf 	bl	8003f4c <HAL_TIM_PWM_Start>
}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b00b      	add	sp, #44	@ 0x2c
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	20000140 	.word	0x20000140

0800099c <stateA_actions>:


//=====STATE A ACTIONS=====
void stateA_actions(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

	//LCD CONTROL
	lcd_clear(&lcd1);							//clear lcd screen
 80009a2:	4b30      	ldr	r3, [pc, #192]	@ (8000a64 <stateA_actions+0xc8>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fecd 	bl	8000744 <lcd_clear>
	lcd_gotoxy(&lcd1, 0, 0);					//position cursor in top left
 80009aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000a64 <stateA_actions+0xc8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f7ff fee3 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "SID:");					//print 'SID'
 80009b6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a68 <stateA_actions+0xcc>)
 80009b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <stateA_actions+0xc8>)
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff ff6f 	bl	80008a0 <lcd_puts>
	lcd_puts(&lcd1, student_id);				//print my student ID number
 80009c2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a6c <stateA_actions+0xd0>)
 80009c4:	4b27      	ldr	r3, [pc, #156]	@ (8000a64 <stateA_actions+0xc8>)
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff ff69 	bl	80008a0 <lcd_puts>
	lcd_gotoxy(&lcd1, 0, 1);					//position cursor to second line
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <stateA_actions+0xc8>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	2100      	movs	r1, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fed1 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "MECHATRONICS 1");			//print string to second line
 80009da:	4a25      	ldr	r2, [pc, #148]	@ (8000a70 <stateA_actions+0xd4>)
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <stateA_actions+0xc8>)
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff5d 	bl	80008a0 <lcd_puts>

	//UART CONTROL
	static uint32_t last_uart_transmit = 0; //timer starts from 0
	if (transmit_uart && (HAL_GetTick() - last_uart_transmit >= UART_TRANSMIT_INTERVAL)){ //if there is a transmission flag and the time interval for transmissions has passed, then
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <stateA_actions+0xd8>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d021      	beq.n	8000a32 <stateA_actions+0x96>
 80009ee:	f000 fee1 	bl	80017b4 <HAL_GetTick>
 80009f2:	0002      	movs	r2, r0
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <stateA_actions+0xdc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1ad2      	subs	r2, r2, r3
 80009fa:	23fa      	movs	r3, #250	@ 0xfa
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d317      	bcc.n	8000a32 <stateA_actions+0x96>
		sprintf(uart_message, "Autumn2025 MX1 SID: %s, ADC Reading: %lu", student_id, adc_value); //print message to monitor, inserting student_id and adc_value into the string
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <stateA_actions+0xe0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <stateA_actions+0xd0>)
 8000a08:	491d      	ldr	r1, [pc, #116]	@ (8000a80 <stateA_actions+0xe4>)
 8000a0a:	481e      	ldr	r0, [pc, #120]	@ (8000a84 <stateA_actions+0xe8>)
 8000a0c:	f005 f8f4 	bl	8005bf8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_message, strlen(uart_message), HAL_MAX_DELAY); //using STM32HAL functions to transmit UART. Converts uart_message into an integer that can be transmitted over UART.
 8000a10:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <stateA_actions+0xe8>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fb76 	bl	8000104 <strlen>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	4918      	ldr	r1, [pc, #96]	@ (8000a84 <stateA_actions+0xe8>)
 8000a22:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <stateA_actions+0xec>)
 8000a24:	f004 f952 	bl	8004ccc <HAL_UART_Transmit>
		last_uart_transmit = HAL_GetTick(); //update last transmit time
 8000a28:	f000 fec4 	bl	80017b4 <HAL_GetTick>
 8000a2c:	0002      	movs	r2, r0
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <stateA_actions+0xdc>)
 8000a30:	601a      	str	r2, [r3, #0]
	}

	//UART KEYBOARD TOGGLE
	uint8_t received_char;												//variable to store character received
	if (HAL_UART_Receive(&huart2, &received_char, 1, 0) == HAL_OK) {	//if statement checks if the UART successfully received a character
 8000a32:	1df9      	adds	r1, r7, #7
 8000a34:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <stateA_actions+0xec>)
 8000a36:	2300      	movs	r3, #0
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f004 f9eb 	bl	8004e14 <HAL_UART_Receive>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d10b      	bne.n	8000a5a <stateA_actions+0xbe>
		if (received_char == 's') {										//if it is successful, and the character matches, then toggle the UART transmissions
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b73      	cmp	r3, #115	@ 0x73
 8000a48:	d107      	bne.n	8000a5a <stateA_actions+0xbe>
			transmit_uart = !transmit_uart;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <stateA_actions+0xd8>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	425a      	negs	r2, r3
 8000a50:	4153      	adcs	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	001a      	movs	r2, r3
 8000a56:	4b07      	ldr	r3, [pc, #28]	@ (8000a74 <stateA_actions+0xd8>)
 8000a58:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	20000220 	.word	0x20000220
 8000a68:	08006550 	.word	0x08006550
 8000a6c:	20000004 	.word	0x20000004
 8000a70:	08006558 	.word	0x08006558
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000298 	.word	0x20000298
 8000a7c:	20000290 	.word	0x20000290
 8000a80:	08006568 	.word	0x08006568
 8000a84:	2000022c 	.word	0x2000022c
 8000a88:	2000018c 	.word	0x2000018c

08000a8c <stateB_actions>:

//=====STATE B ACTIONS=====
void stateB_actions(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af02      	add	r7, sp, #8
	//LCD CONTROL FOR ADC VALUES
	lcd_clear(&lcd1);					//clear lcd
 8000a92:	4b5c      	ldr	r3, [pc, #368]	@ (8000c04 <stateB_actions+0x178>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff fe55 	bl	8000744 <lcd_clear>
	lcd_gotoxy(&lcd1, 0, 0);			//position cursor top left
 8000a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8000c04 <stateB_actions+0x178>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fe6b 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "ADC:");				//print ADC
 8000aa6:	4a58      	ldr	r2, [pc, #352]	@ (8000c08 <stateB_actions+0x17c>)
 8000aa8:	4b56      	ldr	r3, [pc, #344]	@ (8000c04 <stateB_actions+0x178>)
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fef7 	bl	80008a0 <lcd_puts>
	lcd_print_int(adc_value);		//print the ADC value as an integer
 8000ab2:	4b56      	ldr	r3, [pc, #344]	@ (8000c0c <stateB_actions+0x180>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff ff28 	bl	800090c <lcd_print_int>
	lcd_puts(&lcd1, " STATE B");
 8000abc:	4a54      	ldr	r2, [pc, #336]	@ (8000c10 <stateB_actions+0x184>)
 8000abe:	4b51      	ldr	r3, [pc, #324]	@ (8000c04 <stateB_actions+0x178>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff feec 	bl	80008a0 <lcd_puts>
	lcd_gotoxy(&lcd1, 0, 1);			//next line
 8000ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c04 <stateB_actions+0x178>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	2100      	movs	r1, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fe54 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "MECHATRONICS 1");
 8000ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8000c14 <stateB_actions+0x188>)
 8000ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c04 <stateB_actions+0x178>)
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fee0 	bl	80008a0 <lcd_puts>


	//UART CONTROL
	transmit_uart = 0; 				//disable UART communication
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8000c18 <stateB_actions+0x18c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	//ONBOARD LED CONTROL WITH POT
	static uint32_t last_led1_blink = 0; //period since last blink
	uint32_t led1_blink_period;			 //storage for variable blink timing
	static uint8_t led1_state = 0;				 //state of LED (off or on)

	led1_blink_period = map(adc_value, 0, 4095, 200, 1000); //linear interpolation of ADC values to led blink period, 5Hz -> 1Hz
 8000ae6:	4b49      	ldr	r3, [pc, #292]	@ (8000c0c <stateB_actions+0x180>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0018      	movs	r0, r3
 8000aec:	4a4b      	ldr	r2, [pc, #300]	@ (8000c1c <stateB_actions+0x190>)
 8000aee:	23fa      	movs	r3, #250	@ 0xfa
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	23c8      	movs	r3, #200	@ 0xc8
 8000af6:	2100      	movs	r1, #0
 8000af8:	f7ff feea 	bl	80008d0 <map>
 8000afc:	0003      	movs	r3, r0
 8000afe:	607b      	str	r3, [r7, #4]

	if (HAL_GetTick() - last_led1_blink >= led1_blink_period) { //checks if enough time has passed between blinks
 8000b00:	f000 fe58 	bl	80017b4 <HAL_GetTick>
 8000b04:	0002      	movs	r2, r0
 8000b06:	4b46      	ldr	r3, [pc, #280]	@ (8000c20 <stateB_actions+0x194>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d818      	bhi.n	8000b44 <stateB_actions+0xb8>
		led1_state = !led1_state; 								//toggle LED
 8000b12:	4b44      	ldr	r3, [pc, #272]	@ (8000c24 <stateB_actions+0x198>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	425a      	negs	r2, r3
 8000b18:	4153      	adcs	r3, r2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	4b41      	ldr	r3, [pc, #260]	@ (8000c24 <stateB_actions+0x198>)
 8000b20:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, led1_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //Control of actual LED output. Takes port and pin info from definitions above
 8000b22:	4b40      	ldr	r3, [pc, #256]	@ (8000c24 <stateB_actions+0x198>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	1e5a      	subs	r2, r3, #1
 8000b28:	4193      	sbcs	r3, r2
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	23a0      	movs	r3, #160	@ 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2120      	movs	r1, #32
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 fe2e 	bl	8002796 <HAL_GPIO_WritePin>
		last_led1_blink = HAL_GetTick(); //update blink time
 8000b3a:	f000 fe3b 	bl	80017b4 <HAL_GetTick>
 8000b3e:	0002      	movs	r2, r0
 8000b40:	4b37      	ldr	r3, [pc, #220]	@ (8000c20 <stateB_actions+0x194>)
 8000b42:	601a      	str	r2, [r3, #0]
	//EXTERNAL LED CONTROL
	static uint32_t last_led2_3_blink = 0; //variable to control timing for both LEDs
	static uint8_t led2_state = 0;				   //state of LED2 (on or off)
	static uint8_t led3_state = 0;				   //state of LED3 (on or off)

	if (button1_pressed) { 			//checks for valid debounced button press
 8000b44:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <stateB_actions+0x19c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d007      	beq.n	8000b5c <stateB_actions+0xd0>
		led_select = !led_select;	//toggle between LEDs when button 1 pressed
 8000b4c:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <stateB_actions+0x1a0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	425a      	negs	r2, r3
 8000b52:	4153      	adcs	r3, r2
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	001a      	movs	r2, r3
 8000b58:	4b34      	ldr	r3, [pc, #208]	@ (8000c2c <stateB_actions+0x1a0>)
 8000b5a:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - last_led2_3_blink >= 500) { //1Hz blinking 500on 500off
 8000b5c:	f000 fe2a 	bl	80017b4 <HAL_GetTick>
 8000b60:	0002      	movs	r2, r0
 8000b62:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <stateB_actions+0x1a4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1ad2      	subs	r2, r2, r3
 8000b68:	23fa      	movs	r3, #250	@ 0xfa
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d32f      	bcc.n	8000bd0 <stateB_actions+0x144>
        last_led2_3_blink = HAL_GetTick(); 			//update blink time
 8000b70:	f000 fe20 	bl	80017b4 <HAL_GetTick>
 8000b74:	0002      	movs	r2, r0
 8000b76:	4b2e      	ldr	r3, [pc, #184]	@ (8000c30 <stateB_actions+0x1a4>)
 8000b78:	601a      	str	r2, [r3, #0]
        if (led_select == 0) {						//checks which LED is selected and toggles state
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c2c <stateB_actions+0x1a0>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d113      	bne.n	8000baa <stateB_actions+0x11e>
        	led2_state = !led2_state;
 8000b82:	4b2c      	ldr	r3, [pc, #176]	@ (8000c34 <stateB_actions+0x1a8>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	425a      	negs	r2, r3
 8000b88:	4153      	adcs	r3, r2
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4b29      	ldr	r3, [pc, #164]	@ (8000c34 <stateB_actions+0x1a8>)
 8000b90:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(LED_2_PORT, LED_2_PIN, led2_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //actual output of LED2, will toggle either off or on
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <stateB_actions+0x1a8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	4193      	sbcs	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <stateB_actions+0x1ac>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f001 fdf7 	bl	8002796 <HAL_GPIO_WritePin>
 8000ba8:	e012      	b.n	8000bd0 <stateB_actions+0x144>
        } else {
        	led3_state = !led3_state;
 8000baa:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <stateB_actions+0x1b0>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	425a      	negs	r2, r3
 8000bb0:	4153      	adcs	r3, r2
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <stateB_actions+0x1b0>)
 8000bb8:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(LED_3_PORT, LED_3_PIN, led3_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //same thing for LED3
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <stateB_actions+0x1b0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	1e5a      	subs	r2, r3, #1
 8000bc0:	4193      	sbcs	r3, r2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <stateB_actions+0x1ac>)
 8000bc8:	2102      	movs	r1, #2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f001 fde3 	bl	8002796 <HAL_GPIO_WritePin>
        }
	}

	//SERVO CONTROL FROM POT
	uint16_t servo_pulse_width = map(adc_value, 0, 4095, 1000, 2000); //map adc values to servo PWM
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <stateB_actions+0x180>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	23fa      	movs	r3, #250	@ 0xfa
 8000bd8:	009a      	lsls	r2, r3, #2
 8000bda:	4910      	ldr	r1, [pc, #64]	@ (8000c1c <stateB_actions+0x190>)
 8000bdc:	23fa      	movs	r3, #250	@ 0xfa
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	0013      	movs	r3, r2
 8000be4:	000a      	movs	r2, r1
 8000be6:	2100      	movs	r1, #0
 8000be8:	f7ff fe72 	bl	80008d0 <map>
 8000bec:	0002      	movs	r2, r0
 8000bee:	1cbb      	adds	r3, r7, #2
 8000bf0:	801a      	strh	r2, [r3, #0]
	setServoPulse(servo_pulse_width); //write to the servo
 8000bf2:	1cbb      	adds	r3, r7, #2
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fea2 	bl	8000940 <setServoPulse>


}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000220 	.word	0x20000220
 8000c08:	08006594 	.word	0x08006594
 8000c0c:	20000290 	.word	0x20000290
 8000c10:	0800659c 	.word	0x0800659c
 8000c14:	08006558 	.word	0x08006558
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	00000fff 	.word	0x00000fff
 8000c20:	2000029c 	.word	0x2000029c
 8000c24:	200002a0 	.word	0x200002a0
 8000c28:	20000295 	.word	0x20000295
 8000c2c:	20000294 	.word	0x20000294
 8000c30:	200002a4 	.word	0x200002a4
 8000c34:	200002a8 	.word	0x200002a8
 8000c38:	50000400 	.word	0x50000400
 8000c3c:	200002a9 	.word	0x200002a9

08000c40 <stateC_actions>:
//=====STATE C ACTIONS=====
void stateC_actions(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

	//check everything disabled
	transmit_uart = 0;
 8000c44:	4b02      	ldr	r3, [pc, #8]	@ (8000c50 <stateC_actions+0x10>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]


}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5a:	f000 fd2f 	bl	80016bc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5e:	f000 f891 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c62:	f000 fa7b 	bl	800115c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c66:	f000 f8d5 	bl	8000e14 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c6a:	f000 f93d 	bl	8000ee8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000c6e:	f000 fa27 	bl	80010c0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000c72:	f000 f979 	bl	8000f68 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);					//begin adc conversion
 8000c76:	4b3d      	ldr	r3, [pc, #244]	@ (8000d6c <main+0x118>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f001 f895 	bl	8001da8 <HAL_ADC_Start>

  lcd1.hi2c = &hi2c1;
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d70 <main+0x11c>)
 8000c80:	4a3c      	ldr	r2, [pc, #240]	@ (8000d74 <main+0x120>)
 8000c82:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4E; //lcd address
 8000c84:	4b3a      	ldr	r3, [pc, #232]	@ (8000d70 <main+0x11c>)
 8000c86:	224e      	movs	r2, #78	@ 0x4e
 8000c88:	711a      	strb	r2, [r3, #4]

  lcd_init(&lcd1); //initialise LCD
 8000c8a:	4b39      	ldr	r3, [pc, #228]	@ (8000d70 <main+0x11c>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff fdb7 	bl	8000800 <lcd_init>
	  	 /* uint8_t button2_pressed = debounceButton(EXT_BUTTON_1_PORT, EXT_BUTTON_1_PIN, &last_button2_press_time, 1);
	  	  uint8_t button1_pressed = debounceButton(ONB_BUTTON_PORT, ONB_BUTTON_PIN, &last_button1_press_time, 1);
	  	  HAL_Delay (5);
	  	 */
		  // ===== Direct Button Read with Active High Interpretation =====
		  uint8_t button1_pressed = !HAL_GPIO_ReadPin(ONB_BUTTON_PORT, ONB_BUTTON_PIN);
 8000c92:	2380      	movs	r3, #128	@ 0x80
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	4a38      	ldr	r2, [pc, #224]	@ (8000d78 <main+0x124>)
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0010      	movs	r0, r2
 8000c9c:	f001 fd5e 	bl	800275c <HAL_GPIO_ReadPin>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	425a      	negs	r2, r3
 8000ca4:	4153      	adcs	r3, r2
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	701a      	strb	r2, [r3, #0]
		  uint8_t button2_pressed = HAL_GPIO_ReadPin(EXT_BUTTON_1_PORT, EXT_BUTTON_1_PIN);
 8000cac:	1dbc      	adds	r4, r7, #6
 8000cae:	23a0      	movs	r3, #160	@ 0xa0
 8000cb0:	05db      	lsls	r3, r3, #23
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 fd51 	bl	800275c <HAL_GPIO_ReadPin>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	7023      	strb	r3, [r4, #0]

		  // ===== ADC Control (Keep this) =====
		  if (HAL_ADC_GetState(&hadc1) == HAL_ADC_STATE_REG_EOC) {
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000d6c <main+0x118>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 faa3 	bl	800220c <HAL_ADC_GetState>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d10a      	bne.n	8000ce6 <main+0x92>
			  adc_value = HAL_ADC_GetValue(&hadc1);
 8000cd0:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <main+0x118>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f001 f8b6 	bl	8001e44 <HAL_ADC_GetValue>
 8000cd8:	0002      	movs	r2, r0
 8000cda:	4b28      	ldr	r3, [pc, #160]	@ (8000d7c <main+0x128>)
 8000cdc:	601a      	str	r2, [r3, #0]
			  HAL_ADC_Start(&hadc1);
 8000cde:	4b23      	ldr	r3, [pc, #140]	@ (8000d6c <main+0x118>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 f861 	bl	8001da8 <HAL_ADC_Start>
		  }

		  // ===== Updating State =====
		  SystemState_t previousState = currentState; // Store the previous state
 8000ce6:	1d7b      	adds	r3, r7, #5
 8000ce8:	4a25      	ldr	r2, [pc, #148]	@ (8000d80 <main+0x12c>)
 8000cea:	7812      	ldrb	r2, [r2, #0]
 8000cec:	701a      	strb	r2, [r3, #0]

		  if (button2_pressed) {
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d012      	beq.n	8000d1c <main+0xc8>
			  if (currentState == STATE_A || currentState == STATE_C){
 8000cf6:	4b22      	ldr	r3, [pc, #136]	@ (8000d80 <main+0x12c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <main+0xb2>
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <main+0x12c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d103      	bne.n	8000d0e <main+0xba>
				  currentState = STATE_B;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <main+0x12c>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e006      	b.n	8000d1c <main+0xc8>
			  }	else if (currentState == STATE_B) {
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <main+0x12c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d102      	bne.n	8000d1c <main+0xc8>
				  currentState = STATE_A;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <main+0x12c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if (currentState == STATE_A && button1_pressed) {
 8000d1c:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <main+0x12c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d106      	bne.n	8000d32 <main+0xde>
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <main+0xde>
			  currentState = STATE_C;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <main+0x12c>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	701a      	strb	r2, [r3, #0]
		  }

		  // ===== FUNCTION CONTROL DEPENDING ON STATE (Update LCD only on state change) =====
		  if (currentState != previousState) {
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <main+0x12c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	1d7a      	adds	r2, r7, #5
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d012      	beq.n	8000d64 <main+0x110>
			  switch (currentState) {
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <main+0x12c>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d00b      	beq.n	8000d5e <main+0x10a>
 8000d46:	dc0d      	bgt.n	8000d64 <main+0x110>
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <main+0xfe>
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d003      	beq.n	8000d58 <main+0x104>
 8000d50:	e008      	b.n	8000d64 <main+0x110>
				  case STATE_A:
					  stateA_actions();
 8000d52:	f7ff fe23 	bl	800099c <stateA_actions>
					  break;
 8000d56:	e005      	b.n	8000d64 <main+0x110>
				  case STATE_B:
					  stateB_actions();
 8000d58:	f7ff fe98 	bl	8000a8c <stateB_actions>
					  break;
 8000d5c:	e002      	b.n	8000d64 <main+0x110>
				  case STATE_C:
					  stateC_actions();
 8000d5e:	f7ff ff6f 	bl	8000c40 <stateC_actions>
					  break;
 8000d62:	46c0      	nop			@ (mov r8, r8)
			  }
		  }

		  HAL_Delay(10); // stability
 8000d64:	200a      	movs	r0, #10
 8000d66:	f000 fd2f 	bl	80017c8 <HAL_Delay>
	  {
 8000d6a:	e792      	b.n	8000c92 <main+0x3e>
 8000d6c:	20000088 	.word	0x20000088
 8000d70:	20000220 	.word	0x20000220
 8000d74:	200000ec 	.word	0x200000ec
 8000d78:	50000800 	.word	0x50000800
 8000d7c:	20000290 	.word	0x20000290
 8000d80:	20000228 	.word	0x20000228

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b093      	sub	sp, #76	@ 0x4c
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	2410      	movs	r4, #16
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2338      	movs	r3, #56	@ 0x38
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f004 ff4f 	bl	8005c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	2310      	movs	r3, #16
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f004 ff48 	bl	8005c38 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 f9ad 	bl	800310c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2202      	movs	r2, #2
 8000db6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	0052      	lsls	r2, r2, #1
 8000dbe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2240      	movs	r2, #64	@ 0x40
 8000dca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 f9e5 	bl	80031a4 <HAL_RCC_OscConfig>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000dde:	f000 fa49 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	003b      	movs	r3, r7
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f002 fcea 	bl	80037d8 <HAL_RCC_ClockConfig>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e08:	f000 fa34 	bl	8001274 <Error_Handler>
  }
}
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b013      	add	sp, #76	@ 0x4c
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	230c      	movs	r3, #12
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f004 ff08 	bl	8005c38 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee4 <MX_ADC1_Init+0xd0>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e30:	2280      	movs	r2, #128	@ 0x80
 8000e32:	05d2      	lsls	r2, r2, #23
 8000e34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e42:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e48:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e68:	2220      	movs	r2, #32
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e7c:	222c      	movs	r2, #44	@ 0x2c
 8000e7e:	2100      	movs	r1, #0
 8000e80:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e96:	223c      	movs	r2, #60	@ 0x3c
 8000e98:	2100      	movs	r1, #0
 8000e9a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f000 fdd7 	bl	8001a58 <HAL_ADC_Init>
 8000eaa:	1e03      	subs	r3, r0, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000eae:	f000 f9e1 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	1d3a      	adds	r2, r7, #4
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_ADC1_Init+0xcc>)
 8000ec8:	0011      	movs	r1, r2
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 ffc6 	bl	8001e5c <HAL_ADC_ConfigChannel>
 8000ed0:	1e03      	subs	r3, r0, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000ed4:	f000 f9ce 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b004      	add	sp, #16
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000088 	.word	0x20000088
 8000ee4:	40012400 	.word	0x40012400

08000ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <MX_I2C1_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f64 <MX_I2C1_Init+0x7c>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f24:	0018      	movs	r0, r3
 8000f26:	f001 fc53 	bl	80027d0 <HAL_I2C_Init>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f2e:	f000 f9a1 	bl	8001274 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f002 f850 	bl	8002fdc <HAL_I2CEx_ConfigAnalogFilter>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f40:	f000 f998 	bl	8001274 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <MX_I2C1_Init+0x74>)
 8000f46:	2100      	movs	r1, #0
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f002 f893 	bl	8003074 <HAL_I2CEx_ConfigDigitalFilter>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f000 f98f 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200000ec 	.word	0x200000ec
 8000f60:	40005400 	.word	0x40005400
 8000f64:	00503d58 	.word	0x00503d58

08000f68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b098      	sub	sp, #96	@ 0x60
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6e:	2354      	movs	r3, #84	@ 0x54
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	0018      	movs	r0, r3
 8000f74:	230c      	movs	r3, #12
 8000f76:	001a      	movs	r2, r3
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f004 fe5d 	bl	8005c38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	2338      	movs	r3, #56	@ 0x38
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	0018      	movs	r0, r3
 8000f84:	231c      	movs	r3, #28
 8000f86:	001a      	movs	r2, r3
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f004 fe55 	bl	8005c38 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	0018      	movs	r0, r3
 8000f92:	2334      	movs	r3, #52	@ 0x34
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f004 fe4e 	bl	8005c38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9c:	4b45      	ldr	r3, [pc, #276]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000f9e:	4a46      	ldr	r2, [pc, #280]	@ (80010b8 <MX_TIM1_Init+0x150>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa2:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b42      	ldr	r3, [pc, #264]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fae:	4b41      	ldr	r3, [pc, #260]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000fb0:	4a42      	ldr	r2, [pc, #264]	@ (80010bc <MX_TIM1_Init+0x154>)
 8000fb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f002 ff67 	bl	8003e9c <HAL_TIM_PWM_Init>
 8000fce:	1e03      	subs	r3, r0, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f000 f94f 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2154      	movs	r1, #84	@ 0x54
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fea:	187a      	adds	r2, r7, r1
 8000fec:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f003 fd0b 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ffa:	f000 f93b 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffe:	2138      	movs	r1, #56	@ 0x38
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2260      	movs	r2, #96	@ 0x60
 8001004:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	1879      	adds	r1, r7, r1
 800102c:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 800102e:	2200      	movs	r2, #0
 8001030:	0018      	movs	r0, r3
 8001032:	f003 f875 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d001      	beq.n	800103e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800103a:	f000 f91b 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	0192      	lsls	r2, r2, #6
 8001062:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	0492      	lsls	r2, r2, #18
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001090:	1d3a      	adds	r2, r7, #4
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 8001094:	0011      	movs	r1, r2
 8001096:	0018      	movs	r0, r3
 8001098:	f003 fd26 	bl	8004ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80010a0:	f000 f8e8 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <MX_TIM1_Init+0x14c>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 f9ea 	bl	8001480 <HAL_TIM_MspPostInit>

}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b018      	add	sp, #96	@ 0x60
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000140 	.word	0x20000140
 80010b8:	40012c00 	.word	0x40012c00
 80010bc:	0000ffff 	.word	0x0000ffff

080010c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c4:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010c6:	4a24      	ldr	r2, [pc, #144]	@ (8001158 <MX_USART2_UART_Init+0x98>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ca:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010cc:	22e1      	movs	r2, #225	@ 0xe1
 80010ce:	0252      	lsls	r2, r2, #9
 80010d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 800110a:	0018      	movs	r0, r3
 800110c:	f003 fd88 	bl	8004c20 <HAL_UART_Init>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d001      	beq.n	8001118 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 f8ae 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 800111a:	2100      	movs	r1, #0
 800111c:	0018      	movs	r0, r3
 800111e:	f004 fc8b 	bl	8005a38 <HAL_UARTEx_SetTxFifoThreshold>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d001      	beq.n	800112a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001126:	f000 f8a5 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 800112c:	2100      	movs	r1, #0
 800112e:	0018      	movs	r0, r3
 8001130:	f004 fcc2 	bl	8005ab8 <HAL_UARTEx_SetRxFifoThreshold>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001138:	f000 f89c 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <MX_USART2_UART_Init+0x94>)
 800113e:	0018      	movs	r0, r3
 8001140:	f004 fc40 	bl	80059c4 <HAL_UARTEx_DisableFifoMode>
 8001144:	1e03      	subs	r3, r0, #0
 8001146:	d001      	beq.n	800114c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001148:	f000 f894 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114c:	46c0      	nop			@ (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	2000018c 	.word	0x2000018c
 8001158:	40004400 	.word	0x40004400

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	240c      	movs	r4, #12
 8001164:	193b      	adds	r3, r7, r4
 8001166:	0018      	movs	r0, r3
 8001168:	2314      	movs	r3, #20
 800116a:	001a      	movs	r2, r3
 800116c:	2100      	movs	r1, #0
 800116e:	f004 fd63 	bl	8005c38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b3d      	ldr	r3, [pc, #244]	@ (8001268 <MX_GPIO_Init+0x10c>)
 8001174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001176:	4b3c      	ldr	r3, [pc, #240]	@ (8001268 <MX_GPIO_Init+0x10c>)
 8001178:	2104      	movs	r1, #4
 800117a:	430a      	orrs	r2, r1
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
 800117e:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <MX_GPIO_Init+0x10c>)
 8001180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001182:	2204      	movs	r2, #4
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b37      	ldr	r3, [pc, #220]	@ (8001268 <MX_GPIO_Init+0x10c>)
 800118c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800118e:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <MX_GPIO_Init+0x10c>)
 8001190:	2101      	movs	r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	635a      	str	r2, [r3, #52]	@ 0x34
 8001196:	4b34      	ldr	r3, [pc, #208]	@ (8001268 <MX_GPIO_Init+0x10c>)
 8001198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119a:	2201      	movs	r2, #1
 800119c:	4013      	ands	r3, r2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b31      	ldr	r3, [pc, #196]	@ (8001268 <MX_GPIO_Init+0x10c>)
 80011a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a6:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <MX_GPIO_Init+0x10c>)
 80011a8:	2102      	movs	r1, #2
 80011aa:	430a      	orrs	r2, r1
 80011ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <MX_GPIO_Init+0x10c>)
 80011b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_ONB_GPIO_Port, LED_1_ONB_Pin, GPIO_PIN_RESET);
 80011ba:	23a0      	movs	r3, #160	@ 0xa0
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	0018      	movs	r0, r3
 80011c4:	f001 fae7 	bl	8002796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_GPIO_Init+0x110>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	2103      	movs	r1, #3
 80011ce:	0018      	movs	r0, r3
 80011d0:	f001 fae1 	bl	8002796 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONB_BUTTON_Pin */
  GPIO_InitStruct.Pin = ONB_BUTTON_Pin;
 80011d4:	193b      	adds	r3, r7, r4
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	0192      	lsls	r2, r2, #6
 80011da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	193b      	adds	r3, r7, r4
 80011e4:	2201      	movs	r2, #1
 80011e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ONB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	4a21      	ldr	r2, [pc, #132]	@ (8001270 <MX_GPIO_Init+0x114>)
 80011ec:	0019      	movs	r1, r3
 80011ee:	0010      	movs	r0, r2
 80011f0:	f001 f950 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON_1_Pin;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	2202      	movs	r2, #2
 80011f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001200:	193b      	adds	r3, r7, r4
 8001202:	2202      	movs	r2, #2
 8001204:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXT_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8001206:	193a      	adds	r2, r7, r4
 8001208:	23a0      	movs	r3, #160	@ 0xa0
 800120a:	05db      	lsls	r3, r3, #23
 800120c:	0011      	movs	r1, r2
 800120e:	0018      	movs	r0, r3
 8001210:	f001 f940 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_ONB_Pin */
  GPIO_InitStruct.Pin = LED_1_ONB_Pin;
 8001214:	193b      	adds	r3, r7, r4
 8001216:	2220      	movs	r2, #32
 8001218:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2201      	movs	r2, #1
 800121e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_ONB_GPIO_Port, &GPIO_InitStruct);
 800122c:	193a      	adds	r2, r7, r4
 800122e:	23a0      	movs	r3, #160	@ 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f001 f92d 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 800123a:	0021      	movs	r1, r4
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2203      	movs	r2, #3
 8001240:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2201      	movs	r2, #1
 8001246:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	187b      	adds	r3, r7, r1
 8001256:	4a05      	ldr	r2, [pc, #20]	@ (800126c <MX_GPIO_Init+0x110>)
 8001258:	0019      	movs	r1, r3
 800125a:	0010      	movs	r0, r2
 800125c:	f001 f91a 	bl	8002494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b009      	add	sp, #36	@ 0x24
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	50000400 	.word	0x50000400
 8001270:	50000800 	.word	0x50000800

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	e7fd      	b.n	800127c <Error_Handler+0x8>

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_MspInit+0x44>)
 8001288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <HAL_MspInit+0x44>)
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_MspInit+0x44>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a4:	2180      	movs	r1, #128	@ 0x80
 80012a6:	0549      	lsls	r1, r1, #21
 80012a8:	430a      	orrs	r2, r1
 80012aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_MspInit+0x44>)
 80012ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	055b      	lsls	r3, r3, #21
 80012b4:	4013      	ands	r3, r2
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	46c0      	nop			@ (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b002      	add	sp, #8
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b08b      	sub	sp, #44	@ 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	2414      	movs	r4, #20
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	0018      	movs	r0, r3
 80012d6:	2314      	movs	r3, #20
 80012d8:	001a      	movs	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f004 fcac 	bl	8005c38 <memset>
  if(hadc->Instance==ADC1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <HAL_ADC_MspInit+0x80>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d129      	bne.n	800133e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <HAL_ADC_MspInit+0x84>)
 80012ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_ADC_MspInit+0x84>)
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0349      	lsls	r1, r1, #13
 80012f4:	430a      	orrs	r2, r1
 80012f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_ADC_MspInit+0x84>)
 80012fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	035b      	lsls	r3, r3, #13
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_ADC_MspInit+0x84>)
 8001308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_ADC_MspInit+0x84>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	@ 0x34
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_ADC_MspInit+0x84>)
 8001314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001324:	193b      	adds	r3, r7, r4
 8001326:	2203      	movs	r2, #3
 8001328:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	193b      	adds	r3, r7, r4
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	193a      	adds	r2, r7, r4
 8001332:	23a0      	movs	r3, #160	@ 0xa0
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	0011      	movs	r1, r2
 8001338:	0018      	movs	r0, r3
 800133a:	f001 f8ab 	bl	8002494 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b00b      	add	sp, #44	@ 0x2c
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	40012400 	.word	0x40012400
 800134c:	40021000 	.word	0x40021000

08001350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b097      	sub	sp, #92	@ 0x5c
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	2344      	movs	r3, #68	@ 0x44
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	0018      	movs	r0, r3
 800135e:	2314      	movs	r3, #20
 8001360:	001a      	movs	r2, r3
 8001362:	2100      	movs	r1, #0
 8001364:	f004 fc68 	bl	8005c38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	2410      	movs	r4, #16
 800136a:	193b      	adds	r3, r7, r4
 800136c:	0018      	movs	r0, r3
 800136e:	2334      	movs	r3, #52	@ 0x34
 8001370:	001a      	movs	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f004 fc60 	bl	8005c38 <memset>
  if(hi2c->Instance==I2C1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a22      	ldr	r2, [pc, #136]	@ (8001408 <HAL_I2C_MspInit+0xb8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d13d      	bne.n	80013fe <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001382:	193b      	adds	r3, r7, r4
 8001384:	2220      	movs	r2, #32
 8001386:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001388:	193b      	adds	r3, r7, r4
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138e:	193b      	adds	r3, r7, r4
 8001390:	0018      	movs	r0, r3
 8001392:	f002 fbcb 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff ff6b 	bl	8001274 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_I2C_MspInit+0xbc>)
 80013a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_I2C_MspInit+0xbc>)
 80013a4:	2102      	movs	r1, #2
 80013a6:	430a      	orrs	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_I2C_MspInit+0xbc>)
 80013ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b6:	2144      	movs	r1, #68	@ 0x44
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	22c0      	movs	r2, #192	@ 0xc0
 80013bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2212      	movs	r2, #18
 80013c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2206      	movs	r2, #6
 80013d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_I2C_MspInit+0xc0>)
 80013da:	0019      	movs	r1, r3
 80013dc:	0010      	movs	r0, r2
 80013de:	f001 f859 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_I2C_MspInit+0xbc>)
 80013e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_I2C_MspInit+0xbc>)
 80013e8:	2180      	movs	r1, #128	@ 0x80
 80013ea:	0389      	lsls	r1, r1, #14
 80013ec:	430a      	orrs	r2, r1
 80013ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_I2C_MspInit+0xbc>)
 80013f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	039b      	lsls	r3, r3, #14
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	46bd      	mov	sp, r7
 8001402:	b017      	add	sp, #92	@ 0x5c
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	40005400 	.word	0x40005400
 800140c:	40021000 	.word	0x40021000
 8001410:	50000400 	.word	0x50000400

08001414 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b091      	sub	sp, #68	@ 0x44
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	240c      	movs	r4, #12
 800141e:	193b      	adds	r3, r7, r4
 8001420:	0018      	movs	r0, r3
 8001422:	2334      	movs	r3, #52	@ 0x34
 8001424:	001a      	movs	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	f004 fc06 	bl	8005c38 <memset>
  if(htim_pwm->Instance==TIM1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a11      	ldr	r2, [pc, #68]	@ (8001478 <HAL_TIM_PWM_MspInit+0x64>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d11c      	bne.n	8001470 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2280      	movs	r2, #128	@ 0x80
 800143a:	0392      	lsls	r2, r2, #14
 800143c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800143e:	193b      	adds	r3, r7, r4
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	193b      	adds	r3, r7, r4
 8001446:	0018      	movs	r0, r3
 8001448:	f002 fb70 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001450:	f7ff ff10 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_TIM_PWM_MspInit+0x68>)
 8001456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001458:	4b08      	ldr	r3, [pc, #32]	@ (800147c <HAL_TIM_PWM_MspInit+0x68>)
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	0109      	lsls	r1, r1, #4
 800145e:	430a      	orrs	r2, r1
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_TIM_PWM_MspInit+0x68>)
 8001464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4013      	ands	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b011      	add	sp, #68	@ 0x44
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	240c      	movs	r4, #12
 800148a:	193b      	adds	r3, r7, r4
 800148c:	0018      	movs	r0, r3
 800148e:	2314      	movs	r3, #20
 8001490:	001a      	movs	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f004 fbd0 	bl	8005c38 <memset>
  if(htim->Instance==TIM1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <HAL_TIM_MspPostInit+0x74>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d123      	bne.n	80014ea <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_TIM_MspPostInit+0x78>)
 80014a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <HAL_TIM_MspPostInit+0x78>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_TIM_MspPostInit+0x78>)
 80014b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2280      	movs	r2, #128	@ 0x80
 80014be:	0052      	lsls	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	0021      	movs	r1, r4
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2202      	movs	r2, #2
 80014c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2202      	movs	r2, #2
 80014da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	187a      	adds	r2, r7, r1
 80014de:	23a0      	movs	r3, #160	@ 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 ffd5 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b009      	add	sp, #36	@ 0x24
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	40012c00 	.word	0x40012c00
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b097      	sub	sp, #92	@ 0x5c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	2344      	movs	r3, #68	@ 0x44
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	0018      	movs	r0, r3
 800150a:	2314      	movs	r3, #20
 800150c:	001a      	movs	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	f004 fb92 	bl	8005c38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	2410      	movs	r4, #16
 8001516:	193b      	adds	r3, r7, r4
 8001518:	0018      	movs	r0, r3
 800151a:	2334      	movs	r3, #52	@ 0x34
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f004 fb8a 	bl	8005c38 <memset>
  if(huart->Instance==USART2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a22      	ldr	r2, [pc, #136]	@ (80015b4 <HAL_UART_MspInit+0xb8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d13e      	bne.n	80015ac <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	2202      	movs	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001534:	193b      	adds	r3, r7, r4
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153a:	193b      	adds	r3, r7, r4
 800153c:	0018      	movs	r0, r3
 800153e:	f002 faf5 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001546:	f7ff fe95 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 800154c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 8001550:	2180      	movs	r1, #128	@ 0x80
 8001552:	0289      	lsls	r1, r1, #10
 8001554:	430a      	orrs	r2, r1
 8001556:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001558:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 800155a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 8001568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800156a:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 800156c:	2101      	movs	r1, #1
 800156e:	430a      	orrs	r2, r1
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <HAL_UART_MspInit+0xbc>)
 8001574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001576:	2201      	movs	r2, #1
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800157e:	2144      	movs	r1, #68	@ 0x44
 8001580:	187b      	adds	r3, r7, r1
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2202      	movs	r2, #2
 800158a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	187b      	adds	r3, r7, r1
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2201      	movs	r2, #1
 800159c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	187a      	adds	r2, r7, r1
 80015a0:	23a0      	movs	r3, #160	@ 0xa0
 80015a2:	05db      	lsls	r3, r3, #23
 80015a4:	0011      	movs	r1, r2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 ff74 	bl	8002494 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b017      	add	sp, #92	@ 0x5c
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	40004400 	.word	0x40004400
 80015b8:	40021000 	.word	0x40021000

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	46c0      	nop			@ (mov r8, r8)
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	46c0      	nop			@ (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f000 f8d4 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	@ (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	18d3      	adds	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f004 fb12 	bl	8005c48 <__errno>
 8001624:	0003      	movs	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	2301      	movs	r3, #1
 800162c:	425b      	negs	r3, r3
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	18d2      	adds	r2, r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <_sbrk+0x64>)
 8001640:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b006      	add	sp, #24
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20009000 	.word	0x20009000
 8001650:	00000400 	.word	0x00000400
 8001654:	200002ac 	.word	0x200002ac
 8001658:	20000400 	.word	0x20000400

0800165c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001668:	480d      	ldr	r0, [pc, #52]	@ (80016a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800166a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800166c:	f7ff fff6 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001672:	490d      	ldr	r1, [pc, #52]	@ (80016a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001674:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <LoopForever+0xe>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001688:	4c0a      	ldr	r4, [pc, #40]	@ (80016b4 <LoopForever+0x16>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001696:	f004 fadd 	bl	8005c54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800169a:	f7ff fadb 	bl	8000c54 <main>

0800169e <LoopForever>:

LoopForever:
  b LoopForever
 800169e:	e7fe      	b.n	800169e <LoopForever>
  ldr   r0, =_estack
 80016a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016ac:	080066c8 	.word	0x080066c8
  ldr r2, =_sbss
 80016b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016b4:	200003fc 	.word	0x200003fc

080016b8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_COMP_IRQHandler>
	...

080016bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_Init+0x3c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_Init+0x3c>)
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	0049      	lsls	r1, r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d6:	2003      	movs	r0, #3
 80016d8:	f000 f810 	bl	80016fc <HAL_InitTick>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d003      	beq.n	80016e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e001      	b.n	80016ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fdca 	bl	8001280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40022000 	.word	0x40022000

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	230f      	movs	r3, #15
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_InitTick+0x88>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d02b      	beq.n	800176c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <HAL_InitTick+0x8c>)
 8001716:	681c      	ldr	r4, [r3, #0]
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <HAL_InitTick+0x88>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	0019      	movs	r1, r3
 800171e:	23fa      	movs	r3, #250	@ 0xfa
 8001720:	0098      	lsls	r0, r3, #2
 8001722:	f7fe fd01 	bl	8000128 <__udivsi3>
 8001726:	0003      	movs	r3, r0
 8001728:	0019      	movs	r1, r3
 800172a:	0020      	movs	r0, r4
 800172c:	f7fe fcfc 	bl	8000128 <__udivsi3>
 8001730:	0003      	movs	r3, r0
 8001732:	0018      	movs	r0, r3
 8001734:	f000 fea1 	bl	800247a <HAL_SYSTICK_Config>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d112      	bne.n	8001762 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d80a      	bhi.n	8001758 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	2301      	movs	r3, #1
 8001746:	425b      	negs	r3, r3
 8001748:	2200      	movs	r2, #0
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fe80 	bl	8002450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_InitTick+0x90>)
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e00d      	b.n	8001774 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001758:	230f      	movs	r3, #15
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e008      	b.n	8001774 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001762:	230f      	movs	r3, #15
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e003      	b.n	8001774 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	230f      	movs	r3, #15
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001774:	230f      	movs	r3, #15
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b005      	add	sp, #20
 8001780:	bd90      	pop	{r4, r7, pc}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	20000018 	.word	0x20000018
 8001788:	20000010 	.word	0x20000010
 800178c:	20000014 	.word	0x20000014

08001790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_IncTick+0x1c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	001a      	movs	r2, r3
 800179a:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <HAL_IncTick+0x20>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	18d2      	adds	r2, r2, r3
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_IncTick+0x20>)
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	20000018 	.word	0x20000018
 80017b0:	200002b0 	.word	0x200002b0

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b02      	ldr	r3, [pc, #8]	@ (80017c4 <HAL_GetTick+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	200002b0 	.word	0x200002b0

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fff0 	bl	80017b4 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3301      	adds	r3, #1
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	001a      	movs	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	189b      	adds	r3, r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	f7ff ffe0 	bl	80017b4 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	46c0      	nop			@ (mov r8, r8)
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b004      	add	sp, #16
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	20000018 	.word	0x20000018

08001810 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001820:	401a      	ands	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	fe3fffff 	.word	0xfe3fffff

08001838 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	23e0      	movs	r3, #224	@ 0xe0
 8001846:	045b      	lsls	r3, r3, #17
 8001848:	4013      	ands	r3, r2
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}

08001852 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	2104      	movs	r1, #4
 8001866:	400a      	ands	r2, r1
 8001868:	2107      	movs	r1, #7
 800186a:	4091      	lsls	r1, r2
 800186c:	000a      	movs	r2, r1
 800186e:	43d2      	mvns	r2, r2
 8001870:	401a      	ands	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2104      	movs	r1, #4
 8001876:	400b      	ands	r3, r1
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4099      	lsls	r1, r3
 800187c:	000b      	movs	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001884:	46c0      	nop			@ (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}

0800188c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	2104      	movs	r1, #4
 800189e:	400a      	ands	r2, r1
 80018a0:	2107      	movs	r1, #7
 80018a2:	4091      	lsls	r1, r2
 80018a4:	000a      	movs	r2, r1
 80018a6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2104      	movs	r1, #4
 80018ac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80018ae:	40da      	lsrs	r2, r3
 80018b0:	0013      	movs	r3, r2
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}

080018ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	211f      	movs	r1, #31
 80018ce:	400a      	ands	r2, r1
 80018d0:	210f      	movs	r1, #15
 80018d2:	4091      	lsls	r1, r2
 80018d4:	000a      	movs	r2, r1
 80018d6:	43d2      	mvns	r2, r2
 80018d8:	401a      	ands	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	0e9b      	lsrs	r3, r3, #26
 80018de:	210f      	movs	r1, #15
 80018e0:	4019      	ands	r1, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	201f      	movs	r0, #31
 80018e6:	4003      	ands	r3, r0
 80018e8:	4099      	lsls	r1, r3
 80018ea:	000b      	movs	r3, r1
 80018ec:	431a      	orrs	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}

080018fa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	035b      	lsls	r3, r3, #13
 800190c:	0b5b      	lsrs	r3, r3, #13
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001914:	46c0      	nop			@ (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}

0800191c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	0352      	lsls	r2, r2, #13
 800192e:	0b52      	lsrs	r2, r2, #13
 8001930:	43d2      	mvns	r2, r2
 8001932:	401a      	ands	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001938:	46c0      	nop			@ (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	0212      	lsls	r2, r2, #8
 8001954:	43d2      	mvns	r2, r2
 8001956:	401a      	ands	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	400b      	ands	r3, r1
 8001960:	4904      	ldr	r1, [pc, #16]	@ (8001974 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001962:	400b      	ands	r3, r1
 8001964:	431a      	orrs	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	07ffff00 	.word	0x07ffff00

08001978 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a05      	ldr	r2, [pc, #20]	@ (800199c <LL_ADC_EnableInternalRegulator+0x24>)
 8001986:	4013      	ands	r3, r2
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	0552      	lsls	r2, r2, #21
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	6fffffe8 	.word	0x6fffffe8

080019a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	055b      	lsls	r3, r3, #21
 80019b0:	401a      	ands	r2, r3
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	055b      	lsls	r3, r3, #21
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d101      	bne.n	80019be <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <LL_ADC_Enable+0x20>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	2201      	movs	r2, #1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019e0:	46c0      	nop			@ (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	7fffffe8 	.word	0x7fffffe8

080019ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <LL_ADC_IsEnabled+0x18>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <LL_ADC_IsEnabled+0x1a>
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <LL_ADC_REG_StartConversion+0x20>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2204      	movs	r2, #4
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	7fffffe8 	.word	0x7fffffe8

08001a34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2204      	movs	r2, #4
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	231f      	movs	r3, #31
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e17f      	b.n	8001d7e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fc1d 	bl	80012c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2254      	movs	r2, #84	@ 0x54
 8001a98:	2100      	movs	r1, #0
 8001a9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff ff7d 	bl	80019a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001aa6:	1e03      	subs	r3, r0, #0
 8001aa8:	d115      	bne.n	8001ad6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff ff62 	bl	8001978 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ab4:	4bb4      	ldr	r3, [pc, #720]	@ (8001d88 <HAL_ADC_Init+0x330>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	49b4      	ldr	r1, [pc, #720]	@ (8001d8c <HAL_ADC_Init+0x334>)
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7fe fb34 	bl	8000128 <__udivsi3>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f7ff ff60 	bl	80019a0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ae0:	1e03      	subs	r3, r0, #0
 8001ae2:	d10f      	bne.n	8001b04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	2210      	movs	r2, #16
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	2201      	movs	r2, #1
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001afc:	231f      	movs	r3, #31
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ff93 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	2210      	movs	r2, #16
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d000      	beq.n	8001b1e <HAL_ADC_Init+0xc6>
 8001b1c:	e122      	b.n	8001d64 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d000      	beq.n	8001b26 <HAL_ADC_Init+0xce>
 8001b24:	e11e      	b.n	8001d64 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	4a99      	ldr	r2, [pc, #612]	@ (8001d90 <HAL_ADC_Init+0x338>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2202      	movs	r2, #2
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7ff ff56 	bl	80019ec <LL_ADC_IsEnabled>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d000      	beq.n	8001b46 <HAL_ADC_Init+0xee>
 8001b44:	e0ad      	b.n	8001ca2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7e1b      	ldrb	r3, [r3, #24]
 8001b4e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b50:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7e5b      	ldrb	r3, [r3, #25]
 8001b56:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b58:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7e9b      	ldrb	r3, [r3, #26]
 8001b5e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b60:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_ADC_Init+0x118>
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	015b      	lsls	r3, r3, #5
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_Init+0x11a>
 8001b70:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b72:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b78:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da04      	bge.n	8001b8c <HAL_ADC_Init+0x134>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	e001      	b.n	8001b90 <HAL_ADC_Init+0x138>
 8001b8c:	2380      	movs	r3, #128	@ 0x80
 8001b8e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001b90:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	212c      	movs	r1, #44	@ 0x2c
 8001b96:	5c5b      	ldrb	r3, [r3, r1]
 8001b98:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b9a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d115      	bne.n	8001bd8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e9b      	ldrb	r3, [r3, #26]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	0252      	lsls	r2, r2, #9
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be4:	23e0      	movs	r3, #224	@ 0xe0
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a65      	ldr	r2, [pc, #404]	@ (8001d94 <HAL_ADC_Init+0x33c>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0f9b      	lsrs	r3, r3, #30
 8001c12:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	223c      	movs	r2, #60	@ 0x3c
 8001c24:	5c9b      	ldrb	r3, [r3, r2]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d111      	bne.n	8001c4e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0f9b      	lsrs	r3, r3, #30
 8001c30:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c36:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001c3c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001c42:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	4a50      	ldr	r2, [pc, #320]	@ (8001d98 <HAL_ADC_Init+0x340>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	23c0      	movs	r3, #192	@ 0xc0
 8001c6a:	061b      	lsls	r3, r3, #24
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d018      	beq.n	8001ca2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d012      	beq.n	8001ca2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d00c      	beq.n	8001ca2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c88:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <HAL_ADC_Init+0x344>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a44      	ldr	r2, [pc, #272]	@ (8001da0 <HAL_ADC_Init+0x348>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	23f0      	movs	r3, #240	@ 0xf0
 8001c98:	039b      	lsls	r3, r3, #14
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d9c <HAL_ADC_Init+0x344>)
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001caa:	001a      	movs	r2, r3
 8001cac:	2100      	movs	r1, #0
 8001cae:	f7ff fdd0 	bl	8001852 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cba:	493a      	ldr	r1, [pc, #232]	@ (8001da4 <HAL_ADC_Init+0x34c>)
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	f7ff fdc8 	bl	8001852 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	4249      	negs	r1, r1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cdc:	e018      	b.n	8001d10 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	2380      	movs	r3, #128	@ 0x80
 8001ce4:	039b      	lsls	r3, r3, #14
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d112      	bne.n	8001d10 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	221c      	movs	r2, #28
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	4252      	negs	r2, r2
 8001d00:	409a      	lsls	r2, r3
 8001d02:	0011      	movs	r1, r2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2100      	movs	r1, #0
 8001d16:	0018      	movs	r0, r3
 8001d18:	f7ff fdb8 	bl	800188c <LL_ADC_GetSamplingTimeCommonChannels>
 8001d1c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10b      	bne.n	8001d3e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	2203      	movs	r2, #3
 8001d32:	4393      	bics	r3, r2
 8001d34:	2201      	movs	r2, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d3c:	e01c      	b.n	8001d78 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	2212      	movs	r2, #18
 8001d44:	4393      	bics	r3, r2
 8001d46:	2210      	movs	r2, #16
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	2201      	movs	r2, #1
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001d5a:	231f      	movs	r3, #31
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d62:	e009      	b.n	8001d78 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	2210      	movs	r2, #16
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d70:	231f      	movs	r3, #31
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d78:	231f      	movs	r3, #31
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b008      	add	sp, #32
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	00030d40 	.word	0x00030d40
 8001d90:	fffffefd 	.word	0xfffffefd
 8001d94:	ffde0201 	.word	0xffde0201
 8001d98:	1ffffc02 	.word	0x1ffffc02
 8001d9c:	40012708 	.word	0x40012708
 8001da0:	ffc3ffff 	.word	0xffc3ffff
 8001da4:	07ffff04 	.word	0x07ffff04

08001da8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fe3d 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 8001dba:	1e03      	subs	r3, r0, #0
 8001dbc:	d135      	bne.n	8001e2a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2254      	movs	r2, #84	@ 0x54
 8001dc2:	5c9b      	ldrb	r3, [r3, r2]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_Start+0x24>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e035      	b.n	8001e38 <HAL_ADC_Start+0x90>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2254      	movs	r2, #84	@ 0x54
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dd4:	250f      	movs	r5, #15
 8001dd6:	197c      	adds	r4, r7, r5
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fa20 	bl	8002220 <ADC_Enable>
 8001de0:	0003      	movs	r3, r0
 8001de2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001de4:	197b      	adds	r3, r7, r5
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d119      	bne.n	8001e20 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <HAL_ADC_Start+0x98>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	0052      	lsls	r2, r2, #1
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	221c      	movs	r2, #28
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2254      	movs	r2, #84	@ 0x54
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff fdf9 	bl	8001a10 <LL_ADC_REG_StartConversion>
 8001e1e:	e008      	b.n	8001e32 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2254      	movs	r2, #84	@ 0x54
 8001e24:	2100      	movs	r1, #0
 8001e26:	5499      	strb	r1, [r3, r2]
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e2a:	230f      	movs	r3, #15
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	781b      	ldrb	r3, [r3, #0]
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b004      	add	sp, #16
 8001e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e40:	fffff0fe 	.word	0xfffff0fe

08001e44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e66:	2317      	movs	r3, #23
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2254      	movs	r2, #84	@ 0x54
 8001e76:	5c9b      	ldrb	r3, [r3, r2]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x24>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e1c0      	b.n	8002202 <HAL_ADC_ConfigChannel+0x3a6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2254      	movs	r2, #84	@ 0x54
 8001e84:	2101      	movs	r1, #1
 8001e86:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff fdd1 	bl	8001a34 <LL_ADC_REG_IsConversionOngoing>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d000      	beq.n	8001e98 <HAL_ADC_ConfigChannel+0x3c>
 8001e96:	e1a3      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d100      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x46>
 8001ea0:	e143      	b.n	800212a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	2380      	movs	r3, #128	@ 0x80
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d004      	beq.n	8001eb8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eb2:	4ac1      	ldr	r2, [pc, #772]	@ (80021b8 <HAL_ADC_ConfigChannel+0x35c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d108      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	0010      	movs	r0, r2
 8001ec4:	f7ff fd19 	bl	80018fa <LL_ADC_REG_SetSequencerChAdd>
 8001ec8:	e0c9      	b.n	800205e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	211f      	movs	r1, #31
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	4099      	lsls	r1, r3
 8001eda:	000b      	movs	r3, r1
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4013      	ands	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	035b      	lsls	r3, r3, #13
 8001ee8:	0b5b      	lsrs	r3, r3, #13
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x9c>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	221f      	movs	r2, #31
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	e098      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4013      	ands	r3, r2
 8001f00:	d000      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0xa8>
 8001f02:	e091      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1cc>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d000      	beq.n	8001f10 <HAL_ADC_ConfigChannel+0xb4>
 8001f0e:	e089      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1c8>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	d000      	beq.n	8001f1c <HAL_ADC_ConfigChannel+0xc0>
 8001f1a:	e081      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1c4>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2208      	movs	r2, #8
 8001f22:	4013      	ands	r3, r2
 8001f24:	d000      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0xcc>
 8001f26:	e079      	b.n	800201c <HAL_ADC_ConfigChannel+0x1c0>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d000      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0xd8>
 8001f32:	e071      	b.n	8002018 <HAL_ADC_ConfigChannel+0x1bc>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d000      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0xe4>
 8001f3e:	e069      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1b8>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2240      	movs	r2, #64	@ 0x40
 8001f46:	4013      	ands	r3, r2
 8001f48:	d000      	beq.n	8001f4c <HAL_ADC_ConfigChannel+0xf0>
 8001f4a:	e061      	b.n	8002010 <HAL_ADC_ConfigChannel+0x1b4>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2280      	movs	r2, #128	@ 0x80
 8001f52:	4013      	ands	r3, r2
 8001f54:	d000      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0xfc>
 8001f56:	e059      	b.n	800200c <HAL_ADC_ConfigChannel+0x1b0>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d151      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1ac>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	@ 0x80
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d149      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1a8>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d141      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1a4>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	4013      	ands	r3, r2
 8001f86:	d139      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1a0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	4013      	ands	r3, r2
 8001f92:	d131      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x19c>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	019b      	lsls	r3, r3, #6
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d129      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x198>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d121      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x194>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d119      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x190>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d111      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x18c>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d109      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x188>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	02db      	lsls	r3, r3, #11
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d001      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0x184>
 8001fdc:	2312      	movs	r3, #18
 8001fde:	e024      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e022      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001fe4:	2311      	movs	r3, #17
 8001fe6:	e020      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001fe8:	2310      	movs	r3, #16
 8001fea:	e01e      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001fec:	230f      	movs	r3, #15
 8001fee:	e01c      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001ff0:	230e      	movs	r3, #14
 8001ff2:	e01a      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001ff4:	230d      	movs	r3, #13
 8001ff6:	e018      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	e016      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8001ffc:	230b      	movs	r3, #11
 8001ffe:	e014      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002000:	230a      	movs	r3, #10
 8002002:	e012      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002004:	2309      	movs	r3, #9
 8002006:	e010      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002008:	2308      	movs	r3, #8
 800200a:	e00e      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 800200c:	2307      	movs	r3, #7
 800200e:	e00c      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002010:	2306      	movs	r3, #6
 8002012:	e00a      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002014:	2305      	movs	r3, #5
 8002016:	e008      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002018:	2304      	movs	r3, #4
 800201a:	e006      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 800201c:	2303      	movs	r3, #3
 800201e:	e004      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002020:	2302      	movs	r3, #2
 8002022:	e002      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_ADC_ConfigChannel+0x1ce>
 8002028:	2300      	movs	r3, #0
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	6852      	ldr	r2, [r2, #4]
 800202e:	201f      	movs	r0, #31
 8002030:	4002      	ands	r2, r0
 8002032:	4093      	lsls	r3, r2
 8002034:	000a      	movs	r2, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	d808      	bhi.n	800205e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	001a      	movs	r2, r3
 800205a:	f7ff fc2e 	bl	80018ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	001a      	movs	r2, r3
 800206c:	f7ff fc68 	bl	8001940 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	db00      	blt.n	800207a <HAL_ADC_ConfigChannel+0x21e>
 8002078:	e0bc      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800207a:	4b50      	ldr	r3, [pc, #320]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff fbdb 	bl	8001838 <LL_ADC_GetCommonPathInternalCh>
 8002082:	0003      	movs	r3, r0
 8002084:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a4d      	ldr	r2, [pc, #308]	@ (80021c0 <HAL_ADC_ConfigChannel+0x364>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d122      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	2380      	movs	r3, #128	@ 0x80
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002098:	d11d      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	0412      	lsls	r2, r2, #16
 80020a0:	4313      	orrs	r3, r2
 80020a2:	4a46      	ldr	r2, [pc, #280]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 80020a4:	0019      	movs	r1, r3
 80020a6:	0010      	movs	r0, r2
 80020a8:	f7ff fbb2 	bl	8001810 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020ac:	4b45      	ldr	r3, [pc, #276]	@ (80021c4 <HAL_ADC_ConfigChannel+0x368>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4945      	ldr	r1, [pc, #276]	@ (80021c8 <HAL_ADC_ConfigChannel+0x36c>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7fe f838 	bl	8000128 <__udivsi3>
 80020b8:	0003      	movs	r3, r0
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	0013      	movs	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	189b      	adds	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020c6:	e002      	b.n	80020ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020d4:	e08e      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3c      	ldr	r2, [pc, #240]	@ (80021cc <HAL_ADC_ConfigChannel+0x370>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10e      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	045b      	lsls	r3, r3, #17
 80020e6:	4013      	ands	r3, r2
 80020e8:	d109      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	0452      	lsls	r2, r2, #17
 80020f0:	4313      	orrs	r3, r2
 80020f2:	4a32      	ldr	r2, [pc, #200]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 80020f4:	0019      	movs	r1, r3
 80020f6:	0010      	movs	r0, r2
 80020f8:	f7ff fb8a 	bl	8001810 <LL_ADC_SetCommonPathInternalCh>
 80020fc:	e07a      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a33      	ldr	r2, [pc, #204]	@ (80021d0 <HAL_ADC_ConfigChannel+0x374>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d000      	beq.n	800210a <HAL_ADC_ConfigChannel+0x2ae>
 8002108:	e074      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	03db      	lsls	r3, r3, #15
 8002110:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002112:	d000      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x2ba>
 8002114:	e06e      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2280      	movs	r2, #128	@ 0x80
 800211a:	03d2      	lsls	r2, r2, #15
 800211c:	4313      	orrs	r3, r2
 800211e:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 8002120:	0019      	movs	r1, r3
 8002122:	0010      	movs	r0, r2
 8002124:	f7ff fb74 	bl	8001810 <LL_ADC_SetCommonPathInternalCh>
 8002128:	e064      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	429a      	cmp	r2, r3
 8002134:	d004      	beq.n	8002140 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800213a:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_ADC_ConfigChannel+0x35c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d107      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0019      	movs	r1, r3
 800214a:	0010      	movs	r0, r2
 800214c:	f7ff fbe6 	bl	800191c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da4d      	bge.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff fb6c 	bl	8001838 <LL_ADC_GetCommonPathInternalCh>
 8002160:	0003      	movs	r3, r0
 8002162:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a15      	ldr	r2, [pc, #84]	@ (80021c0 <HAL_ADC_ConfigChannel+0x364>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4a18      	ldr	r2, [pc, #96]	@ (80021d4 <HAL_ADC_ConfigChannel+0x378>)
 8002172:	4013      	ands	r3, r2
 8002174:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 8002176:	0019      	movs	r1, r3
 8002178:	0010      	movs	r0, r2
 800217a:	f7ff fb49 	bl	8001810 <LL_ADC_SetCommonPathInternalCh>
 800217e:	e039      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a11      	ldr	r2, [pc, #68]	@ (80021cc <HAL_ADC_ConfigChannel+0x370>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d108      	bne.n	800219c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <HAL_ADC_ConfigChannel+0x37c>)
 800218e:	4013      	ands	r3, r2
 8002190:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 8002192:	0019      	movs	r1, r3
 8002194:	0010      	movs	r0, r2
 8002196:	f7ff fb3b 	bl	8001810 <LL_ADC_SetCommonPathInternalCh>
 800219a:	e02b      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <HAL_ADC_ConfigChannel+0x374>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d126      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4a0c      	ldr	r2, [pc, #48]	@ (80021dc <HAL_ADC_ConfigChannel+0x380>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	4a03      	ldr	r2, [pc, #12]	@ (80021bc <HAL_ADC_ConfigChannel+0x360>)
 80021ae:	0019      	movs	r1, r3
 80021b0:	0010      	movs	r0, r2
 80021b2:	f7ff fb2d 	bl	8001810 <LL_ADC_SetCommonPathInternalCh>
 80021b6:	e01d      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x398>
 80021b8:	80000004 	.word	0x80000004
 80021bc:	40012708 	.word	0x40012708
 80021c0:	b0001000 	.word	0xb0001000
 80021c4:	20000010 	.word	0x20000010
 80021c8:	00030d40 	.word	0x00030d40
 80021cc:	b8004000 	.word	0xb8004000
 80021d0:	b4002000 	.word	0xb4002000
 80021d4:	ff7fffff 	.word	0xff7fffff
 80021d8:	feffffff 	.word	0xfeffffff
 80021dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	2220      	movs	r2, #32
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021ec:	2317      	movs	r3, #23
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2254      	movs	r2, #84	@ 0x54
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80021fc:	2317      	movs	r3, #23
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b006      	add	sp, #24
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)

0800220c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(const ADC_HandleTypeDef *hadc)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f7ff fbdb 	bl	80019ec <LL_ADC_IsEnabled>
 8002236:	1e03      	subs	r3, r0, #0
 8002238:	d000      	beq.n	800223c <ADC_Enable+0x1c>
 800223a:	e069      	b.n	8002310 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4a36      	ldr	r2, [pc, #216]	@ (800231c <ADC_Enable+0xfc>)
 8002244:	4013      	ands	r3, r2
 8002246:	d00d      	beq.n	8002264 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	2210      	movs	r2, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	2201      	movs	r2, #1
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e056      	b.n	8002312 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff fbad 	bl	80019c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800226e:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <ADC_Enable+0x100>)
 8002270:	0018      	movs	r0, r3
 8002272:	f7ff fae1 	bl	8001838 <LL_ADC_GetCommonPathInternalCh>
 8002276:	0002      	movs	r2, r0
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	4013      	ands	r3, r2
 800227e:	d00f      	beq.n	80022a0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002280:	4b28      	ldr	r3, [pc, #160]	@ (8002324 <ADC_Enable+0x104>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4928      	ldr	r1, [pc, #160]	@ (8002328 <ADC_Enable+0x108>)
 8002286:	0018      	movs	r0, r3
 8002288:	f7fd ff4e 	bl	8000128 <__udivsi3>
 800228c:	0003      	movs	r3, r0
 800228e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002290:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002292:	e002      	b.n	800229a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3b01      	subs	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f9      	bne.n	8002294 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e5b      	ldrb	r3, [r3, #25]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d033      	beq.n	8002310 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80022a8:	f7ff fa84 	bl	80017b4 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022b0:	e027      	b.n	8002302 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f7ff fb98 	bl	80019ec <LL_ADC_IsEnabled>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d104      	bne.n	80022ca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff fb7f 	bl	80019c8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ca:	f7ff fa73 	bl	80017b4 <HAL_GetTick>
 80022ce:	0002      	movs	r2, r0
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d914      	bls.n	8002302 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2201      	movs	r2, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d00d      	beq.n	8002302 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	2210      	movs	r2, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	2201      	movs	r2, #1
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e007      	b.n	8002312 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	2b01      	cmp	r3, #1
 800230e:	d1d0      	bne.n	80022b2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	80000017 	.word	0x80000017
 8002320:	40012708 	.word	0x40012708
 8002324:	20000010 	.word	0x20000010
 8002328:	00030d40 	.word	0x00030d40

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	0002      	movs	r2, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002340:	d828      	bhi.n	8002394 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002342:	4a2f      	ldr	r2, [pc, #188]	@ (8002400 <__NVIC_SetPriority+0xd4>)
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	33c0      	adds	r3, #192	@ 0xc0
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	589b      	ldr	r3, [r3, r2]
 8002352:	1dfa      	adds	r2, r7, #7
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	0011      	movs	r1, r2
 8002358:	2203      	movs	r2, #3
 800235a:	400a      	ands	r2, r1
 800235c:	00d2      	lsls	r2, r2, #3
 800235e:	21ff      	movs	r1, #255	@ 0xff
 8002360:	4091      	lsls	r1, r2
 8002362:	000a      	movs	r2, r1
 8002364:	43d2      	mvns	r2, r2
 8002366:	401a      	ands	r2, r3
 8002368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	22ff      	movs	r2, #255	@ 0xff
 8002370:	401a      	ands	r2, r3
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	0018      	movs	r0, r3
 8002378:	2303      	movs	r3, #3
 800237a:	4003      	ands	r3, r0
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002380:	481f      	ldr	r0, [pc, #124]	@ (8002400 <__NVIC_SetPriority+0xd4>)
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b25b      	sxtb	r3, r3
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	430a      	orrs	r2, r1
 800238c:	33c0      	adds	r3, #192	@ 0xc0
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002392:	e031      	b.n	80023f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002394:	4a1b      	ldr	r2, [pc, #108]	@ (8002404 <__NVIC_SetPriority+0xd8>)
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	0019      	movs	r1, r3
 800239c:	230f      	movs	r3, #15
 800239e:	400b      	ands	r3, r1
 80023a0:	3b08      	subs	r3, #8
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3306      	adds	r3, #6
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	18d3      	adds	r3, r2, r3
 80023aa:	3304      	adds	r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	1dfa      	adds	r2, r7, #7
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	0011      	movs	r1, r2
 80023b4:	2203      	movs	r2, #3
 80023b6:	400a      	ands	r2, r1
 80023b8:	00d2      	lsls	r2, r2, #3
 80023ba:	21ff      	movs	r1, #255	@ 0xff
 80023bc:	4091      	lsls	r1, r2
 80023be:	000a      	movs	r2, r1
 80023c0:	43d2      	mvns	r2, r2
 80023c2:	401a      	ands	r2, r3
 80023c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	22ff      	movs	r2, #255	@ 0xff
 80023cc:	401a      	ands	r2, r3
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	0018      	movs	r0, r3
 80023d4:	2303      	movs	r3, #3
 80023d6:	4003      	ands	r3, r0
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023dc:	4809      	ldr	r0, [pc, #36]	@ (8002404 <__NVIC_SetPriority+0xd8>)
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	001c      	movs	r4, r3
 80023e4:	230f      	movs	r3, #15
 80023e6:	4023      	ands	r3, r4
 80023e8:	3b08      	subs	r3, #8
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	430a      	orrs	r2, r1
 80023ee:	3306      	adds	r3, #6
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	18c3      	adds	r3, r0, r3
 80023f4:	3304      	adds	r3, #4
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b003      	add	sp, #12
 80023fe:	bd90      	pop	{r4, r7, pc}
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	1e5a      	subs	r2, r3, #1
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	045b      	lsls	r3, r3, #17
 8002418:	429a      	cmp	r2, r3
 800241a:	d301      	bcc.n	8002420 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241c:	2301      	movs	r3, #1
 800241e:	e010      	b.n	8002442 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <SysTick_Config+0x44>)
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	3a01      	subs	r2, #1
 8002426:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002428:	2301      	movs	r3, #1
 800242a:	425b      	negs	r3, r3
 800242c:	2103      	movs	r1, #3
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff ff7c 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <SysTick_Config+0x44>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <SysTick_Config+0x44>)
 800243c:	2207      	movs	r2, #7
 800243e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002440:	2300      	movs	r3, #0
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b002      	add	sp, #8
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	e000e010 	.word	0xe000e010

08002450 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	210f      	movs	r1, #15
 800245c:	187b      	adds	r3, r7, r1
 800245e:	1c02      	adds	r2, r0, #0
 8002460:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	187b      	adds	r3, r7, r1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b25b      	sxtb	r3, r3
 800246a:	0011      	movs	r1, r2
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff ffbf 	bl	8002408 <SysTick_Config>
 800248a:	0003      	movs	r3, r0
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a2:	e147      	b.n	8002734 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4091      	lsls	r1, r2
 80024ae:	000a      	movs	r2, r1
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d100      	bne.n	80024bc <HAL_GPIO_Init+0x28>
 80024ba:	e138      	b.n	800272e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d005      	beq.n	80024d4 <HAL_GPIO_Init+0x40>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2203      	movs	r2, #3
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d130      	bne.n	8002536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	409a      	lsls	r2, r3
 80024e2:	0013      	movs	r3, r2
 80024e4:	43da      	mvns	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	409a      	lsls	r2, r3
 80024f6:	0013      	movs	r3, r2
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250a:	2201      	movs	r2, #1
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
 8002510:	0013      	movs	r3, r2
 8002512:	43da      	mvns	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	2201      	movs	r2, #1
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
 8002528:	0013      	movs	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	4013      	ands	r3, r2
 800253e:	2b03      	cmp	r3, #3
 8002540:	d017      	beq.n	8002572 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	409a      	lsls	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	43da      	mvns	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	4013      	ands	r3, r2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d123      	bne.n	80025c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	58d3      	ldr	r3, [r2, r3]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2207      	movs	r2, #7
 8002590:	4013      	ands	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2107      	movs	r1, #7
 80025aa:	400b      	ands	r3, r1
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	08da      	lsrs	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3208      	adds	r2, #8
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	6939      	ldr	r1, [r7, #16]
 80025c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	43da      	mvns	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2203      	movs	r2, #3
 80025e4:	401a      	ands	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	409a      	lsls	r2, r3
 80025ec:	0013      	movs	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	23c0      	movs	r3, #192	@ 0xc0
 8002600:	029b      	lsls	r3, r3, #10
 8002602:	4013      	ands	r3, r2
 8002604:	d100      	bne.n	8002608 <HAL_GPIO_Init+0x174>
 8002606:	e092      	b.n	800272e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002608:	4a50      	ldr	r2, [pc, #320]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3318      	adds	r3, #24
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	589b      	ldr	r3, [r3, r2]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2203      	movs	r2, #3
 800261a:	4013      	ands	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	220f      	movs	r2, #15
 8002620:	409a      	lsls	r2, r3
 8002622:	0013      	movs	r3, r2
 8002624:	43da      	mvns	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	23a0      	movs	r3, #160	@ 0xa0
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	429a      	cmp	r2, r3
 8002634:	d013      	beq.n	800265e <HAL_GPIO_Init+0x1ca>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a45      	ldr	r2, [pc, #276]	@ (8002750 <HAL_GPIO_Init+0x2bc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00d      	beq.n	800265a <HAL_GPIO_Init+0x1c6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a44      	ldr	r2, [pc, #272]	@ (8002754 <HAL_GPIO_Init+0x2c0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <HAL_GPIO_Init+0x1c2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a43      	ldr	r2, [pc, #268]	@ (8002758 <HAL_GPIO_Init+0x2c4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_GPIO_Init+0x1be>
 800264e:	2303      	movs	r3, #3
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x1cc>
 8002652:	2305      	movs	r3, #5
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x1cc>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x1cc>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x1cc>
 800265e:	2300      	movs	r3, #0
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	2103      	movs	r1, #3
 8002664:	400a      	ands	r2, r1
 8002666:	00d2      	lsls	r2, r2, #3
 8002668:	4093      	lsls	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002670:	4936      	ldr	r1, [pc, #216]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3318      	adds	r3, #24
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800267e:	4b33      	ldr	r3, [pc, #204]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43da      	mvns	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	035b      	lsls	r3, r3, #13
 8002696:	4013      	ands	r3, r2
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026a2:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43da      	mvns	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	039b      	lsls	r3, r3, #14
 80026c0:	4013      	ands	r3, r2
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026cc:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026d2:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 80026d4:	2384      	movs	r3, #132	@ 0x84
 80026d6:	58d3      	ldr	r3, [r2, r3]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43da      	mvns	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	029b      	lsls	r3, r3, #10
 80026ec:	4013      	ands	r3, r2
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f8:	4914      	ldr	r1, [pc, #80]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 80026fa:	2284      	movs	r2, #132	@ 0x84
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002700:	4a12      	ldr	r2, [pc, #72]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	58d3      	ldr	r3, [r2, r3]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	43da      	mvns	r2, r3
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	025b      	lsls	r3, r3, #9
 800271a:	4013      	ands	r3, r2
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002726:	4909      	ldr	r1, [pc, #36]	@ (800274c <HAL_GPIO_Init+0x2b8>)
 8002728:	2280      	movs	r2, #128	@ 0x80
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	40da      	lsrs	r2, r3
 800273c:	1e13      	subs	r3, r2, #0
 800273e:	d000      	beq.n	8002742 <HAL_GPIO_Init+0x2ae>
 8002740:	e6b0      	b.n	80024a4 <HAL_GPIO_Init+0x10>
  }
}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b006      	add	sp, #24
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021800 	.word	0x40021800
 8002750:	50000400 	.word	0x50000400
 8002754:	50000800 	.word	0x50000800
 8002758:	50000c00 	.word	0x50000c00

0800275c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	000a      	movs	r2, r1
 8002766:	1cbb      	adds	r3, r7, #2
 8002768:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	1cba      	adds	r2, r7, #2
 8002770:	8812      	ldrh	r2, [r2, #0]
 8002772:	4013      	ands	r3, r2
 8002774:	d004      	beq.n	8002780 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002776:	230f      	movs	r3, #15
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e003      	b.n	8002788 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002780:	230f      	movs	r3, #15
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002788:	230f      	movs	r3, #15
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	781b      	ldrb	r3, [r3, #0]
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b004      	add	sp, #16
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	0008      	movs	r0, r1
 80027a0:	0011      	movs	r1, r2
 80027a2:	1cbb      	adds	r3, r7, #2
 80027a4:	1c02      	adds	r2, r0, #0
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	1c7b      	adds	r3, r7, #1
 80027aa:	1c0a      	adds	r2, r1, #0
 80027ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ae:	1c7b      	adds	r3, r7, #1
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b6:	1cbb      	adds	r3, r7, #2
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027be:	e003      	b.n	80027c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c0:	1cbb      	adds	r3, r7, #2
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b002      	add	sp, #8
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e08f      	b.n	8002902 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2241      	movs	r2, #65	@ 0x41
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2240      	movs	r2, #64	@ 0x40
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fe fda9 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2241      	movs	r2, #65	@ 0x41
 8002802:	2124      	movs	r1, #36	@ 0x24
 8002804:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	438a      	bics	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	493b      	ldr	r1, [pc, #236]	@ (800290c <HAL_I2C_Init+0x13c>)
 8002820:	400a      	ands	r2, r1
 8002822:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4938      	ldr	r1, [pc, #224]	@ (8002910 <HAL_I2C_Init+0x140>)
 8002830:	400a      	ands	r2, r1
 8002832:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	0209      	lsls	r1, r1, #8
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e007      	b.n	800285e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2184      	movs	r1, #132	@ 0x84
 8002858:	0209      	lsls	r1, r1, #8
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d109      	bne.n	800287a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2180      	movs	r1, #128	@ 0x80
 8002872:	0109      	lsls	r1, r1, #4
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	e007      	b.n	800288a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4923      	ldr	r1, [pc, #140]	@ (8002914 <HAL_I2C_Init+0x144>)
 8002886:	400a      	ands	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4920      	ldr	r1, [pc, #128]	@ (8002918 <HAL_I2C_Init+0x148>)
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	491a      	ldr	r1, [pc, #104]	@ (8002910 <HAL_I2C_Init+0x140>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69d9      	ldr	r1, [r3, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2241      	movs	r2, #65	@ 0x41
 80028ee:	2120      	movs	r1, #32
 80028f0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2242      	movs	r2, #66	@ 0x42
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			@ (mov r8, r8)
 800290c:	f0ffffff 	.word	0xf0ffffff
 8002910:	ffff7fff 	.word	0xffff7fff
 8002914:	fffff7ff 	.word	0xfffff7ff
 8002918:	02008000 	.word	0x02008000

0800291c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b089      	sub	sp, #36	@ 0x24
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	0008      	movs	r0, r1
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	0019      	movs	r1, r3
 800292a:	230a      	movs	r3, #10
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	1c02      	adds	r2, r0, #0
 8002930:	801a      	strh	r2, [r3, #0]
 8002932:	2308      	movs	r3, #8
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	1c0a      	adds	r2, r1, #0
 8002938:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2241      	movs	r2, #65	@ 0x41
 800293e:	5c9b      	ldrb	r3, [r3, r2]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b20      	cmp	r3, #32
 8002944:	d000      	beq.n	8002948 <HAL_I2C_Master_Transmit+0x2c>
 8002946:	e10a      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	5c9b      	ldrb	r3, [r3, r2]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Master_Transmit+0x3a>
 8002952:	2302      	movs	r3, #2
 8002954:	e104      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2240      	movs	r2, #64	@ 0x40
 800295a:	2101      	movs	r1, #1
 800295c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800295e:	f7fe ff29 	bl	80017b4 <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	0219      	lsls	r1, r3, #8
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2319      	movs	r3, #25
 8002972:	2201      	movs	r2, #1
 8002974:	f000 f91e 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0ef      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2241      	movs	r2, #65	@ 0x41
 8002984:	2121      	movs	r1, #33	@ 0x21
 8002986:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2242      	movs	r2, #66	@ 0x42
 800298c:	2110      	movs	r1, #16
 800298e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2208      	movs	r2, #8
 80029a0:	18ba      	adds	r2, r7, r2
 80029a2:	8812      	ldrh	r2, [r2, #0]
 80029a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2bff      	cmp	r3, #255	@ 0xff
 80029b4:	d906      	bls.n	80029c4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	@ 0xff
 80029ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	045b      	lsls	r3, r3, #17
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e007      	b.n	80029d4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80029ce:	2380      	movs	r3, #128	@ 0x80
 80029d0:	049b      	lsls	r3, r3, #18
 80029d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d027      	beq.n	8002a2c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	697c      	ldr	r4, [r7, #20]
 8002a18:	230a      	movs	r3, #10
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	8819      	ldrh	r1, [r3, #0]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	4b51      	ldr	r3, [pc, #324]	@ (8002b68 <HAL_I2C_Master_Transmit+0x24c>)
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	0023      	movs	r3, r4
 8002a26:	f000 fa9f 	bl	8002f68 <I2C_TransferConfig>
 8002a2a:	e06f      	b.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	697c      	ldr	r4, [r7, #20]
 8002a34:	230a      	movs	r3, #10
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	8819      	ldrh	r1, [r3, #0]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b68 <HAL_I2C_Master_Transmit+0x24c>)
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	0023      	movs	r3, r4
 8002a42:	f000 fa91 	bl	8002f68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a46:	e061      	b.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f908 	bl	8002c64 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e081      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03a      	beq.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d136      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	f000 f882 	bl	8002bb4 <I2C_WaitOnFlagUntilTimeout>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e053      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2bff      	cmp	r3, #255	@ 0xff
 8002ac0:	d911      	bls.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	@ 0xff
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	2380      	movs	r3, #128	@ 0x80
 8002ad0:	045c      	lsls	r4, r3, #17
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	8819      	ldrh	r1, [r3, #0]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	0023      	movs	r3, r4
 8002ae0:	f000 fa42 	bl	8002f68 <I2C_TransferConfig>
 8002ae4:	e012      	b.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	049c      	lsls	r4, r3, #18
 8002afa:	230a      	movs	r3, #10
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	8819      	ldrh	r1, [r3, #0]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	0023      	movs	r3, r4
 8002b08:	f000 fa2e 	bl	8002f68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d198      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 f8e7 	bl	8002cf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e01a      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	490b      	ldr	r1, [pc, #44]	@ (8002b6c <HAL_I2C_Master_Transmit+0x250>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2241      	movs	r2, #65	@ 0x41
 8002b46:	2120      	movs	r1, #32
 8002b48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2242      	movs	r2, #66	@ 0x42
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2240      	movs	r2, #64	@ 0x40
 8002b56:	2100      	movs	r1, #0
 8002b58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b007      	add	sp, #28
 8002b66:	bd90      	pop	{r4, r7, pc}
 8002b68:	80002000 	.word	0x80002000
 8002b6c:	fe00e800 	.word	0xfe00e800

08002b70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d103      	bne.n	8002b8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2201      	movs	r2, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d007      	beq.n	8002bac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	619a      	str	r2, [r3, #24]
  }
}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc4:	e03a      	b.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	6839      	ldr	r1, [r7, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 f8d3 	bl	8002d78 <I2C_IsErrorOccurred>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d001      	beq.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e040      	b.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	d02d      	beq.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be0:	f7fe fde8 	bl	80017b4 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d302      	bcc.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d122      	bne.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	425a      	negs	r2, r3
 8002c06:	4153      	adcs	r3, r2
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	1dfb      	adds	r3, r7, #7
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d113      	bne.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c18:	2220      	movs	r2, #32
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2241      	movs	r2, #65	@ 0x41
 8002c24:	2120      	movs	r1, #32
 8002c26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2242      	movs	r2, #66	@ 0x42
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2240      	movs	r2, #64	@ 0x40
 8002c34:	2100      	movs	r1, #0
 8002c36:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e00f      	b.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	425a      	negs	r2, r3
 8002c4c:	4153      	adcs	r3, r2
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	001a      	movs	r2, r3
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d0b5      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c70:	e032      	b.n	8002cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 f87d 	bl	8002d78 <I2C_IsErrorOccurred>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e030      	b.n	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	d025      	beq.n	8002cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8c:	f7fe fd92 	bl	80017b4 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d302      	bcc.n	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11a      	bne.n	8002cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d013      	beq.n	8002cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2241      	movs	r2, #65	@ 0x41
 8002cc0:	2120      	movs	r1, #32
 8002cc2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2242      	movs	r2, #66	@ 0x42
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2240      	movs	r2, #64	@ 0x40
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e007      	b.n	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d1c5      	bne.n	8002c72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b004      	add	sp, #16
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cfc:	e02f      	b.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f837 	bl	8002d78 <I2C_IsErrorOccurred>
 8002d0a:	1e03      	subs	r3, r0, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e02d      	b.n	8002d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fe fd4f 	bl	80017b4 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11a      	bne.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d013      	beq.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2241      	movs	r2, #65	@ 0x41
 8002d46:	2120      	movs	r1, #32
 8002d48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2242      	movs	r2, #66	@ 0x42
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2240      	movs	r2, #64	@ 0x40
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e007      	b.n	8002d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2220      	movs	r2, #32
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d1c8      	bne.n	8002cfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	0018      	movs	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b004      	add	sp, #16
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	@ 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2327      	movs	r3, #39	@ 0x27
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2210      	movs	r2, #16
 8002da0:	4013      	ands	r3, r2
 8002da2:	d100      	bne.n	8002da6 <I2C_IsErrorOccurred+0x2e>
 8002da4:	e079      	b.n	8002e9a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2210      	movs	r2, #16
 8002dac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dae:	e057      	b.n	8002e60 <I2C_IsErrorOccurred+0xe8>
 8002db0:	2227      	movs	r2, #39	@ 0x27
 8002db2:	18bb      	adds	r3, r7, r2
 8002db4:	18ba      	adds	r2, r7, r2
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	d04f      	beq.n	8002e60 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dc0:	f7fe fcf8 	bl	80017b4 <HAL_GetTick>
 8002dc4:	0002      	movs	r2, r0
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d302      	bcc.n	8002dd6 <I2C_IsErrorOccurred+0x5e>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d144      	bne.n	8002e60 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	01db      	lsls	r3, r3, #7
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002de4:	2013      	movs	r0, #19
 8002de6:	183b      	adds	r3, r7, r0
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	2142      	movs	r1, #66	@ 0x42
 8002dec:	5c52      	ldrb	r2, [r2, r1]
 8002dee:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d126      	bne.n	8002e52 <I2C_IsErrorOccurred+0xda>
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	01db      	lsls	r3, r3, #7
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d021      	beq.n	8002e52 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002e0e:	183b      	adds	r3, r7, r0
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d01d      	beq.n	8002e52 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	01c9      	lsls	r1, r1, #7
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e28:	f7fe fcc4 	bl	80017b4 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e30:	e00f      	b.n	8002e52 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e32:	f7fe fcbf 	bl	80017b4 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b19      	cmp	r3, #25
 8002e3e:	d908      	bls.n	8002e52 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2220      	movs	r2, #32
 8002e44:	4313      	orrs	r3, r2
 8002e46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e48:	2327      	movs	r3, #39	@ 0x27
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]

              break;
 8002e50:	e006      	b.n	8002e60 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d1e8      	bne.n	8002e32 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2220      	movs	r2, #32
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d004      	beq.n	8002e78 <I2C_IsErrorOccurred+0x100>
 8002e6e:	2327      	movs	r3, #39	@ 0x27
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d09b      	beq.n	8002db0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e78:	2327      	movs	r3, #39	@ 0x27
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2220      	movs	r2, #32
 8002e88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e92:	2327      	movs	r3, #39	@ 0x27
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d00c      	beq.n	8002ec6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2280      	movs	r2, #128	@ 0x80
 8002eba:	0052      	lsls	r2, r2, #1
 8002ebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ebe:	2327      	movs	r3, #39	@ 0x27
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00c      	beq.n	8002eea <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	00d2      	lsls	r2, r2, #3
 8002ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ee2:	2327      	movs	r3, #39	@ 0x27
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d00c      	beq.n	8002f0e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2280      	movs	r2, #128	@ 0x80
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f06:	2327      	movs	r3, #39	@ 0x27
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002f0e:	2327      	movs	r3, #39	@ 0x27
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01d      	beq.n	8002f54 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7ff fe28 	bl	8002b70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	490e      	ldr	r1, [pc, #56]	@ (8002f64 <I2C_IsErrorOccurred+0x1ec>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2241      	movs	r2, #65	@ 0x41
 8002f40:	2120      	movs	r1, #32
 8002f42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2242      	movs	r2, #66	@ 0x42
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	2100      	movs	r1, #0
 8002f52:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f54:	2327      	movs	r3, #39	@ 0x27
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b00a      	add	sp, #40	@ 0x28
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	fe00e800 	.word	0xfe00e800

08002f68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	0008      	movs	r0, r1
 8002f72:	0011      	movs	r1, r2
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	240a      	movs	r4, #10
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	1c02      	adds	r2, r0, #0
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	2009      	movs	r0, #9
 8002f80:	183b      	adds	r3, r7, r0
 8002f82:	1c0a      	adds	r2, r1, #0
 8002f84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	059b      	lsls	r3, r3, #22
 8002f8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	0419      	lsls	r1, r3, #16
 8002f94:	23ff      	movs	r3, #255	@ 0xff
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	085b      	lsrs	r3, r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fb2:	0d51      	lsrs	r1, r2, #21
 8002fb4:	2280      	movs	r2, #128	@ 0x80
 8002fb6:	00d2      	lsls	r2, r2, #3
 8002fb8:	400a      	ands	r2, r1
 8002fba:	4907      	ldr	r1, [pc, #28]	@ (8002fd8 <I2C_TransferConfig+0x70>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	43d2      	mvns	r2, r2
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fce:	46c0      	nop			@ (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b007      	add	sp, #28
 8002fd4:	bd90      	pop	{r4, r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	03ff63ff 	.word	0x03ff63ff

08002fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2241      	movs	r2, #65	@ 0x41
 8002fea:	5c9b      	ldrb	r3, [r3, r2]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d138      	bne.n	8003064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2240      	movs	r2, #64	@ 0x40
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e032      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	@ 0x40
 8003004:	2101      	movs	r1, #1
 8003006:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2241      	movs	r2, #65	@ 0x41
 800300c:	2124      	movs	r1, #36	@ 0x24
 800300e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	438a      	bics	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4911      	ldr	r1, [pc, #68]	@ (8003070 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800302c:	400a      	ands	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2101      	movs	r1, #1
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2241      	movs	r2, #65	@ 0x41
 8003054:	2120      	movs	r1, #32
 8003056:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2240      	movs	r2, #64	@ 0x40
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	ffffefff 	.word	0xffffefff

08003074 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2241      	movs	r2, #65	@ 0x41
 8003082:	5c9b      	ldrb	r3, [r3, r2]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d139      	bne.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2240      	movs	r2, #64	@ 0x40
 800308e:	5c9b      	ldrb	r3, [r3, r2]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003094:	2302      	movs	r3, #2
 8003096:	e033      	b.n	8003100 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2240      	movs	r2, #64	@ 0x40
 800309c:	2101      	movs	r1, #1
 800309e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2241      	movs	r2, #65	@ 0x41
 80030a4:	2124      	movs	r1, #36	@ 0x24
 80030a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2101      	movs	r1, #1
 80030b4:	438a      	bics	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a11      	ldr	r2, [pc, #68]	@ (8003108 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2241      	movs	r2, #65	@ 0x41
 80030ee:	2120      	movs	r1, #32
 80030f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2240      	movs	r2, #64	@ 0x40
 80030f6:	2100      	movs	r1, #0
 80030f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	0018      	movs	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	b004      	add	sp, #16
 8003106:	bd80      	pop	{r7, pc}
 8003108:	fffff0ff 	.word	0xfffff0ff

0800310c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003114:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a19      	ldr	r2, [pc, #100]	@ (8003180 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	4b17      	ldr	r3, [pc, #92]	@ (800317c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	430a      	orrs	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	2380      	movs	r3, #128	@ 0x80
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d11f      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003130:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	0013      	movs	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	189b      	adds	r3, r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4912      	ldr	r1, [pc, #72]	@ (8003188 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800313e:	0018      	movs	r0, r3
 8003140:	f7fc fff2 	bl	8000128 <__udivsi3>
 8003144:	0003      	movs	r3, r0
 8003146:	3301      	adds	r3, #1
 8003148:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800314a:	e008      	b.n	800315e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3b01      	subs	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e001      	b.n	800315e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e009      	b.n	8003172 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800315e:	4b07      	ldr	r3, [pc, #28]	@ (800317c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	401a      	ands	r2, r3
 8003168:	2380      	movs	r3, #128	@ 0x80
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	429a      	cmp	r2, r3
 800316e:	d0ed      	beq.n	800314c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b004      	add	sp, #16
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	40007000 	.word	0x40007000
 8003180:	fffff9ff 	.word	0xfffff9ff
 8003184:	20000010 	.word	0x20000010
 8003188:	000f4240 	.word	0x000f4240

0800318c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003190:	4b03      	ldr	r3, [pc, #12]	@ (80031a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	23e0      	movs	r3, #224	@ 0xe0
 8003196:	01db      	lsls	r3, r3, #7
 8003198:	4013      	ands	r3, r2
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e2fe      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2201      	movs	r2, #1
 80031bc:	4013      	ands	r3, r2
 80031be:	d100      	bne.n	80031c2 <HAL_RCC_OscConfig+0x1e>
 80031c0:	e07c      	b.n	80032bc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c2:	4bc3      	ldr	r3, [pc, #780]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2238      	movs	r2, #56	@ 0x38
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031cc:	4bc0      	ldr	r3, [pc, #768]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2203      	movs	r2, #3
 80031d2:	4013      	ands	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d102      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3e>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d10b      	bne.n	8003200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	4bb9      	ldr	r3, [pc, #740]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	029b      	lsls	r3, r3, #10
 80031f0:	4013      	ands	r3, r2
 80031f2:	d062      	beq.n	80032ba <HAL_RCC_OscConfig+0x116>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d15e      	bne.n	80032ba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e2d9      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	025b      	lsls	r3, r3, #9
 8003208:	429a      	cmp	r2, r3
 800320a:	d107      	bne.n	800321c <HAL_RCC_OscConfig+0x78>
 800320c:	4bb0      	ldr	r3, [pc, #704]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4baf      	ldr	r3, [pc, #700]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003212:	2180      	movs	r1, #128	@ 0x80
 8003214:	0249      	lsls	r1, r1, #9
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e020      	b.n	800325e <HAL_RCC_OscConfig+0xba>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	23a0      	movs	r3, #160	@ 0xa0
 8003222:	02db      	lsls	r3, r3, #11
 8003224:	429a      	cmp	r2, r3
 8003226:	d10e      	bne.n	8003246 <HAL_RCC_OscConfig+0xa2>
 8003228:	4ba9      	ldr	r3, [pc, #676]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4ba8      	ldr	r3, [pc, #672]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800322e:	2180      	movs	r1, #128	@ 0x80
 8003230:	02c9      	lsls	r1, r1, #11
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	4ba6      	ldr	r3, [pc, #664]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4ba5      	ldr	r3, [pc, #660]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800323c:	2180      	movs	r1, #128	@ 0x80
 800323e:	0249      	lsls	r1, r1, #9
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e00b      	b.n	800325e <HAL_RCC_OscConfig+0xba>
 8003246:	4ba2      	ldr	r3, [pc, #648]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4ba1      	ldr	r3, [pc, #644]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800324c:	49a1      	ldr	r1, [pc, #644]	@ (80034d4 <HAL_RCC_OscConfig+0x330>)
 800324e:	400a      	ands	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4b9f      	ldr	r3, [pc, #636]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b9e      	ldr	r3, [pc, #632]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003258:	499f      	ldr	r1, [pc, #636]	@ (80034d8 <HAL_RCC_OscConfig+0x334>)
 800325a:	400a      	ands	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe faa5 	bl	80017b4 <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe faa0 	bl	80017b4 <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e298      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003282:	4b93      	ldr	r3, [pc, #588]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	@ 0x80
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	4013      	ands	r3, r2
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0xcc>
 800328e:	e015      	b.n	80032bc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fa90 	bl	80017b4 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800329a:	f7fe fa8b 	bl	80017b4 <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	@ 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e283      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ac:	4b88      	ldr	r3, [pc, #544]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	029b      	lsls	r3, r3, #10
 80032b4:	4013      	ands	r3, r2
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0xf6>
 80032b8:	e000      	b.n	80032bc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2202      	movs	r2, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	d100      	bne.n	80032c8 <HAL_RCC_OscConfig+0x124>
 80032c6:	e099      	b.n	80033fc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c8:	4b81      	ldr	r3, [pc, #516]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2238      	movs	r2, #56	@ 0x38
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d2:	4b7f      	ldr	r3, [pc, #508]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2203      	movs	r2, #3
 80032d8:	4013      	ands	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d102      	bne.n	80032e8 <HAL_RCC_OscConfig+0x144>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d002      	beq.n	80032ee <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d135      	bne.n	800335a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ee:	4b78      	ldr	r3, [pc, #480]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4013      	ands	r3, r2
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x162>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e256      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b72      	ldr	r3, [pc, #456]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a74      	ldr	r2, [pc, #464]	@ (80034dc <HAL_RCC_OscConfig+0x338>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	021a      	lsls	r2, r3, #8
 8003316:	4b6e      	ldr	r3, [pc, #440]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d112      	bne.n	8003348 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003322:	4b6b      	ldr	r3, [pc, #428]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6e      	ldr	r2, [pc, #440]	@ (80034e0 <HAL_RCC_OscConfig+0x33c>)
 8003328:	4013      	ands	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	4b67      	ldr	r3, [pc, #412]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003336:	4b66      	ldr	r3, [pc, #408]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0adb      	lsrs	r3, r3, #11
 800333c:	2207      	movs	r2, #7
 800333e:	4013      	ands	r3, r2
 8003340:	4a68      	ldr	r2, [pc, #416]	@ (80034e4 <HAL_RCC_OscConfig+0x340>)
 8003342:	40da      	lsrs	r2, r3
 8003344:	4b68      	ldr	r3, [pc, #416]	@ (80034e8 <HAL_RCC_OscConfig+0x344>)
 8003346:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003348:	4b68      	ldr	r3, [pc, #416]	@ (80034ec <HAL_RCC_OscConfig+0x348>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0018      	movs	r0, r3
 800334e:	f7fe f9d5 	bl	80016fc <HAL_InitTick>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d051      	beq.n	80033fa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e22c      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d030      	beq.n	80033c4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003362:	4b5b      	ldr	r3, [pc, #364]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5e      	ldr	r2, [pc, #376]	@ (80034e0 <HAL_RCC_OscConfig+0x33c>)
 8003368:	4013      	ands	r3, r2
 800336a:	0019      	movs	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003376:	4b56      	ldr	r3, [pc, #344]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b55      	ldr	r3, [pc, #340]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800337c:	2180      	movs	r1, #128	@ 0x80
 800337e:	0049      	lsls	r1, r1, #1
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fa16 	bl	80017b4 <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe fa11 	bl	80017b4 <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e209      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033a0:	4b4b      	ldr	r3, [pc, #300]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4013      	ands	r3, r2
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b48      	ldr	r3, [pc, #288]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a4a      	ldr	r2, [pc, #296]	@ (80034dc <HAL_RCC_OscConfig+0x338>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	021a      	lsls	r2, r3, #8
 80033bc:	4b44      	ldr	r3, [pc, #272]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	e01b      	b.n	80033fc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80033c4:	4b42      	ldr	r3, [pc, #264]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80033ca:	4949      	ldr	r1, [pc, #292]	@ (80034f0 <HAL_RCC_OscConfig+0x34c>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe f9f0 	bl	80017b4 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033da:	f7fe f9eb 	bl	80017b4 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1e3      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ec:	4b38      	ldr	r3, [pc, #224]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4013      	ands	r3, r2
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x236>
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033fa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2208      	movs	r2, #8
 8003402:	4013      	ands	r3, r2
 8003404:	d047      	beq.n	8003496 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003406:	4b32      	ldr	r3, [pc, #200]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2238      	movs	r2, #56	@ 0x38
 800340c:	4013      	ands	r3, r2
 800340e:	2b18      	cmp	r3, #24
 8003410:	d10a      	bne.n	8003428 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003412:	4b2f      	ldr	r3, [pc, #188]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	2202      	movs	r2, #2
 8003418:	4013      	ands	r3, r2
 800341a:	d03c      	beq.n	8003496 <HAL_RCC_OscConfig+0x2f2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d138      	bne.n	8003496 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e1c5      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d019      	beq.n	8003464 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003430:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003432:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003434:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003436:	2101      	movs	r1, #1
 8003438:	430a      	orrs	r2, r1
 800343a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe f9ba 	bl	80017b4 <HAL_GetTick>
 8003440:	0003      	movs	r3, r0
 8003442:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003446:	f7fe f9b5 	bl	80017b4 <HAL_GetTick>
 800344a:	0002      	movs	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e1ad      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003458:	4b1d      	ldr	r3, [pc, #116]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800345a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800345c:	2202      	movs	r2, #2
 800345e:	4013      	ands	r3, r2
 8003460:	d0f1      	beq.n	8003446 <HAL_RCC_OscConfig+0x2a2>
 8003462:	e018      	b.n	8003496 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003464:	4b1a      	ldr	r3, [pc, #104]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 8003466:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800346a:	2101      	movs	r1, #1
 800346c:	438a      	bics	r2, r1
 800346e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe f9a0 	bl	80017b4 <HAL_GetTick>
 8003474:	0003      	movs	r3, r0
 8003476:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347a:	f7fe f99b 	bl	80017b4 <HAL_GetTick>
 800347e:	0002      	movs	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e193      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800348c:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 800348e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003490:	2202      	movs	r2, #2
 8003492:	4013      	ands	r3, r2
 8003494:	d1f1      	bne.n	800347a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2204      	movs	r2, #4
 800349c:	4013      	ands	r3, r2
 800349e:	d100      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2fe>
 80034a0:	e0c6      	b.n	8003630 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	231f      	movs	r3, #31
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2238      	movs	r2, #56	@ 0x38
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d11e      	bne.n	80034f4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_RCC_OscConfig+0x32c>)
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	2202      	movs	r2, #2
 80034bc:	4013      	ands	r3, r2
 80034be:	d100      	bne.n	80034c2 <HAL_RCC_OscConfig+0x31e>
 80034c0:	e0b6      	b.n	8003630 <HAL_RCC_OscConfig+0x48c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d000      	beq.n	80034cc <HAL_RCC_OscConfig+0x328>
 80034ca:	e0b1      	b.n	8003630 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e171      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
 80034d0:	40021000 	.word	0x40021000
 80034d4:	fffeffff 	.word	0xfffeffff
 80034d8:	fffbffff 	.word	0xfffbffff
 80034dc:	ffff80ff 	.word	0xffff80ff
 80034e0:	ffffc7ff 	.word	0xffffc7ff
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	20000010 	.word	0x20000010
 80034ec:	20000014 	.word	0x20000014
 80034f0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034f4:	4bb1      	ldr	r3, [pc, #708]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80034f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	055b      	lsls	r3, r3, #21
 80034fc:	4013      	ands	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_OscConfig+0x360>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x362>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d011      	beq.n	800352e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4bac      	ldr	r3, [pc, #688]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800350c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800350e:	4bab      	ldr	r3, [pc, #684]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	0549      	lsls	r1, r1, #21
 8003514:	430a      	orrs	r2, r1
 8003516:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003518:	4ba8      	ldr	r3, [pc, #672]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800351a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800351c:	2380      	movs	r3, #128	@ 0x80
 800351e:	055b      	lsls	r3, r3, #21
 8003520:	4013      	ands	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003526:	231f      	movs	r3, #31
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352e:	4ba4      	ldr	r3, [pc, #656]	@ (80037c0 <HAL_RCC_OscConfig+0x61c>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	2380      	movs	r3, #128	@ 0x80
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4013      	ands	r3, r2
 8003538:	d11a      	bne.n	8003570 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800353a:	4ba1      	ldr	r3, [pc, #644]	@ (80037c0 <HAL_RCC_OscConfig+0x61c>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4ba0      	ldr	r3, [pc, #640]	@ (80037c0 <HAL_RCC_OscConfig+0x61c>)
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	0049      	lsls	r1, r1, #1
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003548:	f7fe f934 	bl	80017b4 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe f92f 	bl	80017b4 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e127      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003564:	4b96      	ldr	r3, [pc, #600]	@ (80037c0 <HAL_RCC_OscConfig+0x61c>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4013      	ands	r3, r2
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x3e2>
 8003578:	4b90      	ldr	r3, [pc, #576]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800357a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800357c:	4b8f      	ldr	r3, [pc, #572]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800357e:	2101      	movs	r1, #1
 8003580:	430a      	orrs	r2, r1
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x41c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x404>
 800358e:	4b8b      	ldr	r3, [pc, #556]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003590:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003592:	4b8a      	ldr	r3, [pc, #552]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003594:	2104      	movs	r1, #4
 8003596:	430a      	orrs	r2, r1
 8003598:	65da      	str	r2, [r3, #92]	@ 0x5c
 800359a:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800359c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800359e:	4b87      	ldr	r3, [pc, #540]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	430a      	orrs	r2, r1
 80035a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x41c>
 80035a8:	4b84      	ldr	r3, [pc, #528]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80035aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035ac:	4b83      	ldr	r3, [pc, #524]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80035ae:	2101      	movs	r1, #1
 80035b0:	438a      	bics	r2, r1
 80035b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035b4:	4b81      	ldr	r3, [pc, #516]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80035b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035b8:	4b80      	ldr	r3, [pc, #512]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80035ba:	2104      	movs	r1, #4
 80035bc:	438a      	bics	r2, r1
 80035be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d014      	beq.n	80035f2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe f8f4 	bl	80017b4 <HAL_GetTick>
 80035cc:	0003      	movs	r3, r0
 80035ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d0:	e009      	b.n	80035e6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fe f8ef 	bl	80017b4 <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	4a79      	ldr	r2, [pc, #484]	@ (80037c4 <HAL_RCC_OscConfig+0x620>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0e6      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e6:	4b75      	ldr	r3, [pc, #468]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	2202      	movs	r2, #2
 80035ec:	4013      	ands	r3, r2
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x42e>
 80035f0:	e013      	b.n	800361a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f2:	f7fe f8df 	bl	80017b4 <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035fa:	e009      	b.n	8003610 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe f8da 	bl	80017b4 <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	4a6f      	ldr	r2, [pc, #444]	@ (80037c4 <HAL_RCC_OscConfig+0x620>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0d1      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003610:	4b6a      	ldr	r3, [pc, #424]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	2202      	movs	r2, #2
 8003616:	4013      	ands	r3, r2
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800361a:	231f      	movs	r3, #31
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b65      	ldr	r3, [pc, #404]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003628:	4b64      	ldr	r3, [pc, #400]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800362a:	4967      	ldr	r1, [pc, #412]	@ (80037c8 <HAL_RCC_OscConfig+0x624>)
 800362c:	400a      	ands	r2, r1
 800362e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d100      	bne.n	800363a <HAL_RCC_OscConfig+0x496>
 8003638:	e0bb      	b.n	80037b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800363a:	4b60      	ldr	r3, [pc, #384]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2238      	movs	r2, #56	@ 0x38
 8003640:	4013      	ands	r3, r2
 8003642:	2b10      	cmp	r3, #16
 8003644:	d100      	bne.n	8003648 <HAL_RCC_OscConfig+0x4a4>
 8003646:	e07b      	b.n	8003740 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d156      	bne.n	80036fe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b5a      	ldr	r3, [pc, #360]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b59      	ldr	r3, [pc, #356]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003656:	495d      	ldr	r1, [pc, #372]	@ (80037cc <HAL_RCC_OscConfig+0x628>)
 8003658:	400a      	ands	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe f8aa 	bl	80017b4 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fe f8a5 	bl	80017b4 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e09d      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003678:	4b50      	ldr	r3, [pc, #320]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	049b      	lsls	r3, r3, #18
 8003680:	4013      	ands	r3, r2
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003684:	4b4d      	ldr	r3, [pc, #308]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a51      	ldr	r2, [pc, #324]	@ (80037d0 <HAL_RCC_OscConfig+0x62c>)
 800368a:	4013      	ands	r3, r2
 800368c:	0019      	movs	r1, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b0:	431a      	orrs	r2, r3
 80036b2:	4b42      	ldr	r3, [pc, #264]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b40      	ldr	r3, [pc, #256]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b3f      	ldr	r3, [pc, #252]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80036be:	2180      	movs	r1, #128	@ 0x80
 80036c0:	0449      	lsls	r1, r1, #17
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80036c6:	4b3d      	ldr	r3, [pc, #244]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	4b3c      	ldr	r3, [pc, #240]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80036cc:	2180      	movs	r1, #128	@ 0x80
 80036ce:	0549      	lsls	r1, r1, #21
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f86e 	bl	80017b4 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe f869 	bl	80017b4 <HAL_GetTick>
 80036e2:	0002      	movs	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e061      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f0:	4b32      	ldr	r3, [pc, #200]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	049b      	lsls	r3, r3, #18
 80036f8:	4013      	ands	r3, r2
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x53a>
 80036fc:	e059      	b.n	80037b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b2f      	ldr	r3, [pc, #188]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b2e      	ldr	r3, [pc, #184]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003704:	4931      	ldr	r1, [pc, #196]	@ (80037cc <HAL_RCC_OscConfig+0x628>)
 8003706:	400a      	ands	r2, r1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fe f853 	bl	80017b4 <HAL_GetTick>
 800370e:	0003      	movs	r3, r0
 8003710:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f84e 	bl	80017b4 <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e046      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003726:	4b25      	ldr	r3, [pc, #148]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	049b      	lsls	r3, r3, #18
 800372e:	4013      	ands	r3, r2
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003732:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 8003738:	4926      	ldr	r1, [pc, #152]	@ (80037d4 <HAL_RCC_OscConfig+0x630>)
 800373a:	400a      	ands	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e038      	b.n	80037b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e033      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800374c:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x618>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2203      	movs	r2, #3
 8003756:	401a      	ands	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	429a      	cmp	r2, r3
 800375e:	d126      	bne.n	80037ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2270      	movs	r2, #112	@ 0x70
 8003764:	401a      	ands	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d11f      	bne.n	80037ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	23fe      	movs	r3, #254	@ 0xfe
 8003772:	01db      	lsls	r3, r3, #7
 8003774:	401a      	ands	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d116      	bne.n	80037ae <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	23f8      	movs	r3, #248	@ 0xf8
 8003784:	039b      	lsls	r3, r3, #14
 8003786:	401a      	ands	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d10e      	bne.n	80037ae <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	23e0      	movs	r3, #224	@ 0xe0
 8003794:	051b      	lsls	r3, r3, #20
 8003796:	401a      	ands	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	0f5b      	lsrs	r3, r3, #29
 80037a4:	075a      	lsls	r2, r3, #29
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b008      	add	sp, #32
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40007000 	.word	0x40007000
 80037c4:	00001388 	.word	0x00001388
 80037c8:	efffffff 	.word	0xefffffff
 80037cc:	feffffff 	.word	0xfeffffff
 80037d0:	11c1808c 	.word	0x11c1808c
 80037d4:	eefefffc 	.word	0xeefefffc

080037d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0e9      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b76      	ldr	r3, [pc, #472]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2207      	movs	r2, #7
 80037f2:	4013      	ands	r3, r2
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d91e      	bls.n	8003838 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b73      	ldr	r3, [pc, #460]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2207      	movs	r2, #7
 8003800:	4393      	bics	r3, r2
 8003802:	0019      	movs	r1, r3
 8003804:	4b70      	ldr	r3, [pc, #448]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800380c:	f7fd ffd2 	bl	80017b4 <HAL_GetTick>
 8003810:	0003      	movs	r3, r0
 8003812:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003814:	e009      	b.n	800382a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003816:	f7fd ffcd 	bl	80017b4 <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	4a6a      	ldr	r2, [pc, #424]	@ (80039cc <HAL_RCC_ClockConfig+0x1f4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0ca      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800382a:	4b67      	ldr	r3, [pc, #412]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2207      	movs	r2, #7
 8003830:	4013      	ands	r3, r2
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2202      	movs	r2, #2
 800383e:	4013      	ands	r3, r2
 8003840:	d015      	beq.n	800386e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2204      	movs	r2, #4
 8003848:	4013      	ands	r3, r2
 800384a:	d006      	beq.n	800385a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800384c:	4b60      	ldr	r3, [pc, #384]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	4b5f      	ldr	r3, [pc, #380]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003852:	21e0      	movs	r1, #224	@ 0xe0
 8003854:	01c9      	lsls	r1, r1, #7
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385a:	4b5d      	ldr	r3, [pc, #372]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a5d      	ldr	r2, [pc, #372]	@ (80039d4 <HAL_RCC_ClockConfig+0x1fc>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	4b59      	ldr	r3, [pc, #356]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2201      	movs	r2, #1
 8003874:	4013      	ands	r3, r2
 8003876:	d057      	beq.n	8003928 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003880:	4b53      	ldr	r3, [pc, #332]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	029b      	lsls	r3, r3, #10
 8003888:	4013      	ands	r3, r2
 800388a:	d12b      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e097      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003898:	4b4d      	ldr	r3, [pc, #308]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2380      	movs	r3, #128	@ 0x80
 800389e:	049b      	lsls	r3, r3, #18
 80038a0:	4013      	ands	r3, r2
 80038a2:	d11f      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e08b      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b0:	4b47      	ldr	r3, [pc, #284]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	2380      	movs	r3, #128	@ 0x80
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4013      	ands	r3, r2
 80038ba:	d113      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e07f      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c8:	4b41      	ldr	r3, [pc, #260]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 80038ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038cc:	2202      	movs	r2, #2
 80038ce:	4013      	ands	r3, r2
 80038d0:	d108      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e074      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	4b3e      	ldr	r3, [pc, #248]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	2202      	movs	r2, #2
 80038dc:	4013      	ands	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e06d      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e4:	4b3a      	ldr	r3, [pc, #232]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2207      	movs	r2, #7
 80038ea:	4393      	bics	r3, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4b37      	ldr	r3, [pc, #220]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7fd ff5c 	bl	80017b4 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003900:	e009      	b.n	8003916 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003902:	f7fd ff57 	bl	80017b4 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a2f      	ldr	r2, [pc, #188]	@ (80039cc <HAL_RCC_ClockConfig+0x1f4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e054      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2e      	ldr	r3, [pc, #184]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2238      	movs	r2, #56	@ 0x38
 800391c:	401a      	ands	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	429a      	cmp	r2, r3
 8003926:	d1ec      	bne.n	8003902 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2207      	movs	r2, #7
 800392e:	4013      	ands	r3, r2
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d21e      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2207      	movs	r2, #7
 800393c:	4393      	bics	r3, r2
 800393e:	0019      	movs	r1, r3
 8003940:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003948:	f7fd ff34 	bl	80017b4 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003950:	e009      	b.n	8003966 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003952:	f7fd ff2f 	bl	80017b4 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	4a1b      	ldr	r2, [pc, #108]	@ (80039cc <HAL_RCC_ClockConfig+0x1f4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e02c      	b.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003966:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2207      	movs	r2, #7
 800396c:	4013      	ands	r3, r2
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d1ee      	bne.n	8003952 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2204      	movs	r2, #4
 800397a:	4013      	ands	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800397e:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	4a15      	ldr	r2, [pc, #84]	@ (80039d8 <HAL_RCC_ClockConfig+0x200>)
 8003984:	4013      	ands	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003992:	f000 f829 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003996:	0001      	movs	r1, r0
 8003998:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f8>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	220f      	movs	r2, #15
 80039a0:	401a      	ands	r2, r3
 80039a2:	4b0e      	ldr	r3, [pc, #56]	@ (80039dc <HAL_RCC_ClockConfig+0x204>)
 80039a4:	0092      	lsls	r2, r2, #2
 80039a6:	58d3      	ldr	r3, [r2, r3]
 80039a8:	221f      	movs	r2, #31
 80039aa:	4013      	ands	r3, r2
 80039ac:	000a      	movs	r2, r1
 80039ae:	40da      	lsrs	r2, r3
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_ClockConfig+0x208>)
 80039b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <HAL_RCC_ClockConfig+0x20c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7fd fe9f 	bl	80016fc <HAL_InitTick>
 80039be:	0003      	movs	r3, r0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40022000 	.word	0x40022000
 80039cc:	00001388 	.word	0x00001388
 80039d0:	40021000 	.word	0x40021000
 80039d4:	fffff0ff 	.word	0xfffff0ff
 80039d8:	ffff8fff 	.word	0xffff8fff
 80039dc:	080065a8 	.word	0x080065a8
 80039e0:	20000010 	.word	0x20000010
 80039e4:	20000014 	.word	0x20000014

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ee:	4b3c      	ldr	r3, [pc, #240]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2238      	movs	r2, #56	@ 0x38
 80039f4:	4013      	ands	r3, r2
 80039f6:	d10f      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80039f8:	4b39      	ldr	r3, [pc, #228]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0adb      	lsrs	r3, r3, #11
 80039fe:	2207      	movs	r2, #7
 8003a00:	4013      	ands	r3, r2
 8003a02:	2201      	movs	r2, #1
 8003a04:	409a      	lsls	r2, r3
 8003a06:	0013      	movs	r3, r2
 8003a08:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a0a:	6839      	ldr	r1, [r7, #0]
 8003a0c:	4835      	ldr	r0, [pc, #212]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a0e:	f7fc fb8b 	bl	8000128 <__udivsi3>
 8003a12:	0003      	movs	r3, r0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e05d      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a18:	4b31      	ldr	r3, [pc, #196]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2238      	movs	r2, #56	@ 0x38
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d102      	bne.n	8003a2a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a24:	4b30      	ldr	r3, [pc, #192]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e054      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2238      	movs	r2, #56	@ 0x38
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d138      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a40:	4b27      	ldr	r3, [pc, #156]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	2207      	movs	r2, #7
 8003a48:	4013      	ands	r3, r2
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d10d      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	4824      	ldr	r0, [pc, #144]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a58:	f7fc fb66 	bl	8000128 <__udivsi3>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	0019      	movs	r1, r3
 8003a60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	227f      	movs	r2, #127	@ 0x7f
 8003a68:	4013      	ands	r3, r2
 8003a6a:	434b      	muls	r3, r1
 8003a6c:	617b      	str	r3, [r7, #20]
        break;
 8003a6e:	e00d      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	481c      	ldr	r0, [pc, #112]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a74:	f7fc fb58 	bl	8000128 <__udivsi3>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	227f      	movs	r2, #127	@ 0x7f
 8003a84:	4013      	ands	r3, r2
 8003a86:	434b      	muls	r3, r1
 8003a88:	617b      	str	r3, [r7, #20]
        break;
 8003a8a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003a8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0f5b      	lsrs	r3, r3, #29
 8003a92:	2207      	movs	r2, #7
 8003a94:	4013      	ands	r3, r2
 8003a96:	3301      	adds	r3, #1
 8003a98:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f7fc fb43 	bl	8000128 <__udivsi3>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e015      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2238      	movs	r2, #56	@ 0x38
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d103      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2238      	movs	r2, #56	@ 0x38
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b18      	cmp	r3, #24
 8003ac6:	d103      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ac8:	23fa      	movs	r3, #250	@ 0xfa
 8003aca:	01db      	lsls	r3, r3, #7
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	e001      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ad4:	693b      	ldr	r3, [r7, #16]
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b006      	add	sp, #24
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	007a1200 	.word	0x007a1200

08003aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	@ (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	20000010 	.word	0x20000010

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b5b0      	push	{r4, r5, r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	0004      	movs	r4, r0
 8003b0a:	f7ff fb3f 	bl	800318c <LL_RCC_GetAPB1Prescaler>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	0b1a      	lsrs	r2, r3, #12
 8003b12:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	58d3      	ldr	r3, [r2, r3]
 8003b18:	221f      	movs	r2, #31
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	40dc      	lsrs	r4, r3
 8003b1e:	0023      	movs	r3, r4
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bdb0      	pop	{r4, r5, r7, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	080065e8 	.word	0x080065e8

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b34:	2313      	movs	r3, #19
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b3c:	2312      	movs	r3, #18
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2380      	movs	r3, #128	@ 0x80
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003b50:	e0a3      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2011      	movs	r0, #17
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5a:	4bc3      	ldr	r3, [pc, #780]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	055b      	lsls	r3, r3, #21
 8003b62:	4013      	ands	r3, r2
 8003b64:	d110      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	4bc0      	ldr	r3, [pc, #768]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b6a:	4bbf      	ldr	r3, [pc, #764]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b6c:	2180      	movs	r1, #128	@ 0x80
 8003b6e:	0549      	lsls	r1, r1, #21
 8003b70:	430a      	orrs	r2, r1
 8003b72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b74:	4bbc      	ldr	r3, [pc, #752]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	055b      	lsls	r3, r3, #21
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b82:	183b      	adds	r3, r7, r0
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b88:	4bb8      	ldr	r3, [pc, #736]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4bb7      	ldr	r3, [pc, #732]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b8e:	2180      	movs	r1, #128	@ 0x80
 8003b90:	0049      	lsls	r1, r1, #1
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b96:	f7fd fe0d 	bl	80017b4 <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba0:	f7fd fe08 	bl	80017b4 <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d904      	bls.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003bae:	2313      	movs	r3, #19
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	701a      	strb	r2, [r3, #0]
        break;
 8003bb6:	e005      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb8:	4bac      	ldr	r3, [pc, #688]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	@ 0x80
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d0ed      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003bc4:	2313      	movs	r3, #19
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d154      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bce:	4ba6      	ldr	r3, [pc, #664]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bd2:	23c0      	movs	r3, #192	@ 0xc0
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d019      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d014      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bea:	4b9f      	ldr	r3, [pc, #636]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	4aa0      	ldr	r2, [pc, #640]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf4:	4b9c      	ldr	r3, [pc, #624]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003bf8:	4b9b      	ldr	r3, [pc, #620]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bfa:	2180      	movs	r1, #128	@ 0x80
 8003bfc:	0249      	lsls	r1, r1, #9
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c02:	4b99      	ldr	r3, [pc, #612]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c06:	4b98      	ldr	r3, [pc, #608]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c08:	499a      	ldr	r1, [pc, #616]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c0e:	4b96      	ldr	r3, [pc, #600]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2201      	movs	r2, #1
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d016      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fdca 	bl	80017b4 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c24:	e00c      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fd fdc5 	bl	80017b4 <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	4a91      	ldr	r2, [pc, #580]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d904      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c36:	2313      	movs	r3, #19
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	701a      	strb	r2, [r3, #0]
            break;
 8003c3e:	e004      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c40:	4b89      	ldr	r3, [pc, #548]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c44:	2202      	movs	r2, #2
 8003c46:	4013      	ands	r3, r2
 8003c48:	d0ed      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c4a:	2313      	movs	r3, #19
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c54:	4b84      	ldr	r3, [pc, #528]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	4a85      	ldr	r2, [pc, #532]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c62:	4b81      	ldr	r3, [pc, #516]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c68:	e00c      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c6a:	2312      	movs	r3, #18
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	2213      	movs	r2, #19
 8003c70:	18ba      	adds	r2, r7, r2
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e005      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	2312      	movs	r3, #18
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2213      	movs	r2, #19
 8003c7e:	18ba      	adds	r2, r7, r2
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c84:	2311      	movs	r3, #17
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c92:	4b75      	ldr	r3, [pc, #468]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c94:	4979      	ldr	r1, [pc, #484]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003c96:	400a      	ands	r2, r1
 8003c98:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca4:	4b70      	ldr	r3, [pc, #448]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca8:	2203      	movs	r2, #3
 8003caa:	4393      	bics	r3, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cc2:	4b69      	ldr	r3, [pc, #420]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	4393      	bics	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	4b65      	ldr	r3, [pc, #404]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2210      	movs	r2, #16
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d009      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce0:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	4a66      	ldr	r2, [pc, #408]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	4b5e      	ldr	r3, [pc, #376]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d009      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d00:	4b59      	ldr	r3, [pc, #356]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	4a5f      	ldr	r2, [pc, #380]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	0019      	movs	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	4b56      	ldr	r3, [pc, #344]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d10:	430a      	orrs	r2, r1
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d20:	4b51      	ldr	r3, [pc, #324]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	4a58      	ldr	r2, [pc, #352]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69da      	ldr	r2, [r3, #28]
 8003d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d42:	4a52      	ldr	r2, [pc, #328]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	4b46      	ldr	r3, [pc, #280]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	01db      	lsls	r3, r3, #7
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d015      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d5e:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	0899      	lsrs	r1, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	05db      	lsls	r3, r3, #23
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d106      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	0249      	lsls	r1, r1, #9
 8003d86:	430a      	orrs	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	2380      	movs	r3, #128	@ 0x80
 8003d90:	031b      	lsls	r3, r3, #12
 8003d92:	4013      	ands	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d96:	4b34      	ldr	r3, [pc, #208]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9a:	2240      	movs	r2, #64	@ 0x40
 8003d9c:	4393      	bics	r3, r2
 8003d9e:	0019      	movs	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da4:	4b30      	ldr	r3, [pc, #192]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	2380      	movs	r3, #128	@ 0x80
 8003db0:	039b      	lsls	r3, r3, #14
 8003db2:	4013      	ands	r3, r2
 8003db4:	d016      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003db6:	4b2c      	ldr	r3, [pc, #176]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	4a35      	ldr	r2, [pc, #212]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dc4:	4b28      	ldr	r3, [pc, #160]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	03db      	lsls	r3, r3, #15
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	4b23      	ldr	r3, [pc, #140]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ddc:	2180      	movs	r1, #128	@ 0x80
 8003dde:	0449      	lsls	r1, r1, #17
 8003de0:	430a      	orrs	r2, r1
 8003de2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	@ 0x80
 8003dea:	03db      	lsls	r3, r3, #15
 8003dec:	4013      	ands	r3, r2
 8003dee:	d016      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003df0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e00:	430a      	orrs	r2, r1
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	045b      	lsls	r3, r3, #17
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e10:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e16:	2180      	movs	r1, #128	@ 0x80
 8003e18:	0449      	lsls	r1, r1, #17
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	4013      	ands	r3, r2
 8003e28:	d016      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	0019      	movs	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	2380      	movs	r3, #128	@ 0x80
 8003e44:	01db      	lsls	r3, r3, #7
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d106      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e50:	2180      	movs	r1, #128	@ 0x80
 8003e52:	0249      	lsls	r1, r1, #9
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003e58:	2312      	movs	r3, #18
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	781b      	ldrb	r3, [r3, #0]
}
 8003e5e:	0018      	movs	r0, r3
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b006      	add	sp, #24
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	fffffcff 	.word	0xfffffcff
 8003e74:	fffeffff 	.word	0xfffeffff
 8003e78:	00001388 	.word	0x00001388
 8003e7c:	efffffff 	.word	0xefffffff
 8003e80:	fffff3ff 	.word	0xfffff3ff
 8003e84:	fff3ffff 	.word	0xfff3ffff
 8003e88:	ffcfffff 	.word	0xffcfffff
 8003e8c:	ffffcfff 	.word	0xffffcfff
 8003e90:	ffbfffff 	.word	0xffbfffff
 8003e94:	feffffff 	.word	0xfeffffff
 8003e98:	ffff3fff 	.word	0xffff3fff

08003e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e04a      	b.n	8003f44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223d      	movs	r2, #61	@ 0x3d
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223c      	movs	r2, #60	@ 0x3c
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7fd faa5 	bl	8001414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	223d      	movs	r2, #61	@ 0x3d
 8003ece:	2102      	movs	r1, #2
 8003ed0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	0019      	movs	r1, r3
 8003edc:	0010      	movs	r0, r2
 8003ede:	f000 fa1f 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2248      	movs	r2, #72	@ 0x48
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	223e      	movs	r2, #62	@ 0x3e
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	223f      	movs	r2, #63	@ 0x3f
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2240      	movs	r2, #64	@ 0x40
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2241      	movs	r2, #65	@ 0x41
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2242      	movs	r2, #66	@ 0x42
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2243      	movs	r2, #67	@ 0x43
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2244      	movs	r2, #68	@ 0x44
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2245      	movs	r2, #69	@ 0x45
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2246      	movs	r2, #70	@ 0x46
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2247      	movs	r2, #71	@ 0x47
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	223d      	movs	r2, #61	@ 0x3d
 8003f3e:	2101      	movs	r1, #1
 8003f40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d108      	bne.n	8003f6e <HAL_TIM_PWM_Start+0x22>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	223e      	movs	r2, #62	@ 0x3e
 8003f60:	5c9b      	ldrb	r3, [r3, r2]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	1e5a      	subs	r2, r3, #1
 8003f68:	4193      	sbcs	r3, r2
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e037      	b.n	8003fde <HAL_TIM_PWM_Start+0x92>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d108      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x3a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	223f      	movs	r2, #63	@ 0x3f
 8003f78:	5c9b      	ldrb	r3, [r3, r2]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	1e5a      	subs	r2, r3, #1
 8003f80:	4193      	sbcs	r3, r2
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	e02b      	b.n	8003fde <HAL_TIM_PWM_Start+0x92>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d108      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x52>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2240      	movs	r2, #64	@ 0x40
 8003f90:	5c9b      	ldrb	r3, [r3, r2]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	1e5a      	subs	r2, r3, #1
 8003f98:	4193      	sbcs	r3, r2
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	e01f      	b.n	8003fde <HAL_TIM_PWM_Start+0x92>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b0c      	cmp	r3, #12
 8003fa2:	d108      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0x6a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2241      	movs	r2, #65	@ 0x41
 8003fa8:	5c9b      	ldrb	r3, [r3, r2]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	1e5a      	subs	r2, r3, #1
 8003fb0:	4193      	sbcs	r3, r2
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	e013      	b.n	8003fde <HAL_TIM_PWM_Start+0x92>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d108      	bne.n	8003fce <HAL_TIM_PWM_Start+0x82>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2242      	movs	r2, #66	@ 0x42
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	4193      	sbcs	r3, r2
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	e007      	b.n	8003fde <HAL_TIM_PWM_Start+0x92>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2243      	movs	r2, #67	@ 0x43
 8003fd2:	5c9b      	ldrb	r3, [r3, r2]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	1e5a      	subs	r2, r3, #1
 8003fda:	4193      	sbcs	r3, r2
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e08b      	b.n	80040fe <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0xaa>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	223e      	movs	r2, #62	@ 0x3e
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	5499      	strb	r1, [r3, r2]
 8003ff4:	e023      	b.n	800403e <HAL_TIM_PWM_Start+0xf2>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d104      	bne.n	8004006 <HAL_TIM_PWM_Start+0xba>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	223f      	movs	r2, #63	@ 0x3f
 8004000:	2102      	movs	r1, #2
 8004002:	5499      	strb	r1, [r3, r2]
 8004004:	e01b      	b.n	800403e <HAL_TIM_PWM_Start+0xf2>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d104      	bne.n	8004016 <HAL_TIM_PWM_Start+0xca>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2240      	movs	r2, #64	@ 0x40
 8004010:	2102      	movs	r1, #2
 8004012:	5499      	strb	r1, [r3, r2]
 8004014:	e013      	b.n	800403e <HAL_TIM_PWM_Start+0xf2>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b0c      	cmp	r3, #12
 800401a:	d104      	bne.n	8004026 <HAL_TIM_PWM_Start+0xda>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2241      	movs	r2, #65	@ 0x41
 8004020:	2102      	movs	r1, #2
 8004022:	5499      	strb	r1, [r3, r2]
 8004024:	e00b      	b.n	800403e <HAL_TIM_PWM_Start+0xf2>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b10      	cmp	r3, #16
 800402a:	d104      	bne.n	8004036 <HAL_TIM_PWM_Start+0xea>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2242      	movs	r2, #66	@ 0x42
 8004030:	2102      	movs	r1, #2
 8004032:	5499      	strb	r1, [r3, r2]
 8004034:	e003      	b.n	800403e <HAL_TIM_PWM_Start+0xf2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2243      	movs	r2, #67	@ 0x43
 800403a:	2102      	movs	r1, #2
 800403c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6839      	ldr	r1, [r7, #0]
 8004044:	2201      	movs	r2, #1
 8004046:	0018      	movs	r0, r3
 8004048:	f000 fcbc 	bl	80049c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2d      	ldr	r2, [pc, #180]	@ (8004108 <HAL_TIM_PWM_Start+0x1bc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_TIM_PWM_Start+0x128>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2c      	ldr	r2, [pc, #176]	@ (800410c <HAL_TIM_PWM_Start+0x1c0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIM_PWM_Start+0x128>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2a      	ldr	r2, [pc, #168]	@ (8004110 <HAL_TIM_PWM_Start+0x1c4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_TIM_PWM_Start+0x128>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a29      	ldr	r2, [pc, #164]	@ (8004114 <HAL_TIM_PWM_Start+0x1c8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_TIM_PWM_Start+0x12c>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_TIM_PWM_Start+0x12e>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2180      	movs	r1, #128	@ 0x80
 800408a:	0209      	lsls	r1, r1, #8
 800408c:	430a      	orrs	r2, r1
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1c      	ldr	r2, [pc, #112]	@ (8004108 <HAL_TIM_PWM_Start+0x1bc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00f      	beq.n	80040ba <HAL_TIM_PWM_Start+0x16e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	05db      	lsls	r3, r3, #23
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d009      	beq.n	80040ba <HAL_TIM_PWM_Start+0x16e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <HAL_TIM_PWM_Start+0x1cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_TIM_PWM_Start+0x16e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_TIM_PWM_Start+0x1c0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d116      	bne.n	80040e8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a16      	ldr	r2, [pc, #88]	@ (800411c <HAL_TIM_PWM_Start+0x1d0>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d016      	beq.n	80040fa <HAL_TIM_PWM_Start+0x1ae>
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	2380      	movs	r3, #128	@ 0x80
 80040d0:	025b      	lsls	r3, r3, #9
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d011      	beq.n	80040fa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e6:	e008      	b.n	80040fa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e000      	b.n	80040fc <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b004      	add	sp, #16
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800
 8004118:	40000400 	.word	0x40000400
 800411c:	00010007 	.word	0x00010007

08004120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2317      	movs	r3, #23
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	223c      	movs	r2, #60	@ 0x3c
 8004138:	5c9b      	ldrb	r3, [r3, r2]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x22>
 800413e:	2302      	movs	r3, #2
 8004140:	e0e5      	b.n	800430e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	223c      	movs	r2, #60	@ 0x3c
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b14      	cmp	r3, #20
 800414e:	d900      	bls.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004150:	e0d1      	b.n	80042f6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	009a      	lsls	r2, r3, #2
 8004156:	4b70      	ldr	r3, [pc, #448]	@ (8004318 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	0011      	movs	r1, r2
 8004166:	0018      	movs	r0, r3
 8004168:	f000 f968 	bl	800443c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2108      	movs	r1, #8
 8004178:	430a      	orrs	r2, r1
 800417a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2104      	movs	r1, #4
 8004188:	438a      	bics	r2, r1
 800418a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	619a      	str	r2, [r3, #24]
      break;
 800419e:	e0af      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	0011      	movs	r1, r2
 80041a8:	0018      	movs	r0, r3
 80041aa:	f000 f9d1 	bl	8004550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2180      	movs	r1, #128	@ 0x80
 80041ba:	0109      	lsls	r1, r1, #4
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4954      	ldr	r1, [pc, #336]	@ (800431c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041cc:	400a      	ands	r2, r1
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
      break;
 80041e4:	e08c      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	0011      	movs	r1, r2
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 fa32 	bl	8004658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2108      	movs	r1, #8
 8004200:	430a      	orrs	r2, r1
 8004202:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2104      	movs	r1, #4
 8004210:	438a      	bics	r2, r1
 8004212:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69d9      	ldr	r1, [r3, #28]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	61da      	str	r2, [r3, #28]
      break;
 8004226:	e06b      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	0011      	movs	r1, r2
 8004230:	0018      	movs	r0, r3
 8004232:	f000 fa99 	bl	8004768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2180      	movs	r1, #128	@ 0x80
 8004242:	0109      	lsls	r1, r1, #4
 8004244:	430a      	orrs	r2, r1
 8004246:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4932      	ldr	r1, [pc, #200]	@ (800431c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004254:	400a      	ands	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69d9      	ldr	r1, [r3, #28]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	61da      	str	r2, [r3, #28]
      break;
 800426c:	e048      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	0011      	movs	r1, r2
 8004276:	0018      	movs	r0, r3
 8004278:	f000 fae0 	bl	800483c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2108      	movs	r1, #8
 8004288:	430a      	orrs	r2, r1
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2104      	movs	r1, #4
 8004298:	438a      	bics	r2, r1
 800429a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042ae:	e027      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	0011      	movs	r1, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 fb1f 	bl	80048fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2180      	movs	r1, #128	@ 0x80
 80042ca:	0109      	lsls	r1, r1, #4
 80042cc:	430a      	orrs	r2, r1
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4910      	ldr	r1, [pc, #64]	@ (800431c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042dc:	400a      	ands	r2, r1
 80042de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042f4:	e004      	b.n	8004300 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80042f6:	2317      	movs	r3, #23
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
      break;
 80042fe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	223c      	movs	r2, #60	@ 0x3c
 8004304:	2100      	movs	r1, #0
 8004306:	5499      	strb	r1, [r3, r2]

  return status;
 8004308:	2317      	movs	r3, #23
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	781b      	ldrb	r3, [r3, #0]
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b006      	add	sp, #24
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	08006608 	.word	0x08006608
 800431c:	fffffbff 	.word	0xfffffbff

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3b      	ldr	r2, [pc, #236]	@ (8004420 <TIM_Base_SetConfig+0x100>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d008      	beq.n	800434a <TIM_Base_SetConfig+0x2a>
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	2380      	movs	r3, #128	@ 0x80
 800433c:	05db      	lsls	r3, r3, #23
 800433e:	429a      	cmp	r2, r3
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0x2a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a37      	ldr	r2, [pc, #220]	@ (8004424 <TIM_Base_SetConfig+0x104>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2270      	movs	r2, #112	@ 0x70
 800434e:	4393      	bics	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a30      	ldr	r2, [pc, #192]	@ (8004420 <TIM_Base_SetConfig+0x100>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <TIM_Base_SetConfig+0x76>
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	05db      	lsls	r3, r3, #23
 800436a:	429a      	cmp	r2, r3
 800436c:	d013      	beq.n	8004396 <TIM_Base_SetConfig+0x76>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2c      	ldr	r2, [pc, #176]	@ (8004424 <TIM_Base_SetConfig+0x104>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_Base_SetConfig+0x76>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a2b      	ldr	r2, [pc, #172]	@ (8004428 <TIM_Base_SetConfig+0x108>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_Base_SetConfig+0x76>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2a      	ldr	r2, [pc, #168]	@ (800442c <TIM_Base_SetConfig+0x10c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_Base_SetConfig+0x76>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a29      	ldr	r2, [pc, #164]	@ (8004430 <TIM_Base_SetConfig+0x110>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_Base_SetConfig+0x76>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a28      	ldr	r2, [pc, #160]	@ (8004434 <TIM_Base_SetConfig+0x114>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d108      	bne.n	80043a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a27      	ldr	r2, [pc, #156]	@ (8004438 <TIM_Base_SetConfig+0x118>)
 800439a:	4013      	ands	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2280      	movs	r2, #128	@ 0x80
 80043ac:	4393      	bics	r3, r2
 80043ae:	001a      	movs	r2, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a13      	ldr	r2, [pc, #76]	@ (8004420 <TIM_Base_SetConfig+0x100>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0xce>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a14      	ldr	r2, [pc, #80]	@ (800442c <TIM_Base_SetConfig+0x10c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0xce>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a13      	ldr	r2, [pc, #76]	@ (8004430 <TIM_Base_SetConfig+0x110>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0xce>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a12      	ldr	r2, [pc, #72]	@ (8004434 <TIM_Base_SetConfig+0x114>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d103      	bne.n	80043f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2201      	movs	r2, #1
 8004402:	4013      	ands	r3, r2
 8004404:	2b01      	cmp	r3, #1
 8004406:	d106      	bne.n	8004416 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2201      	movs	r2, #1
 800440e:	4393      	bics	r3, r2
 8004410:	001a      	movs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	611a      	str	r2, [r3, #16]
  }
}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	46bd      	mov	sp, r7
 800441a:	b004      	add	sp, #16
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40000400 	.word	0x40000400
 8004428:	40002000 	.word	0x40002000
 800442c:	40014000 	.word	0x40014000
 8004430:	40014400 	.word	0x40014400
 8004434:	40014800 	.word	0x40014800
 8004438:	fffffcff 	.word	0xfffffcff

0800443c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	2201      	movs	r2, #1
 8004452:	4393      	bics	r3, r2
 8004454:	001a      	movs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a32      	ldr	r2, [pc, #200]	@ (8004534 <TIM_OC1_SetConfig+0xf8>)
 800446a:	4013      	ands	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2203      	movs	r2, #3
 8004472:	4393      	bics	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2202      	movs	r2, #2
 8004484:	4393      	bics	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a28      	ldr	r2, [pc, #160]	@ (8004538 <TIM_OC1_SetConfig+0xfc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_OC1_SetConfig+0x76>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a27      	ldr	r2, [pc, #156]	@ (800453c <TIM_OC1_SetConfig+0x100>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <TIM_OC1_SetConfig+0x76>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a26      	ldr	r2, [pc, #152]	@ (8004540 <TIM_OC1_SetConfig+0x104>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_OC1_SetConfig+0x76>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a25      	ldr	r2, [pc, #148]	@ (8004544 <TIM_OC1_SetConfig+0x108>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10c      	bne.n	80044cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2208      	movs	r2, #8
 80044b6:	4393      	bics	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2204      	movs	r2, #4
 80044c8:	4393      	bics	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004538 <TIM_OC1_SetConfig+0xfc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <TIM_OC1_SetConfig+0xb0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a19      	ldr	r2, [pc, #100]	@ (800453c <TIM_OC1_SetConfig+0x100>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_OC1_SetConfig+0xb0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <TIM_OC1_SetConfig+0x104>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_OC1_SetConfig+0xb0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <TIM_OC1_SetConfig+0x108>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d111      	bne.n	8004510 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4a16      	ldr	r2, [pc, #88]	@ (8004548 <TIM_OC1_SetConfig+0x10c>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4a15      	ldr	r2, [pc, #84]	@ (800454c <TIM_OC1_SetConfig+0x110>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	46bd      	mov	sp, r7
 800452e:	b006      	add	sp, #24
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	fffeff8f 	.word	0xfffeff8f
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800
 8004548:	fffffeff 	.word	0xfffffeff
 800454c:	fffffdff 	.word	0xfffffdff

08004550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	2210      	movs	r2, #16
 8004566:	4393      	bics	r3, r2
 8004568:	001a      	movs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a2e      	ldr	r2, [pc, #184]	@ (8004638 <TIM_OC2_SetConfig+0xe8>)
 800457e:	4013      	ands	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a2d      	ldr	r2, [pc, #180]	@ (800463c <TIM_OC2_SetConfig+0xec>)
 8004586:	4013      	ands	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2220      	movs	r2, #32
 800459a:	4393      	bics	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <TIM_OC2_SetConfig+0xf0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10d      	bne.n	80045ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2280      	movs	r2, #128	@ 0x80
 80045b6:	4393      	bics	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2240      	movs	r2, #64	@ 0x40
 80045ca:	4393      	bics	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <TIM_OC2_SetConfig+0xf0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_OC2_SetConfig+0x9e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004644 <TIM_OC2_SetConfig+0xf4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_OC2_SetConfig+0x9e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a19      	ldr	r2, [pc, #100]	@ (8004648 <TIM_OC2_SetConfig+0xf8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_OC2_SetConfig+0x9e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a18      	ldr	r2, [pc, #96]	@ (800464c <TIM_OC2_SetConfig+0xfc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d113      	bne.n	8004616 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <TIM_OC2_SetConfig+0x100>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4a16      	ldr	r2, [pc, #88]	@ (8004654 <TIM_OC2_SetConfig+0x104>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	46c0      	nop			@ (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	b006      	add	sp, #24
 8004636:	bd80      	pop	{r7, pc}
 8004638:	feff8fff 	.word	0xfeff8fff
 800463c:	fffffcff 	.word	0xfffffcff
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40014000 	.word	0x40014000
 8004648:	40014400 	.word	0x40014400
 800464c:	40014800 	.word	0x40014800
 8004650:	fffffbff 	.word	0xfffffbff
 8004654:	fffff7ff 	.word	0xfffff7ff

08004658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4a33      	ldr	r2, [pc, #204]	@ (800473c <TIM_OC3_SetConfig+0xe4>)
 800466e:	401a      	ands	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a2f      	ldr	r2, [pc, #188]	@ (8004740 <TIM_OC3_SetConfig+0xe8>)
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2203      	movs	r2, #3
 800468c:	4393      	bics	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	4a29      	ldr	r2, [pc, #164]	@ (8004744 <TIM_OC3_SetConfig+0xec>)
 800469e:	4013      	ands	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a25      	ldr	r2, [pc, #148]	@ (8004748 <TIM_OC3_SetConfig+0xf0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10d      	bne.n	80046d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	4a24      	ldr	r2, [pc, #144]	@ (800474c <TIM_OC3_SetConfig+0xf4>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4a20      	ldr	r2, [pc, #128]	@ (8004750 <TIM_OC3_SetConfig+0xf8>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <TIM_OC3_SetConfig+0xf0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <TIM_OC3_SetConfig+0x9a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004754 <TIM_OC3_SetConfig+0xfc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_OC3_SetConfig+0x9a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004758 <TIM_OC3_SetConfig+0x100>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC3_SetConfig+0x9a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <TIM_OC3_SetConfig+0x104>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d113      	bne.n	800471a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004760 <TIM_OC3_SetConfig+0x108>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <TIM_OC3_SetConfig+0x10c>)
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	621a      	str	r2, [r3, #32]
}
 8004734:	46c0      	nop			@ (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	b006      	add	sp, #24
 800473a:	bd80      	pop	{r7, pc}
 800473c:	fffffeff 	.word	0xfffffeff
 8004740:	fffeff8f 	.word	0xfffeff8f
 8004744:	fffffdff 	.word	0xfffffdff
 8004748:	40012c00 	.word	0x40012c00
 800474c:	fffff7ff 	.word	0xfffff7ff
 8004750:	fffffbff 	.word	0xfffffbff
 8004754:	40014000 	.word	0x40014000
 8004758:	40014400 	.word	0x40014400
 800475c:	40014800 	.word	0x40014800
 8004760:	ffffefff 	.word	0xffffefff
 8004764:	ffffdfff 	.word	0xffffdfff

08004768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4a26      	ldr	r2, [pc, #152]	@ (8004818 <TIM_OC4_SetConfig+0xb0>)
 800477e:	401a      	ands	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a22      	ldr	r2, [pc, #136]	@ (800481c <TIM_OC4_SetConfig+0xb4>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a21      	ldr	r2, [pc, #132]	@ (8004820 <TIM_OC4_SetConfig+0xb8>)
 800479c:	4013      	ands	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <TIM_OC4_SetConfig+0xbc>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	031b      	lsls	r3, r3, #12
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <TIM_OC4_SetConfig+0xc0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00b      	beq.n	80047e0 <TIM_OC4_SetConfig+0x78>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a18      	ldr	r2, [pc, #96]	@ (800482c <TIM_OC4_SetConfig+0xc4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d007      	beq.n	80047e0 <TIM_OC4_SetConfig+0x78>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <TIM_OC4_SetConfig+0xc8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d003      	beq.n	80047e0 <TIM_OC4_SetConfig+0x78>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a16      	ldr	r2, [pc, #88]	@ (8004834 <TIM_OC4_SetConfig+0xcc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d109      	bne.n	80047f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <TIM_OC4_SetConfig+0xd0>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b006      	add	sp, #24
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			@ (mov r8, r8)
 8004818:	ffffefff 	.word	0xffffefff
 800481c:	feff8fff 	.word	0xfeff8fff
 8004820:	fffffcff 	.word	0xfffffcff
 8004824:	ffffdfff 	.word	0xffffdfff
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800
 8004838:	ffffbfff 	.word	0xffffbfff

0800483c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	4a23      	ldr	r2, [pc, #140]	@ (80048e0 <TIM_OC5_SetConfig+0xa4>)
 8004852:	401a      	ands	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a1f      	ldr	r2, [pc, #124]	@ (80048e4 <TIM_OC5_SetConfig+0xa8>)
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <TIM_OC5_SetConfig+0xac>)
 800487a:	4013      	ands	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a17      	ldr	r2, [pc, #92]	@ (80048ec <TIM_OC5_SetConfig+0xb0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00b      	beq.n	80048aa <TIM_OC5_SetConfig+0x6e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a16      	ldr	r2, [pc, #88]	@ (80048f0 <TIM_OC5_SetConfig+0xb4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d007      	beq.n	80048aa <TIM_OC5_SetConfig+0x6e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <TIM_OC5_SetConfig+0xb8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC5_SetConfig+0x6e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <TIM_OC5_SetConfig+0xbc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d109      	bne.n	80048be <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	4a0c      	ldr	r2, [pc, #48]	@ (80048e0 <TIM_OC5_SetConfig+0xa4>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b006      	add	sp, #24
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	fffeffff 	.word	0xfffeffff
 80048e4:	fffeff8f 	.word	0xfffeff8f
 80048e8:	fffdffff 	.word	0xfffdffff
 80048ec:	40012c00 	.word	0x40012c00
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800

080048fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	4a24      	ldr	r2, [pc, #144]	@ (80049a4 <TIM_OC6_SetConfig+0xa8>)
 8004912:	401a      	ands	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a20      	ldr	r2, [pc, #128]	@ (80049a8 <TIM_OC6_SetConfig+0xac>)
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ac <TIM_OC6_SetConfig+0xb0>)
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	051b      	lsls	r3, r3, #20
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a18      	ldr	r2, [pc, #96]	@ (80049b0 <TIM_OC6_SetConfig+0xb4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_OC6_SetConfig+0x70>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a17      	ldr	r2, [pc, #92]	@ (80049b4 <TIM_OC6_SetConfig+0xb8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_OC6_SetConfig+0x70>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a16      	ldr	r2, [pc, #88]	@ (80049b8 <TIM_OC6_SetConfig+0xbc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_OC6_SetConfig+0x70>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a15      	ldr	r2, [pc, #84]	@ (80049bc <TIM_OC6_SetConfig+0xc0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d109      	bne.n	8004980 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <TIM_OC6_SetConfig+0xc4>)
 8004970:	4013      	ands	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	029b      	lsls	r3, r3, #10
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b006      	add	sp, #24
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	ffefffff 	.word	0xffefffff
 80049a8:	feff8fff 	.word	0xfeff8fff
 80049ac:	ffdfffff 	.word	0xffdfffff
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800
 80049c0:	fffbffff 	.word	0xfffbffff

080049c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	221f      	movs	r2, #31
 80049d4:	4013      	ands	r3, r2
 80049d6:	2201      	movs	r2, #1
 80049d8:	409a      	lsls	r2, r3
 80049da:	0013      	movs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	43d2      	mvns	r2, r2
 80049e6:	401a      	ands	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	211f      	movs	r1, #31
 80049f4:	400b      	ands	r3, r1
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4099      	lsls	r1, r3
 80049fa:	000b      	movs	r3, r1
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b006      	add	sp, #24
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	223c      	movs	r2, #60	@ 0x3c
 8004a1a:	5c9b      	ldrb	r3, [r3, r2]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e055      	b.n	8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	223c      	movs	r2, #60	@ 0x3c
 8004a28:	2101      	movs	r1, #1
 8004a2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	223d      	movs	r2, #61	@ 0x3d
 8004a30:	2102      	movs	r1, #2
 8004a32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a23      	ldr	r2, [pc, #140]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a22      	ldr	r2, [pc, #136]	@ (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2270      	movs	r2, #112	@ 0x70
 8004a64:	4393      	bics	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a16      	ldr	r2, [pc, #88]	@ (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00f      	beq.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	2380      	movs	r3, #128	@ 0x80
 8004a8a:	05db      	lsls	r3, r3, #23
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d009      	beq.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a12      	ldr	r2, [pc, #72]	@ (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a11      	ldr	r2, [pc, #68]	@ (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d10c      	bne.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2280      	movs	r2, #128	@ 0x80
 8004aa8:	4393      	bics	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	223d      	movs	r2, #61	@ 0x3d
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	223c      	movs	r2, #60	@ 0x3c
 8004aca:	2100      	movs	r1, #0
 8004acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b004      	add	sp, #16
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40012c00 	.word	0x40012c00
 8004adc:	ff0fffff 	.word	0xff0fffff
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40014000 	.word	0x40014000

08004ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	223c      	movs	r2, #60	@ 0x3c
 8004afa:	5c9b      	ldrb	r3, [r3, r2]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e06f      	b.n	8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	223c      	movs	r2, #60	@ 0x3c
 8004b08:	2101      	movs	r1, #1
 8004b0a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	22ff      	movs	r2, #255	@ 0xff
 8004b10:	4393      	bics	r3, r2
 8004b12:	001a      	movs	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a33      	ldr	r2, [pc, #204]	@ (8004bec <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004b20:	401a      	ands	r2, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a30      	ldr	r2, [pc, #192]	@ (8004bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004b2e:	401a      	ands	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004b3c:	401a      	ands	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a29      	ldr	r2, [pc, #164]	@ (8004bfc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004b58:	401a      	ands	r2, r3
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a26      	ldr	r2, [pc, #152]	@ (8004c00 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004b66:	401a      	ands	r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a24      	ldr	r2, [pc, #144]	@ (8004c04 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004b74:	401a      	ands	r2, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a21      	ldr	r2, [pc, #132]	@ (8004c08 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004b84:	401a      	ands	r2, r3
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1e      	ldr	r2, [pc, #120]	@ (8004c0c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d11c      	bne.n	8004bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c10 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba2:	051b      	lsls	r3, r3, #20
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a1a      	ldr	r2, [pc, #104]	@ (8004c14 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004bac:	401a      	ands	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004bba:	401a      	ands	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	@ (8004c1c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004bc8:	401a      	ands	r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	223c      	movs	r2, #60	@ 0x3c
 8004bde:	2100      	movs	r1, #0
 8004be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b004      	add	sp, #16
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	fffffcff 	.word	0xfffffcff
 8004bf0:	fffffbff 	.word	0xfffffbff
 8004bf4:	fffff7ff 	.word	0xfffff7ff
 8004bf8:	ffffefff 	.word	0xffffefff
 8004bfc:	ffffdfff 	.word	0xffffdfff
 8004c00:	ffffbfff 	.word	0xffffbfff
 8004c04:	fff0ffff 	.word	0xfff0ffff
 8004c08:	efffffff 	.word	0xefffffff
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	ff0fffff 	.word	0xff0fffff
 8004c14:	feffffff 	.word	0xfeffffff
 8004c18:	fdffffff 	.word	0xfdffffff
 8004c1c:	dfffffff 	.word	0xdfffffff

08004c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e046      	b.n	8004cc0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2288      	movs	r2, #136	@ 0x88
 8004c36:	589b      	ldr	r3, [r3, r2]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2284      	movs	r2, #132	@ 0x84
 8004c40:	2100      	movs	r1, #0
 8004c42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7fc fc58 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2288      	movs	r2, #136	@ 0x88
 8004c50:	2124      	movs	r1, #36	@ 0x24
 8004c52:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2101      	movs	r1, #1
 8004c60:	438a      	bics	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 fc74 	bl	800555c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f9b2 	bl	8004fe0 <UART_SetConfig>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e01c      	b.n	8004cc0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	490d      	ldr	r1, [pc, #52]	@ (8004cc8 <HAL_UART_Init+0xa8>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	212a      	movs	r1, #42	@ 0x2a
 8004ca2:	438a      	bics	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 fd03 	bl	80056c4 <UART_CheckIdleState>
 8004cbe:	0003      	movs	r3, r0
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	ffffb7ff 	.word	0xffffb7ff

08004ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2288      	movs	r2, #136	@ 0x88
 8004ce0:	589b      	ldr	r3, [r3, r2]
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d000      	beq.n	8004ce8 <HAL_UART_Transmit+0x1c>
 8004ce6:	e090      	b.n	8004e0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_UART_Transmit+0x2a>
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e088      	b.n	8004e0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d109      	bne.n	8004d1a <HAL_UART_Transmit+0x4e>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d105      	bne.n	8004d1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2201      	movs	r2, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	d001      	beq.n	8004d1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e078      	b.n	8004e0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2290      	movs	r2, #144	@ 0x90
 8004d1e:	2100      	movs	r1, #0
 8004d20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2288      	movs	r2, #136	@ 0x88
 8004d26:	2121      	movs	r1, #33	@ 0x21
 8004d28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fd43 	bl	80017b4 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1dba      	adds	r2, r7, #6
 8004d36:	2154      	movs	r1, #84	@ 0x54
 8004d38:	8812      	ldrh	r2, [r2, #0]
 8004d3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1dba      	adds	r2, r7, #6
 8004d40:	2156      	movs	r1, #86	@ 0x56
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	2380      	movs	r3, #128	@ 0x80
 8004d4c:	015b      	lsls	r3, r3, #5
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d108      	bne.n	8004d64 <HAL_UART_Transmit+0x98>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e003      	b.n	8004d6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d6c:	e030      	b.n	8004dd0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	0013      	movs	r3, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2180      	movs	r1, #128	@ 0x80
 8004d7c:	f000 fd4c 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 8004d80:	1e03      	subs	r3, r0, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2288      	movs	r2, #136	@ 0x88
 8004d88:	2120      	movs	r1, #32
 8004d8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e03d      	b.n	8004e0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	05d2      	lsls	r2, r2, #23
 8004da2:	0dd2      	lsrs	r2, r2, #23
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	3302      	adds	r3, #2
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	e007      	b.n	8004dbe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2256      	movs	r2, #86	@ 0x56
 8004dc2:	5a9b      	ldrh	r3, [r3, r2]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b299      	uxth	r1, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2256      	movs	r2, #86	@ 0x56
 8004dce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2256      	movs	r2, #86	@ 0x56
 8004dd4:	5a9b      	ldrh	r3, [r3, r2]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1c8      	bne.n	8004d6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	0013      	movs	r3, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	2140      	movs	r1, #64	@ 0x40
 8004dea:	f000 fd15 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 8004dee:	1e03      	subs	r3, r0, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2288      	movs	r2, #136	@ 0x88
 8004df6:	2120      	movs	r1, #32
 8004df8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2288      	movs	r2, #136	@ 0x88
 8004e02:	2120      	movs	r1, #32
 8004e04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b008      	add	sp, #32
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	@ 0x28
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	1dbb      	adds	r3, r7, #6
 8004e22:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	228c      	movs	r2, #140	@ 0x8c
 8004e28:	589b      	ldr	r3, [r3, r2]
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d000      	beq.n	8004e30 <HAL_UART_Receive+0x1c>
 8004e2e:	e0d0      	b.n	8004fd2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_UART_Receive+0x2a>
 8004e36:	1dbb      	adds	r3, r7, #6
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e0c8      	b.n	8004fd4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	2380      	movs	r3, #128	@ 0x80
 8004e48:	015b      	lsls	r3, r3, #5
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d109      	bne.n	8004e62 <HAL_UART_Receive+0x4e>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d001      	beq.n	8004e62 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e0b8      	b.n	8004fd4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2290      	movs	r2, #144	@ 0x90
 8004e66:	2100      	movs	r1, #0
 8004e68:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	228c      	movs	r2, #140	@ 0x8c
 8004e6e:	2122      	movs	r1, #34	@ 0x22
 8004e70:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e78:	f7fc fc9c 	bl	80017b4 <HAL_GetTick>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1dba      	adds	r2, r7, #6
 8004e84:	215c      	movs	r1, #92	@ 0x5c
 8004e86:	8812      	ldrh	r2, [r2, #0]
 8004e88:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1dba      	adds	r2, r7, #6
 8004e8e:	215e      	movs	r1, #94	@ 0x5e
 8004e90:	8812      	ldrh	r2, [r2, #0]
 8004e92:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	015b      	lsls	r3, r3, #5
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d10d      	bne.n	8004ebc <HAL_UART_Receive+0xa8>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_UART_Receive+0x9e>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2260      	movs	r2, #96	@ 0x60
 8004eac:	494b      	ldr	r1, [pc, #300]	@ (8004fdc <HAL_UART_Receive+0x1c8>)
 8004eae:	5299      	strh	r1, [r3, r2]
 8004eb0:	e02e      	b.n	8004f10 <HAL_UART_Receive+0xfc>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2260      	movs	r2, #96	@ 0x60
 8004eb6:	21ff      	movs	r1, #255	@ 0xff
 8004eb8:	5299      	strh	r1, [r3, r2]
 8004eba:	e029      	b.n	8004f10 <HAL_UART_Receive+0xfc>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_UART_Receive+0xcc>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <HAL_UART_Receive+0xc2>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2260      	movs	r2, #96	@ 0x60
 8004ed0:	21ff      	movs	r1, #255	@ 0xff
 8004ed2:	5299      	strh	r1, [r3, r2]
 8004ed4:	e01c      	b.n	8004f10 <HAL_UART_Receive+0xfc>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2260      	movs	r2, #96	@ 0x60
 8004eda:	217f      	movs	r1, #127	@ 0x7f
 8004edc:	5299      	strh	r1, [r3, r2]
 8004ede:	e017      	b.n	8004f10 <HAL_UART_Receive+0xfc>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	2380      	movs	r3, #128	@ 0x80
 8004ee6:	055b      	lsls	r3, r3, #21
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d10d      	bne.n	8004f08 <HAL_UART_Receive+0xf4>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d104      	bne.n	8004efe <HAL_UART_Receive+0xea>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2260      	movs	r2, #96	@ 0x60
 8004ef8:	217f      	movs	r1, #127	@ 0x7f
 8004efa:	5299      	strh	r1, [r3, r2]
 8004efc:	e008      	b.n	8004f10 <HAL_UART_Receive+0xfc>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2260      	movs	r2, #96	@ 0x60
 8004f02:	213f      	movs	r1, #63	@ 0x3f
 8004f04:	5299      	strh	r1, [r3, r2]
 8004f06:	e003      	b.n	8004f10 <HAL_UART_Receive+0xfc>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2260      	movs	r2, #96	@ 0x60
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004f10:	2312      	movs	r3, #18
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	2160      	movs	r1, #96	@ 0x60
 8004f18:	5a52      	ldrh	r2, [r2, r1]
 8004f1a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	2380      	movs	r3, #128	@ 0x80
 8004f22:	015b      	lsls	r3, r3, #5
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d108      	bne.n	8004f3a <HAL_UART_Receive+0x126>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	e003      	b.n	8004f42 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f42:	e03a      	b.n	8004fba <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	0013      	movs	r3, r2
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2120      	movs	r1, #32
 8004f52:	f000 fc61 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	228c      	movs	r2, #140	@ 0x8c
 8004f5e:	2120      	movs	r1, #32
 8004f60:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e036      	b.n	8004fd4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10e      	bne.n	8004f8a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2212      	movs	r2, #18
 8004f76:	18ba      	adds	r2, r7, r2
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	3302      	adds	r3, #2
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e00e      	b.n	8004fa8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2212      	movs	r2, #18
 8004f94:	18ba      	adds	r2, r7, r2
 8004f96:	8812      	ldrh	r2, [r2, #0]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	225e      	movs	r2, #94	@ 0x5e
 8004fac:	5a9b      	ldrh	r3, [r3, r2]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b299      	uxth	r1, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	225e      	movs	r2, #94	@ 0x5e
 8004fb8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	225e      	movs	r2, #94	@ 0x5e
 8004fbe:	5a9b      	ldrh	r3, [r3, r2]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1be      	bne.n	8004f44 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	228c      	movs	r2, #140	@ 0x8c
 8004fca:	2120      	movs	r1, #32
 8004fcc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b008      	add	sp, #32
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	000001ff 	.word	0x000001ff

08004fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	b5b0      	push	{r4, r5, r7, lr}
 8004fe2:	b090      	sub	sp, #64	@ 0x40
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe8:	231a      	movs	r3, #26
 8004fea:	2220      	movs	r2, #32
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	431a      	orrs	r2, r3
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	4313      	orrs	r3, r2
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4aaf      	ldr	r2, [pc, #700]	@ (80052d0 <UART_SetConfig+0x2f0>)
 8005014:	4013      	ands	r3, r2
 8005016:	0019      	movs	r1, r3
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501e:	430b      	orrs	r3, r1
 8005020:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4aaa      	ldr	r2, [pc, #680]	@ (80052d4 <UART_SetConfig+0x2f4>)
 800502a:	4013      	ands	r3, r2
 800502c:	0018      	movs	r0, r3
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	0003      	movs	r3, r0
 8005038:	430b      	orrs	r3, r1
 800503a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4aa4      	ldr	r2, [pc, #656]	@ (80052d8 <UART_SetConfig+0x2f8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005052:	4313      	orrs	r3, r2
 8005054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a9f      	ldr	r2, [pc, #636]	@ (80052dc <UART_SetConfig+0x2fc>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005068:	430b      	orrs	r3, r1
 800506a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	220f      	movs	r2, #15
 8005074:	4393      	bics	r3, r2
 8005076:	0018      	movs	r0, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	0003      	movs	r3, r0
 8005082:	430b      	orrs	r3, r1
 8005084:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a95      	ldr	r2, [pc, #596]	@ (80052e0 <UART_SetConfig+0x300>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d131      	bne.n	80050f4 <UART_SetConfig+0x114>
 8005090:	4b94      	ldr	r3, [pc, #592]	@ (80052e4 <UART_SetConfig+0x304>)
 8005092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005094:	2203      	movs	r2, #3
 8005096:	4013      	ands	r3, r2
 8005098:	2b03      	cmp	r3, #3
 800509a:	d01d      	beq.n	80050d8 <UART_SetConfig+0xf8>
 800509c:	d823      	bhi.n	80050e6 <UART_SetConfig+0x106>
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d00c      	beq.n	80050bc <UART_SetConfig+0xdc>
 80050a2:	d820      	bhi.n	80050e6 <UART_SetConfig+0x106>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <UART_SetConfig+0xce>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d00e      	beq.n	80050ca <UART_SetConfig+0xea>
 80050ac:	e01b      	b.n	80050e6 <UART_SetConfig+0x106>
 80050ae:	231b      	movs	r3, #27
 80050b0:	2220      	movs	r2, #32
 80050b2:	189b      	adds	r3, r3, r2
 80050b4:	19db      	adds	r3, r3, r7
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e0b4      	b.n	8005226 <UART_SetConfig+0x246>
 80050bc:	231b      	movs	r3, #27
 80050be:	2220      	movs	r2, #32
 80050c0:	189b      	adds	r3, r3, r2
 80050c2:	19db      	adds	r3, r3, r7
 80050c4:	2202      	movs	r2, #2
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e0ad      	b.n	8005226 <UART_SetConfig+0x246>
 80050ca:	231b      	movs	r3, #27
 80050cc:	2220      	movs	r2, #32
 80050ce:	189b      	adds	r3, r3, r2
 80050d0:	19db      	adds	r3, r3, r7
 80050d2:	2204      	movs	r2, #4
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	e0a6      	b.n	8005226 <UART_SetConfig+0x246>
 80050d8:	231b      	movs	r3, #27
 80050da:	2220      	movs	r2, #32
 80050dc:	189b      	adds	r3, r3, r2
 80050de:	19db      	adds	r3, r3, r7
 80050e0:	2208      	movs	r2, #8
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e09f      	b.n	8005226 <UART_SetConfig+0x246>
 80050e6:	231b      	movs	r3, #27
 80050e8:	2220      	movs	r2, #32
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	19db      	adds	r3, r3, r7
 80050ee:	2210      	movs	r2, #16
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e098      	b.n	8005226 <UART_SetConfig+0x246>
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a7b      	ldr	r2, [pc, #492]	@ (80052e8 <UART_SetConfig+0x308>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d131      	bne.n	8005162 <UART_SetConfig+0x182>
 80050fe:	4b79      	ldr	r3, [pc, #484]	@ (80052e4 <UART_SetConfig+0x304>)
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	220c      	movs	r2, #12
 8005104:	4013      	ands	r3, r2
 8005106:	2b0c      	cmp	r3, #12
 8005108:	d01d      	beq.n	8005146 <UART_SetConfig+0x166>
 800510a:	d823      	bhi.n	8005154 <UART_SetConfig+0x174>
 800510c:	2b08      	cmp	r3, #8
 800510e:	d00c      	beq.n	800512a <UART_SetConfig+0x14a>
 8005110:	d820      	bhi.n	8005154 <UART_SetConfig+0x174>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <UART_SetConfig+0x13c>
 8005116:	2b04      	cmp	r3, #4
 8005118:	d00e      	beq.n	8005138 <UART_SetConfig+0x158>
 800511a:	e01b      	b.n	8005154 <UART_SetConfig+0x174>
 800511c:	231b      	movs	r3, #27
 800511e:	2220      	movs	r2, #32
 8005120:	189b      	adds	r3, r3, r2
 8005122:	19db      	adds	r3, r3, r7
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e07d      	b.n	8005226 <UART_SetConfig+0x246>
 800512a:	231b      	movs	r3, #27
 800512c:	2220      	movs	r2, #32
 800512e:	189b      	adds	r3, r3, r2
 8005130:	19db      	adds	r3, r3, r7
 8005132:	2202      	movs	r2, #2
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e076      	b.n	8005226 <UART_SetConfig+0x246>
 8005138:	231b      	movs	r3, #27
 800513a:	2220      	movs	r2, #32
 800513c:	189b      	adds	r3, r3, r2
 800513e:	19db      	adds	r3, r3, r7
 8005140:	2204      	movs	r2, #4
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e06f      	b.n	8005226 <UART_SetConfig+0x246>
 8005146:	231b      	movs	r3, #27
 8005148:	2220      	movs	r2, #32
 800514a:	189b      	adds	r3, r3, r2
 800514c:	19db      	adds	r3, r3, r7
 800514e:	2208      	movs	r2, #8
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e068      	b.n	8005226 <UART_SetConfig+0x246>
 8005154:	231b      	movs	r3, #27
 8005156:	2220      	movs	r2, #32
 8005158:	189b      	adds	r3, r3, r2
 800515a:	19db      	adds	r3, r3, r7
 800515c:	2210      	movs	r2, #16
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e061      	b.n	8005226 <UART_SetConfig+0x246>
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a61      	ldr	r2, [pc, #388]	@ (80052ec <UART_SetConfig+0x30c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d106      	bne.n	800517a <UART_SetConfig+0x19a>
 800516c:	231b      	movs	r3, #27
 800516e:	2220      	movs	r2, #32
 8005170:	189b      	adds	r3, r3, r2
 8005172:	19db      	adds	r3, r3, r7
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	e055      	b.n	8005226 <UART_SetConfig+0x246>
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5c      	ldr	r2, [pc, #368]	@ (80052f0 <UART_SetConfig+0x310>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d106      	bne.n	8005192 <UART_SetConfig+0x1b2>
 8005184:	231b      	movs	r3, #27
 8005186:	2220      	movs	r2, #32
 8005188:	189b      	adds	r3, r3, r2
 800518a:	19db      	adds	r3, r3, r7
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e049      	b.n	8005226 <UART_SetConfig+0x246>
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a50      	ldr	r2, [pc, #320]	@ (80052d8 <UART_SetConfig+0x2f8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d13e      	bne.n	800521a <UART_SetConfig+0x23a>
 800519c:	4b51      	ldr	r3, [pc, #324]	@ (80052e4 <UART_SetConfig+0x304>)
 800519e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051a0:	23c0      	movs	r3, #192	@ 0xc0
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	4013      	ands	r3, r2
 80051a6:	22c0      	movs	r2, #192	@ 0xc0
 80051a8:	0112      	lsls	r2, r2, #4
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d027      	beq.n	80051fe <UART_SetConfig+0x21e>
 80051ae:	22c0      	movs	r2, #192	@ 0xc0
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d82a      	bhi.n	800520c <UART_SetConfig+0x22c>
 80051b6:	2280      	movs	r2, #128	@ 0x80
 80051b8:	0112      	lsls	r2, r2, #4
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d011      	beq.n	80051e2 <UART_SetConfig+0x202>
 80051be:	2280      	movs	r2, #128	@ 0x80
 80051c0:	0112      	lsls	r2, r2, #4
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d822      	bhi.n	800520c <UART_SetConfig+0x22c>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <UART_SetConfig+0x1f4>
 80051ca:	2280      	movs	r2, #128	@ 0x80
 80051cc:	00d2      	lsls	r2, r2, #3
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <UART_SetConfig+0x210>
 80051d2:	e01b      	b.n	800520c <UART_SetConfig+0x22c>
 80051d4:	231b      	movs	r3, #27
 80051d6:	2220      	movs	r2, #32
 80051d8:	189b      	adds	r3, r3, r2
 80051da:	19db      	adds	r3, r3, r7
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	e021      	b.n	8005226 <UART_SetConfig+0x246>
 80051e2:	231b      	movs	r3, #27
 80051e4:	2220      	movs	r2, #32
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	19db      	adds	r3, r3, r7
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e01a      	b.n	8005226 <UART_SetConfig+0x246>
 80051f0:	231b      	movs	r3, #27
 80051f2:	2220      	movs	r2, #32
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	19db      	adds	r3, r3, r7
 80051f8:	2204      	movs	r2, #4
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e013      	b.n	8005226 <UART_SetConfig+0x246>
 80051fe:	231b      	movs	r3, #27
 8005200:	2220      	movs	r2, #32
 8005202:	189b      	adds	r3, r3, r2
 8005204:	19db      	adds	r3, r3, r7
 8005206:	2208      	movs	r2, #8
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e00c      	b.n	8005226 <UART_SetConfig+0x246>
 800520c:	231b      	movs	r3, #27
 800520e:	2220      	movs	r2, #32
 8005210:	189b      	adds	r3, r3, r2
 8005212:	19db      	adds	r3, r3, r7
 8005214:	2210      	movs	r2, #16
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e005      	b.n	8005226 <UART_SetConfig+0x246>
 800521a:	231b      	movs	r3, #27
 800521c:	2220      	movs	r2, #32
 800521e:	189b      	adds	r3, r3, r2
 8005220:	19db      	adds	r3, r3, r7
 8005222:	2210      	movs	r2, #16
 8005224:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2b      	ldr	r2, [pc, #172]	@ (80052d8 <UART_SetConfig+0x2f8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d000      	beq.n	8005232 <UART_SetConfig+0x252>
 8005230:	e0a9      	b.n	8005386 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005232:	231b      	movs	r3, #27
 8005234:	2220      	movs	r2, #32
 8005236:	189b      	adds	r3, r3, r2
 8005238:	19db      	adds	r3, r3, r7
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b08      	cmp	r3, #8
 800523e:	d015      	beq.n	800526c <UART_SetConfig+0x28c>
 8005240:	dc18      	bgt.n	8005274 <UART_SetConfig+0x294>
 8005242:	2b04      	cmp	r3, #4
 8005244:	d00d      	beq.n	8005262 <UART_SetConfig+0x282>
 8005246:	dc15      	bgt.n	8005274 <UART_SetConfig+0x294>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <UART_SetConfig+0x272>
 800524c:	2b02      	cmp	r3, #2
 800524e:	d005      	beq.n	800525c <UART_SetConfig+0x27c>
 8005250:	e010      	b.n	8005274 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005252:	f7fe fc55 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8005256:	0003      	movs	r3, r0
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800525a:	e014      	b.n	8005286 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800525c:	4b25      	ldr	r3, [pc, #148]	@ (80052f4 <UART_SetConfig+0x314>)
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005260:	e011      	b.n	8005286 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005262:	f7fe fbc1 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8005266:	0003      	movs	r3, r0
 8005268:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800526a:	e00c      	b.n	8005286 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005272:	e008      	b.n	8005286 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005278:	231a      	movs	r3, #26
 800527a:	2220      	movs	r2, #32
 800527c:	189b      	adds	r3, r3, r2
 800527e:	19db      	adds	r3, r3, r7
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
        break;
 8005284:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005288:	2b00      	cmp	r3, #0
 800528a:	d100      	bne.n	800528e <UART_SetConfig+0x2ae>
 800528c:	e14b      	b.n	8005526 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005292:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <UART_SetConfig+0x318>)
 8005294:	0052      	lsls	r2, r2, #1
 8005296:	5ad3      	ldrh	r3, [r2, r3]
 8005298:	0019      	movs	r1, r3
 800529a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800529c:	f7fa ff44 	bl	8000128 <__udivsi3>
 80052a0:	0003      	movs	r3, r0
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	0013      	movs	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	189b      	adds	r3, r3, r2
 80052ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d305      	bcc.n	80052c0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052bc:	429a      	cmp	r2, r3
 80052be:	d91d      	bls.n	80052fc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80052c0:	231a      	movs	r3, #26
 80052c2:	2220      	movs	r2, #32
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	19db      	adds	r3, r3, r7
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	e12b      	b.n	8005526 <UART_SetConfig+0x546>
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	cfff69f3 	.word	0xcfff69f3
 80052d4:	ffffcfff 	.word	0xffffcfff
 80052d8:	40008000 	.word	0x40008000
 80052dc:	11fff4ff 	.word	0x11fff4ff
 80052e0:	40013800 	.word	0x40013800
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40004400 	.word	0x40004400
 80052ec:	40004800 	.word	0x40004800
 80052f0:	40004c00 	.word	0x40004c00
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	0800665c 	.word	0x0800665c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005308:	4b92      	ldr	r3, [pc, #584]	@ (8005554 <UART_SetConfig+0x574>)
 800530a:	0052      	lsls	r2, r2, #1
 800530c:	5ad3      	ldrh	r3, [r2, r3]
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	2300      	movs	r3, #0
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	69b8      	ldr	r0, [r7, #24]
 800531a:	69f9      	ldr	r1, [r7, #28]
 800531c:	f7fb f87a 	bl	8000414 <__aeabi_uldivmod>
 8005320:	0002      	movs	r2, r0
 8005322:	000b      	movs	r3, r1
 8005324:	0e11      	lsrs	r1, r2, #24
 8005326:	021d      	lsls	r5, r3, #8
 8005328:	430d      	orrs	r5, r1
 800532a:	0214      	lsls	r4, r2, #8
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68b8      	ldr	r0, [r7, #8]
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	1900      	adds	r0, r0, r4
 800533e:	4169      	adcs	r1, r5
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	603b      	str	r3, [r7, #0]
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f7fb f861 	bl	8000414 <__aeabi_uldivmod>
 8005352:	0002      	movs	r2, r0
 8005354:	000b      	movs	r3, r1
 8005356:	0013      	movs	r3, r2
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800535a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800535c:	23c0      	movs	r3, #192	@ 0xc0
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	429a      	cmp	r2, r3
 8005362:	d309      	bcc.n	8005378 <UART_SetConfig+0x398>
 8005364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005366:	2380      	movs	r3, #128	@ 0x80
 8005368:	035b      	lsls	r3, r3, #13
 800536a:	429a      	cmp	r2, r3
 800536c:	d204      	bcs.n	8005378 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	e0d6      	b.n	8005526 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005378:	231a      	movs	r3, #26
 800537a:	2220      	movs	r2, #32
 800537c:	189b      	adds	r3, r3, r2
 800537e:	19db      	adds	r3, r3, r7
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e0cf      	b.n	8005526 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	69da      	ldr	r2, [r3, #28]
 800538a:	2380      	movs	r3, #128	@ 0x80
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	429a      	cmp	r2, r3
 8005390:	d000      	beq.n	8005394 <UART_SetConfig+0x3b4>
 8005392:	e070      	b.n	8005476 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005394:	231b      	movs	r3, #27
 8005396:	2220      	movs	r2, #32
 8005398:	189b      	adds	r3, r3, r2
 800539a:	19db      	adds	r3, r3, r7
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d015      	beq.n	80053ce <UART_SetConfig+0x3ee>
 80053a2:	dc18      	bgt.n	80053d6 <UART_SetConfig+0x3f6>
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d00d      	beq.n	80053c4 <UART_SetConfig+0x3e4>
 80053a8:	dc15      	bgt.n	80053d6 <UART_SetConfig+0x3f6>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <UART_SetConfig+0x3d4>
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d005      	beq.n	80053be <UART_SetConfig+0x3de>
 80053b2:	e010      	b.n	80053d6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe fba4 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 80053b8:	0003      	movs	r3, r0
 80053ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053bc:	e014      	b.n	80053e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053be:	4b66      	ldr	r3, [pc, #408]	@ (8005558 <UART_SetConfig+0x578>)
 80053c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053c2:	e011      	b.n	80053e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c4:	f7fe fb10 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80053c8:	0003      	movs	r3, r0
 80053ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053cc:	e00c      	b.n	80053e8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053d4:	e008      	b.n	80053e8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80053da:	231a      	movs	r3, #26
 80053dc:	2220      	movs	r2, #32
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	19db      	adds	r3, r3, r7
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
        break;
 80053e6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d100      	bne.n	80053f0 <UART_SetConfig+0x410>
 80053ee:	e09a      	b.n	8005526 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f4:	4b57      	ldr	r3, [pc, #348]	@ (8005554 <UART_SetConfig+0x574>)
 80053f6:	0052      	lsls	r2, r2, #1
 80053f8:	5ad3      	ldrh	r3, [r2, r3]
 80053fa:	0019      	movs	r1, r3
 80053fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80053fe:	f7fa fe93 	bl	8000128 <__udivsi3>
 8005402:	0003      	movs	r3, r0
 8005404:	005a      	lsls	r2, r3, #1
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	18d2      	adds	r2, r2, r3
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	0019      	movs	r1, r3
 8005414:	0010      	movs	r0, r2
 8005416:	f7fa fe87 	bl	8000128 <__udivsi3>
 800541a:	0003      	movs	r3, r0
 800541c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	2b0f      	cmp	r3, #15
 8005422:	d921      	bls.n	8005468 <UART_SetConfig+0x488>
 8005424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005426:	2380      	movs	r3, #128	@ 0x80
 8005428:	025b      	lsls	r3, r3, #9
 800542a:	429a      	cmp	r2, r3
 800542c:	d21c      	bcs.n	8005468 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	b29a      	uxth	r2, r3
 8005432:	200e      	movs	r0, #14
 8005434:	2420      	movs	r4, #32
 8005436:	1903      	adds	r3, r0, r4
 8005438:	19db      	adds	r3, r3, r7
 800543a:	210f      	movs	r1, #15
 800543c:	438a      	bics	r2, r1
 800543e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	b29b      	uxth	r3, r3
 8005446:	2207      	movs	r2, #7
 8005448:	4013      	ands	r3, r2
 800544a:	b299      	uxth	r1, r3
 800544c:	1903      	adds	r3, r0, r4
 800544e:	19db      	adds	r3, r3, r7
 8005450:	1902      	adds	r2, r0, r4
 8005452:	19d2      	adds	r2, r2, r7
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1902      	adds	r2, r0, r4
 8005460:	19d2      	adds	r2, r2, r7
 8005462:	8812      	ldrh	r2, [r2, #0]
 8005464:	60da      	str	r2, [r3, #12]
 8005466:	e05e      	b.n	8005526 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005468:	231a      	movs	r3, #26
 800546a:	2220      	movs	r2, #32
 800546c:	189b      	adds	r3, r3, r2
 800546e:	19db      	adds	r3, r3, r7
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e057      	b.n	8005526 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005476:	231b      	movs	r3, #27
 8005478:	2220      	movs	r2, #32
 800547a:	189b      	adds	r3, r3, r2
 800547c:	19db      	adds	r3, r3, r7
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d015      	beq.n	80054b0 <UART_SetConfig+0x4d0>
 8005484:	dc18      	bgt.n	80054b8 <UART_SetConfig+0x4d8>
 8005486:	2b04      	cmp	r3, #4
 8005488:	d00d      	beq.n	80054a6 <UART_SetConfig+0x4c6>
 800548a:	dc15      	bgt.n	80054b8 <UART_SetConfig+0x4d8>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <UART_SetConfig+0x4b6>
 8005490:	2b02      	cmp	r3, #2
 8005492:	d005      	beq.n	80054a0 <UART_SetConfig+0x4c0>
 8005494:	e010      	b.n	80054b8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005496:	f7fe fb33 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 800549a:	0003      	movs	r3, r0
 800549c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800549e:	e014      	b.n	80054ca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005558 <UART_SetConfig+0x578>)
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054a4:	e011      	b.n	80054ca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a6:	f7fe fa9f 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80054aa:	0003      	movs	r3, r0
 80054ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054ae:	e00c      	b.n	80054ca <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054b6:	e008      	b.n	80054ca <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80054bc:	231a      	movs	r3, #26
 80054be:	2220      	movs	r2, #32
 80054c0:	189b      	adds	r3, r3, r2
 80054c2:	19db      	adds	r3, r3, r7
 80054c4:	2201      	movs	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
        break;
 80054c8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80054ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02a      	beq.n	8005526 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005554 <UART_SetConfig+0x574>)
 80054d6:	0052      	lsls	r2, r2, #1
 80054d8:	5ad3      	ldrh	r3, [r2, r3]
 80054da:	0019      	movs	r1, r3
 80054dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80054de:	f7fa fe23 	bl	8000128 <__udivsi3>
 80054e2:	0003      	movs	r3, r0
 80054e4:	001a      	movs	r2, r3
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	18d2      	adds	r2, r2, r3
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	0019      	movs	r1, r3
 80054f4:	0010      	movs	r0, r2
 80054f6:	f7fa fe17 	bl	8000128 <__udivsi3>
 80054fa:	0003      	movs	r3, r0
 80054fc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	2b0f      	cmp	r3, #15
 8005502:	d90a      	bls.n	800551a <UART_SetConfig+0x53a>
 8005504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005506:	2380      	movs	r3, #128	@ 0x80
 8005508:	025b      	lsls	r3, r3, #9
 800550a:	429a      	cmp	r2, r3
 800550c:	d205      	bcs.n	800551a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	b29a      	uxth	r2, r3
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	e005      	b.n	8005526 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800551a:	231a      	movs	r3, #26
 800551c:	2220      	movs	r2, #32
 800551e:	189b      	adds	r3, r3, r2
 8005520:	19db      	adds	r3, r3, r7
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	226a      	movs	r2, #106	@ 0x6a
 800552a:	2101      	movs	r1, #1
 800552c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	2268      	movs	r2, #104	@ 0x68
 8005532:	2101      	movs	r1, #1
 8005534:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	2200      	movs	r2, #0
 800553a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	2200      	movs	r2, #0
 8005540:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005542:	231a      	movs	r3, #26
 8005544:	2220      	movs	r2, #32
 8005546:	189b      	adds	r3, r3, r2
 8005548:	19db      	adds	r3, r3, r7
 800554a:	781b      	ldrb	r3, [r3, #0]
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b010      	add	sp, #64	@ 0x40
 8005552:	bdb0      	pop	{r4, r5, r7, pc}
 8005554:	0800665c 	.word	0x0800665c
 8005558:	00f42400 	.word	0x00f42400

0800555c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005568:	2208      	movs	r2, #8
 800556a:	4013      	ands	r3, r2
 800556c:	d00b      	beq.n	8005586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a4a      	ldr	r2, [pc, #296]	@ (80056a0 <UART_AdvFeatureConfig+0x144>)
 8005576:	4013      	ands	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	2201      	movs	r2, #1
 800558c:	4013      	ands	r3, r2
 800558e:	d00b      	beq.n	80055a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4a43      	ldr	r2, [pc, #268]	@ (80056a4 <UART_AdvFeatureConfig+0x148>)
 8005598:	4013      	ands	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	2202      	movs	r2, #2
 80055ae:	4013      	ands	r3, r2
 80055b0:	d00b      	beq.n	80055ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a3b      	ldr	r2, [pc, #236]	@ (80056a8 <UART_AdvFeatureConfig+0x14c>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	2204      	movs	r2, #4
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00b      	beq.n	80055ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a34      	ldr	r2, [pc, #208]	@ (80056ac <UART_AdvFeatureConfig+0x150>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	2210      	movs	r2, #16
 80055f2:	4013      	ands	r3, r2
 80055f4:	d00b      	beq.n	800560e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a2c      	ldr	r2, [pc, #176]	@ (80056b0 <UART_AdvFeatureConfig+0x154>)
 80055fe:	4013      	ands	r3, r2
 8005600:	0019      	movs	r1, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	2220      	movs	r2, #32
 8005614:	4013      	ands	r3, r2
 8005616:	d00b      	beq.n	8005630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	4a25      	ldr	r2, [pc, #148]	@ (80056b4 <UART_AdvFeatureConfig+0x158>)
 8005620:	4013      	ands	r3, r2
 8005622:	0019      	movs	r1, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	2240      	movs	r2, #64	@ 0x40
 8005636:	4013      	ands	r3, r2
 8005638:	d01d      	beq.n	8005676 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a1d      	ldr	r2, [pc, #116]	@ (80056b8 <UART_AdvFeatureConfig+0x15c>)
 8005642:	4013      	ands	r3, r2
 8005644:	0019      	movs	r1, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	035b      	lsls	r3, r3, #13
 800565a:	429a      	cmp	r2, r3
 800565c:	d10b      	bne.n	8005676 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a15      	ldr	r2, [pc, #84]	@ (80056bc <UART_AdvFeatureConfig+0x160>)
 8005666:	4013      	ands	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	2280      	movs	r2, #128	@ 0x80
 800567c:	4013      	ands	r3, r2
 800567e:	d00b      	beq.n	8005698 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4a0e      	ldr	r2, [pc, #56]	@ (80056c0 <UART_AdvFeatureConfig+0x164>)
 8005688:	4013      	ands	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	ffff7fff 	.word	0xffff7fff
 80056a4:	fffdffff 	.word	0xfffdffff
 80056a8:	fffeffff 	.word	0xfffeffff
 80056ac:	fffbffff 	.word	0xfffbffff
 80056b0:	ffffefff 	.word	0xffffefff
 80056b4:	ffffdfff 	.word	0xffffdfff
 80056b8:	ffefffff 	.word	0xffefffff
 80056bc:	ff9fffff 	.word	0xff9fffff
 80056c0:	fff7ffff 	.word	0xfff7ffff

080056c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b092      	sub	sp, #72	@ 0x48
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2290      	movs	r2, #144	@ 0x90
 80056d0:	2100      	movs	r1, #0
 80056d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056d4:	f7fc f86e 	bl	80017b4 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2208      	movs	r2, #8
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d12d      	bne.n	8005746 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	2280      	movs	r2, #128	@ 0x80
 80056ee:	0391      	lsls	r1, r2, #14
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4a47      	ldr	r2, [pc, #284]	@ (8005810 <UART_CheckIdleState+0x14c>)
 80056f4:	9200      	str	r2, [sp, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f000 f88e 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d022      	beq.n	8005746 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005700:	f3ef 8310 	mrs	r3, PRIMASK
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800570a:	2301      	movs	r3, #1
 800570c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			@ (mov r8, r8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2180      	movs	r1, #128	@ 0x80
 8005722:	438a      	bics	r2, r1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	f383 8810 	msr	PRIMASK, r3
}
 8005730:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2288      	movs	r2, #136	@ 0x88
 8005736:	2120      	movs	r1, #32
 8005738:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2284      	movs	r2, #132	@ 0x84
 800573e:	2100      	movs	r1, #0
 8005740:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e060      	b.n	8005808 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2204      	movs	r2, #4
 800574e:	4013      	ands	r3, r2
 8005750:	2b04      	cmp	r3, #4
 8005752:	d146      	bne.n	80057e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005756:	2280      	movs	r2, #128	@ 0x80
 8005758:	03d1      	lsls	r1, r2, #15
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4a2c      	ldr	r2, [pc, #176]	@ (8005810 <UART_CheckIdleState+0x14c>)
 800575e:	9200      	str	r2, [sp, #0]
 8005760:	2200      	movs	r2, #0
 8005762:	f000 f859 	bl	8005818 <UART_WaitOnFlagUntilTimeout>
 8005766:	1e03      	subs	r3, r0, #0
 8005768:	d03b      	beq.n	80057e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576a:	f3ef 8310 	mrs	r3, PRIMASK
 800576e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005770:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005772:	637b      	str	r3, [r7, #52]	@ 0x34
 8005774:	2301      	movs	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4922      	ldr	r1, [pc, #136]	@ (8005814 <UART_CheckIdleState+0x150>)
 800578c:	400a      	ands	r2, r1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f383 8810 	msr	PRIMASK, r3
}
 800579a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579c:	f3ef 8310 	mrs	r3, PRIMASK
 80057a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80057a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80057a6:	2301      	movs	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			@ (mov r8, r8)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2101      	movs	r1, #1
 80057be:	438a      	bics	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	228c      	movs	r2, #140	@ 0x8c
 80057d2:	2120      	movs	r1, #32
 80057d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2284      	movs	r2, #132	@ 0x84
 80057da:	2100      	movs	r1, #0
 80057dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e012      	b.n	8005808 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2288      	movs	r2, #136	@ 0x88
 80057e6:	2120      	movs	r1, #32
 80057e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	228c      	movs	r2, #140	@ 0x8c
 80057ee:	2120      	movs	r1, #32
 80057f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2284      	movs	r2, #132	@ 0x84
 8005802:	2100      	movs	r1, #0
 8005804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b010      	add	sp, #64	@ 0x40
 800580e:	bd80      	pop	{r7, pc}
 8005810:	01ffffff 	.word	0x01ffffff
 8005814:	fffffedf 	.word	0xfffffedf

08005818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	1dfb      	adds	r3, r7, #7
 8005826:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005828:	e051      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	3301      	adds	r3, #1
 800582e:	d04e      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fb ffc0 	bl	80017b4 <HAL_GetTick>
 8005834:	0002      	movs	r2, r0
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e051      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2204      	movs	r2, #4
 8005852:	4013      	ands	r3, r2
 8005854:	d03b      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b80      	cmp	r3, #128	@ 0x80
 800585a:	d038      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b40      	cmp	r3, #64	@ 0x40
 8005860:	d035      	beq.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	2208      	movs	r2, #8
 800586a:	4013      	ands	r3, r2
 800586c:	2b08      	cmp	r3, #8
 800586e:	d111      	bne.n	8005894 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2208      	movs	r2, #8
 8005876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 f83c 	bl	80058f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2290      	movs	r2, #144	@ 0x90
 8005884:	2108      	movs	r1, #8
 8005886:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2284      	movs	r2, #132	@ 0x84
 800588c:	2100      	movs	r1, #0
 800588e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e02c      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69da      	ldr	r2, [r3, #28]
 800589a:	2380      	movs	r3, #128	@ 0x80
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	401a      	ands	r2, r3
 80058a0:	2380      	movs	r3, #128	@ 0x80
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d112      	bne.n	80058ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2280      	movs	r2, #128	@ 0x80
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 f81f 	bl	80058f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2290      	movs	r2, #144	@ 0x90
 80058be:	2120      	movs	r1, #32
 80058c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2284      	movs	r2, #132	@ 0x84
 80058c6:	2100      	movs	r1, #0
 80058c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e00f      	b.n	80058ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	425a      	negs	r2, r3
 80058de:	4153      	adcs	r3, r2
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	001a      	movs	r2, r3
 80058e4:	1dfb      	adds	r3, r7, #7
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d09e      	beq.n	800582a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b004      	add	sp, #16
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08e      	sub	sp, #56	@ 0x38
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005900:	f3ef 8310 	mrs	r3, PRIMASK
 8005904:	617b      	str	r3, [r7, #20]
  return(result);
 8005906:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005908:	637b      	str	r3, [r7, #52]	@ 0x34
 800590a:	2301      	movs	r3, #1
 800590c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f383 8810 	msr	PRIMASK, r3
}
 8005914:	46c0      	nop			@ (mov r8, r8)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4926      	ldr	r1, [pc, #152]	@ (80059bc <UART_EndRxTransfer+0xc4>)
 8005922:	400a      	ands	r2, r1
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f383 8810 	msr	PRIMASK, r3
}
 8005930:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005932:	f3ef 8310 	mrs	r3, PRIMASK
 8005936:	623b      	str	r3, [r7, #32]
  return(result);
 8005938:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800593a:	633b      	str	r3, [r7, #48]	@ 0x30
 800593c:	2301      	movs	r3, #1
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	f383 8810 	msr	PRIMASK, r3
}
 8005946:	46c0      	nop			@ (mov r8, r8)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	491b      	ldr	r1, [pc, #108]	@ (80059c0 <UART_EndRxTransfer+0xc8>)
 8005954:	400a      	ands	r2, r1
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	f383 8810 	msr	PRIMASK, r3
}
 8005962:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d118      	bne.n	800599e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596c:	f3ef 8310 	mrs	r3, PRIMASK
 8005970:	60bb      	str	r3, [r7, #8]
  return(result);
 8005972:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005976:	2301      	movs	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f383 8810 	msr	PRIMASK, r3
}
 8005980:	46c0      	nop			@ (mov r8, r8)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2110      	movs	r1, #16
 800598e:	438a      	bics	r2, r1
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f383 8810 	msr	PRIMASK, r3
}
 800599c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	228c      	movs	r2, #140	@ 0x8c
 80059a2:	2120      	movs	r1, #32
 80059a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b00e      	add	sp, #56	@ 0x38
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	fffffedf 	.word	0xfffffedf
 80059c0:	effffffe 	.word	0xeffffffe

080059c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2284      	movs	r2, #132	@ 0x84
 80059d0:	5c9b      	ldrb	r3, [r3, r2]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_UARTEx_DisableFifoMode+0x16>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e027      	b.n	8005a2a <HAL_UARTEx_DisableFifoMode+0x66>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2284      	movs	r2, #132	@ 0x84
 80059de:	2101      	movs	r1, #1
 80059e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2288      	movs	r2, #136	@ 0x88
 80059e6:	2124      	movs	r1, #36	@ 0x24
 80059e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2101      	movs	r1, #1
 80059fe:	438a      	bics	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a0b      	ldr	r2, [pc, #44]	@ (8005a34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2288      	movs	r2, #136	@ 0x88
 8005a1c:	2120      	movs	r1, #32
 8005a1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2284      	movs	r2, #132	@ 0x84
 8005a24:	2100      	movs	r1, #0
 8005a26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b004      	add	sp, #16
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	dfffffff 	.word	0xdfffffff

08005a38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2284      	movs	r2, #132	@ 0x84
 8005a46:	5c9b      	ldrb	r3, [r3, r2]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e02e      	b.n	8005aae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2284      	movs	r2, #132	@ 0x84
 8005a54:	2101      	movs	r1, #1
 8005a56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2288      	movs	r2, #136	@ 0x88
 8005a5c:	2124      	movs	r1, #36	@ 0x24
 8005a5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2101      	movs	r1, #1
 8005a74:	438a      	bics	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	08d9      	lsrs	r1, r3, #3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f000 f854 	bl	8005b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2288      	movs	r2, #136	@ 0x88
 8005aa0:	2120      	movs	r1, #32
 8005aa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2284      	movs	r2, #132	@ 0x84
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b004      	add	sp, #16
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2284      	movs	r2, #132	@ 0x84
 8005ac6:	5c9b      	ldrb	r3, [r3, r2]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e02f      	b.n	8005b30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2284      	movs	r2, #132	@ 0x84
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2288      	movs	r2, #136	@ 0x88
 8005adc:	2124      	movs	r1, #36	@ 0x24
 8005ade:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2101      	movs	r1, #1
 8005af4:	438a      	bics	r2, r1
 8005af6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	4a0e      	ldr	r2, [pc, #56]	@ (8005b38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 f813 	bl	8005b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2288      	movs	r2, #136	@ 0x88
 8005b22:	2120      	movs	r1, #32
 8005b24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2284      	movs	r2, #132	@ 0x84
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b004      	add	sp, #16
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	f1ffffff 	.word	0xf1ffffff

08005b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	226a      	movs	r2, #106	@ 0x6a
 8005b50:	2101      	movs	r1, #1
 8005b52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2268      	movs	r2, #104	@ 0x68
 8005b58:	2101      	movs	r1, #1
 8005b5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b5c:	e043      	b.n	8005be6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b5e:	260f      	movs	r6, #15
 8005b60:	19bb      	adds	r3, r7, r6
 8005b62:	2208      	movs	r2, #8
 8005b64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b66:	200e      	movs	r0, #14
 8005b68:	183b      	adds	r3, r7, r0
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	0e5b      	lsrs	r3, r3, #25
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	240d      	movs	r4, #13
 8005b7a:	193b      	adds	r3, r7, r4
 8005b7c:	2107      	movs	r1, #7
 8005b7e:	400a      	ands	r2, r1
 8005b80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	0f5b      	lsrs	r3, r3, #29
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	250c      	movs	r5, #12
 8005b8e:	197b      	adds	r3, r7, r5
 8005b90:	2107      	movs	r1, #7
 8005b92:	400a      	ands	r2, r1
 8005b94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b96:	183b      	adds	r3, r7, r0
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	197a      	adds	r2, r7, r5
 8005b9c:	7812      	ldrb	r2, [r2, #0]
 8005b9e:	4914      	ldr	r1, [pc, #80]	@ (8005bf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ba0:	5c8a      	ldrb	r2, [r1, r2]
 8005ba2:	435a      	muls	r2, r3
 8005ba4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ba6:	197b      	adds	r3, r7, r5
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	4a12      	ldr	r2, [pc, #72]	@ (8005bf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005bac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bae:	0019      	movs	r1, r3
 8005bb0:	f7fa fb44 	bl	800023c <__divsi3>
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	b299      	uxth	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	226a      	movs	r2, #106	@ 0x6a
 8005bbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bbe:	19bb      	adds	r3, r7, r6
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	193a      	adds	r2, r7, r4
 8005bc4:	7812      	ldrb	r2, [r2, #0]
 8005bc6:	490a      	ldr	r1, [pc, #40]	@ (8005bf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bc8:	5c8a      	ldrb	r2, [r1, r2]
 8005bca:	435a      	muls	r2, r3
 8005bcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bce:	193b      	adds	r3, r7, r4
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4a08      	ldr	r2, [pc, #32]	@ (8005bf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8005bd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	f7fa fb30 	bl	800023c <__divsi3>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	b299      	uxth	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2268      	movs	r2, #104	@ 0x68
 8005be4:	5299      	strh	r1, [r3, r2]
}
 8005be6:	46c0      	nop			@ (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b005      	add	sp, #20
 8005bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	08006674 	.word	0x08006674
 8005bf4:	0800667c 	.word	0x0800667c

08005bf8 <siprintf>:
 8005bf8:	b40e      	push	{r1, r2, r3}
 8005bfa:	b500      	push	{lr}
 8005bfc:	490b      	ldr	r1, [pc, #44]	@ (8005c2c <siprintf+0x34>)
 8005bfe:	b09c      	sub	sp, #112	@ 0x70
 8005c00:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c02:	9002      	str	r0, [sp, #8]
 8005c04:	9006      	str	r0, [sp, #24]
 8005c06:	9107      	str	r1, [sp, #28]
 8005c08:	9104      	str	r1, [sp, #16]
 8005c0a:	4809      	ldr	r0, [pc, #36]	@ (8005c30 <siprintf+0x38>)
 8005c0c:	4909      	ldr	r1, [pc, #36]	@ (8005c34 <siprintf+0x3c>)
 8005c0e:	cb04      	ldmia	r3!, {r2}
 8005c10:	9105      	str	r1, [sp, #20]
 8005c12:	6800      	ldr	r0, [r0, #0]
 8005c14:	a902      	add	r1, sp, #8
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	f000 f99e 	bl	8005f58 <_svfiprintf_r>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	9b02      	ldr	r3, [sp, #8]
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	b01c      	add	sp, #112	@ 0x70
 8005c24:	bc08      	pop	{r3}
 8005c26:	b003      	add	sp, #12
 8005c28:	4718      	bx	r3
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	7fffffff 	.word	0x7fffffff
 8005c30:	2000001c 	.word	0x2000001c
 8005c34:	ffff0208 	.word	0xffff0208

08005c38 <memset>:
 8005c38:	0003      	movs	r3, r0
 8005c3a:	1882      	adds	r2, r0, r2
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d100      	bne.n	8005c42 <memset+0xa>
 8005c40:	4770      	bx	lr
 8005c42:	7019      	strb	r1, [r3, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	e7f9      	b.n	8005c3c <memset+0x4>

08005c48 <__errno>:
 8005c48:	4b01      	ldr	r3, [pc, #4]	@ (8005c50 <__errno+0x8>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	4770      	bx	lr
 8005c4e:	46c0      	nop			@ (mov r8, r8)
 8005c50:	2000001c 	.word	0x2000001c

08005c54 <__libc_init_array>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	2600      	movs	r6, #0
 8005c58:	4c0c      	ldr	r4, [pc, #48]	@ (8005c8c <__libc_init_array+0x38>)
 8005c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c90 <__libc_init_array+0x3c>)
 8005c5c:	1b64      	subs	r4, r4, r5
 8005c5e:	10a4      	asrs	r4, r4, #2
 8005c60:	42a6      	cmp	r6, r4
 8005c62:	d109      	bne.n	8005c78 <__libc_init_array+0x24>
 8005c64:	2600      	movs	r6, #0
 8005c66:	f000 fc65 	bl	8006534 <_init>
 8005c6a:	4c0a      	ldr	r4, [pc, #40]	@ (8005c94 <__libc_init_array+0x40>)
 8005c6c:	4d0a      	ldr	r5, [pc, #40]	@ (8005c98 <__libc_init_array+0x44>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	42a6      	cmp	r6, r4
 8005c74:	d105      	bne.n	8005c82 <__libc_init_array+0x2e>
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	00b3      	lsls	r3, r6, #2
 8005c7a:	58eb      	ldr	r3, [r5, r3]
 8005c7c:	4798      	blx	r3
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7ee      	b.n	8005c60 <__libc_init_array+0xc>
 8005c82:	00b3      	lsls	r3, r6, #2
 8005c84:	58eb      	ldr	r3, [r5, r3]
 8005c86:	4798      	blx	r3
 8005c88:	3601      	adds	r6, #1
 8005c8a:	e7f2      	b.n	8005c72 <__libc_init_array+0x1e>
 8005c8c:	080066c0 	.word	0x080066c0
 8005c90:	080066c0 	.word	0x080066c0
 8005c94:	080066c4 	.word	0x080066c4
 8005c98:	080066c0 	.word	0x080066c0

08005c9c <__retarget_lock_acquire_recursive>:
 8005c9c:	4770      	bx	lr

08005c9e <__retarget_lock_release_recursive>:
 8005c9e:	4770      	bx	lr

08005ca0 <_free_r>:
 8005ca0:	b570      	push	{r4, r5, r6, lr}
 8005ca2:	0005      	movs	r5, r0
 8005ca4:	1e0c      	subs	r4, r1, #0
 8005ca6:	d010      	beq.n	8005cca <_free_r+0x2a>
 8005ca8:	3c04      	subs	r4, #4
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da00      	bge.n	8005cb2 <_free_r+0x12>
 8005cb0:	18e4      	adds	r4, r4, r3
 8005cb2:	0028      	movs	r0, r5
 8005cb4:	f000 f8e0 	bl	8005e78 <__malloc_lock>
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d30 <_free_r+0x90>)
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <_free_r+0x2c>
 8005cc0:	6063      	str	r3, [r4, #4]
 8005cc2:	6014      	str	r4, [r2, #0]
 8005cc4:	0028      	movs	r0, r5
 8005cc6:	f000 f8df 	bl	8005e88 <__malloc_unlock>
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	d908      	bls.n	8005ce2 <_free_r+0x42>
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	1821      	adds	r1, r4, r0
 8005cd4:	428b      	cmp	r3, r1
 8005cd6:	d1f3      	bne.n	8005cc0 <_free_r+0x20>
 8005cd8:	6819      	ldr	r1, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	1809      	adds	r1, r1, r0
 8005cde:	6021      	str	r1, [r4, #0]
 8005ce0:	e7ee      	b.n	8005cc0 <_free_r+0x20>
 8005ce2:	001a      	movs	r2, r3
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <_free_r+0x4e>
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	d9f9      	bls.n	8005ce2 <_free_r+0x42>
 8005cee:	6811      	ldr	r1, [r2, #0]
 8005cf0:	1850      	adds	r0, r2, r1
 8005cf2:	42a0      	cmp	r0, r4
 8005cf4:	d10b      	bne.n	8005d0e <_free_r+0x6e>
 8005cf6:	6820      	ldr	r0, [r4, #0]
 8005cf8:	1809      	adds	r1, r1, r0
 8005cfa:	1850      	adds	r0, r2, r1
 8005cfc:	6011      	str	r1, [r2, #0]
 8005cfe:	4283      	cmp	r3, r0
 8005d00:	d1e0      	bne.n	8005cc4 <_free_r+0x24>
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	1841      	adds	r1, r0, r1
 8005d08:	6011      	str	r1, [r2, #0]
 8005d0a:	6053      	str	r3, [r2, #4]
 8005d0c:	e7da      	b.n	8005cc4 <_free_r+0x24>
 8005d0e:	42a0      	cmp	r0, r4
 8005d10:	d902      	bls.n	8005d18 <_free_r+0x78>
 8005d12:	230c      	movs	r3, #12
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	e7d5      	b.n	8005cc4 <_free_r+0x24>
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	1821      	adds	r1, r4, r0
 8005d1c:	428b      	cmp	r3, r1
 8005d1e:	d103      	bne.n	8005d28 <_free_r+0x88>
 8005d20:	6819      	ldr	r1, [r3, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	1809      	adds	r1, r1, r0
 8005d26:	6021      	str	r1, [r4, #0]
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6054      	str	r4, [r2, #4]
 8005d2c:	e7ca      	b.n	8005cc4 <_free_r+0x24>
 8005d2e:	46c0      	nop			@ (mov r8, r8)
 8005d30:	200003f8 	.word	0x200003f8

08005d34 <sbrk_aligned>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	4e0f      	ldr	r6, [pc, #60]	@ (8005d74 <sbrk_aligned+0x40>)
 8005d38:	000d      	movs	r5, r1
 8005d3a:	6831      	ldr	r1, [r6, #0]
 8005d3c:	0004      	movs	r4, r0
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	d102      	bne.n	8005d48 <sbrk_aligned+0x14>
 8005d42:	f000 fb99 	bl	8006478 <_sbrk_r>
 8005d46:	6030      	str	r0, [r6, #0]
 8005d48:	0029      	movs	r1, r5
 8005d4a:	0020      	movs	r0, r4
 8005d4c:	f000 fb94 	bl	8006478 <_sbrk_r>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d103      	bne.n	8005d5c <sbrk_aligned+0x28>
 8005d54:	2501      	movs	r5, #1
 8005d56:	426d      	negs	r5, r5
 8005d58:	0028      	movs	r0, r5
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	1cc5      	adds	r5, r0, #3
 8005d60:	439d      	bics	r5, r3
 8005d62:	42a8      	cmp	r0, r5
 8005d64:	d0f8      	beq.n	8005d58 <sbrk_aligned+0x24>
 8005d66:	1a29      	subs	r1, r5, r0
 8005d68:	0020      	movs	r0, r4
 8005d6a:	f000 fb85 	bl	8006478 <_sbrk_r>
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d1f2      	bne.n	8005d58 <sbrk_aligned+0x24>
 8005d72:	e7ef      	b.n	8005d54 <sbrk_aligned+0x20>
 8005d74:	200003f4 	.word	0x200003f4

08005d78 <_malloc_r>:
 8005d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	1ccb      	adds	r3, r1, #3
 8005d7e:	4393      	bics	r3, r2
 8005d80:	3308      	adds	r3, #8
 8005d82:	0005      	movs	r5, r0
 8005d84:	001f      	movs	r7, r3
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d234      	bcs.n	8005df4 <_malloc_r+0x7c>
 8005d8a:	270c      	movs	r7, #12
 8005d8c:	42b9      	cmp	r1, r7
 8005d8e:	d833      	bhi.n	8005df8 <_malloc_r+0x80>
 8005d90:	0028      	movs	r0, r5
 8005d92:	f000 f871 	bl	8005e78 <__malloc_lock>
 8005d96:	4e37      	ldr	r6, [pc, #220]	@ (8005e74 <_malloc_r+0xfc>)
 8005d98:	6833      	ldr	r3, [r6, #0]
 8005d9a:	001c      	movs	r4, r3
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	d12f      	bne.n	8005e00 <_malloc_r+0x88>
 8005da0:	0039      	movs	r1, r7
 8005da2:	0028      	movs	r0, r5
 8005da4:	f7ff ffc6 	bl	8005d34 <sbrk_aligned>
 8005da8:	0004      	movs	r4, r0
 8005daa:	1c43      	adds	r3, r0, #1
 8005dac:	d15f      	bne.n	8005e6e <_malloc_r+0xf6>
 8005dae:	6834      	ldr	r4, [r6, #0]
 8005db0:	9400      	str	r4, [sp, #0]
 8005db2:	9b00      	ldr	r3, [sp, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d14a      	bne.n	8005e4e <_malloc_r+0xd6>
 8005db8:	2c00      	cmp	r4, #0
 8005dba:	d052      	beq.n	8005e62 <_malloc_r+0xea>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	0028      	movs	r0, r5
 8005dc0:	18e3      	adds	r3, r4, r3
 8005dc2:	9900      	ldr	r1, [sp, #0]
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	f000 fb57 	bl	8006478 <_sbrk_r>
 8005dca:	9b01      	ldr	r3, [sp, #4]
 8005dcc:	4283      	cmp	r3, r0
 8005dce:	d148      	bne.n	8005e62 <_malloc_r+0xea>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	0028      	movs	r0, r5
 8005dd4:	1aff      	subs	r7, r7, r3
 8005dd6:	0039      	movs	r1, r7
 8005dd8:	f7ff ffac 	bl	8005d34 <sbrk_aligned>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d040      	beq.n	8005e62 <_malloc_r+0xea>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	19db      	adds	r3, r3, r7
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	6833      	ldr	r3, [r6, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d133      	bne.n	8005e56 <_malloc_r+0xde>
 8005dee:	9b00      	ldr	r3, [sp, #0]
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	e019      	b.n	8005e28 <_malloc_r+0xb0>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	dac9      	bge.n	8005d8c <_malloc_r+0x14>
 8005df8:	230c      	movs	r3, #12
 8005dfa:	602b      	str	r3, [r5, #0]
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e00:	6821      	ldr	r1, [r4, #0]
 8005e02:	1bc9      	subs	r1, r1, r7
 8005e04:	d420      	bmi.n	8005e48 <_malloc_r+0xd0>
 8005e06:	290b      	cmp	r1, #11
 8005e08:	d90a      	bls.n	8005e20 <_malloc_r+0xa8>
 8005e0a:	19e2      	adds	r2, r4, r7
 8005e0c:	6027      	str	r7, [r4, #0]
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	d104      	bne.n	8005e1c <_malloc_r+0xa4>
 8005e12:	6032      	str	r2, [r6, #0]
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	6011      	str	r1, [r2, #0]
 8005e18:	6053      	str	r3, [r2, #4]
 8005e1a:	e005      	b.n	8005e28 <_malloc_r+0xb0>
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	e7f9      	b.n	8005e14 <_malloc_r+0x9c>
 8005e20:	6862      	ldr	r2, [r4, #4]
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	d10e      	bne.n	8005e44 <_malloc_r+0xcc>
 8005e26:	6032      	str	r2, [r6, #0]
 8005e28:	0028      	movs	r0, r5
 8005e2a:	f000 f82d 	bl	8005e88 <__malloc_unlock>
 8005e2e:	0020      	movs	r0, r4
 8005e30:	2207      	movs	r2, #7
 8005e32:	300b      	adds	r0, #11
 8005e34:	1d23      	adds	r3, r4, #4
 8005e36:	4390      	bics	r0, r2
 8005e38:	1ac2      	subs	r2, r0, r3
 8005e3a:	4298      	cmp	r0, r3
 8005e3c:	d0df      	beq.n	8005dfe <_malloc_r+0x86>
 8005e3e:	1a1b      	subs	r3, r3, r0
 8005e40:	50a3      	str	r3, [r4, r2]
 8005e42:	e7dc      	b.n	8005dfe <_malloc_r+0x86>
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	e7ef      	b.n	8005e28 <_malloc_r+0xb0>
 8005e48:	0023      	movs	r3, r4
 8005e4a:	6864      	ldr	r4, [r4, #4]
 8005e4c:	e7a6      	b.n	8005d9c <_malloc_r+0x24>
 8005e4e:	9c00      	ldr	r4, [sp, #0]
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	e7ad      	b.n	8005db2 <_malloc_r+0x3a>
 8005e56:	001a      	movs	r2, r3
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	d1fb      	bne.n	8005e56 <_malloc_r+0xde>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e7da      	b.n	8005e18 <_malloc_r+0xa0>
 8005e62:	230c      	movs	r3, #12
 8005e64:	0028      	movs	r0, r5
 8005e66:	602b      	str	r3, [r5, #0]
 8005e68:	f000 f80e 	bl	8005e88 <__malloc_unlock>
 8005e6c:	e7c6      	b.n	8005dfc <_malloc_r+0x84>
 8005e6e:	6007      	str	r7, [r0, #0]
 8005e70:	e7da      	b.n	8005e28 <_malloc_r+0xb0>
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	200003f8 	.word	0x200003f8

08005e78 <__malloc_lock>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4802      	ldr	r0, [pc, #8]	@ (8005e84 <__malloc_lock+0xc>)
 8005e7c:	f7ff ff0e 	bl	8005c9c <__retarget_lock_acquire_recursive>
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	200003f0 	.word	0x200003f0

08005e88 <__malloc_unlock>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	4802      	ldr	r0, [pc, #8]	@ (8005e94 <__malloc_unlock+0xc>)
 8005e8c:	f7ff ff07 	bl	8005c9e <__retarget_lock_release_recursive>
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	46c0      	nop			@ (mov r8, r8)
 8005e94:	200003f0 	.word	0x200003f0

08005e98 <__ssputs_r>:
 8005e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9a:	688e      	ldr	r6, [r1, #8]
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	001f      	movs	r7, r3
 8005ea0:	000c      	movs	r4, r1
 8005ea2:	680b      	ldr	r3, [r1, #0]
 8005ea4:	9002      	str	r0, [sp, #8]
 8005ea6:	9203      	str	r2, [sp, #12]
 8005ea8:	42be      	cmp	r6, r7
 8005eaa:	d830      	bhi.n	8005f0e <__ssputs_r+0x76>
 8005eac:	210c      	movs	r1, #12
 8005eae:	5e62      	ldrsh	r2, [r4, r1]
 8005eb0:	2190      	movs	r1, #144	@ 0x90
 8005eb2:	00c9      	lsls	r1, r1, #3
 8005eb4:	420a      	tst	r2, r1
 8005eb6:	d028      	beq.n	8005f0a <__ssputs_r+0x72>
 8005eb8:	2003      	movs	r0, #3
 8005eba:	6921      	ldr	r1, [r4, #16]
 8005ebc:	1a5b      	subs	r3, r3, r1
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	6963      	ldr	r3, [r4, #20]
 8005ec2:	4343      	muls	r3, r0
 8005ec4:	9801      	ldr	r0, [sp, #4]
 8005ec6:	0fdd      	lsrs	r5, r3, #31
 8005ec8:	18ed      	adds	r5, r5, r3
 8005eca:	1c7b      	adds	r3, r7, #1
 8005ecc:	181b      	adds	r3, r3, r0
 8005ece:	106d      	asrs	r5, r5, #1
 8005ed0:	42ab      	cmp	r3, r5
 8005ed2:	d900      	bls.n	8005ed6 <__ssputs_r+0x3e>
 8005ed4:	001d      	movs	r5, r3
 8005ed6:	0552      	lsls	r2, r2, #21
 8005ed8:	d528      	bpl.n	8005f2c <__ssputs_r+0x94>
 8005eda:	0029      	movs	r1, r5
 8005edc:	9802      	ldr	r0, [sp, #8]
 8005ede:	f7ff ff4b 	bl	8005d78 <_malloc_r>
 8005ee2:	1e06      	subs	r6, r0, #0
 8005ee4:	d02c      	beq.n	8005f40 <__ssputs_r+0xa8>
 8005ee6:	9a01      	ldr	r2, [sp, #4]
 8005ee8:	6921      	ldr	r1, [r4, #16]
 8005eea:	f000 fae2 	bl	80064b2 <memcpy>
 8005eee:	89a2      	ldrh	r2, [r4, #12]
 8005ef0:	4b18      	ldr	r3, [pc, #96]	@ (8005f54 <__ssputs_r+0xbc>)
 8005ef2:	401a      	ands	r2, r3
 8005ef4:	2380      	movs	r3, #128	@ 0x80
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	9b01      	ldr	r3, [sp, #4]
 8005efc:	6126      	str	r6, [r4, #16]
 8005efe:	18f6      	adds	r6, r6, r3
 8005f00:	6026      	str	r6, [r4, #0]
 8005f02:	003e      	movs	r6, r7
 8005f04:	6165      	str	r5, [r4, #20]
 8005f06:	1aed      	subs	r5, r5, r3
 8005f08:	60a5      	str	r5, [r4, #8]
 8005f0a:	42be      	cmp	r6, r7
 8005f0c:	d900      	bls.n	8005f10 <__ssputs_r+0x78>
 8005f0e:	003e      	movs	r6, r7
 8005f10:	0032      	movs	r2, r6
 8005f12:	9903      	ldr	r1, [sp, #12]
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	f000 fa9b 	bl	8006450 <memmove>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	1b9b      	subs	r3, r3, r6
 8005f20:	60a3      	str	r3, [r4, #8]
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	199b      	adds	r3, r3, r6
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	b005      	add	sp, #20
 8005f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2c:	002a      	movs	r2, r5
 8005f2e:	9802      	ldr	r0, [sp, #8]
 8005f30:	f000 fac8 	bl	80064c4 <_realloc_r>
 8005f34:	1e06      	subs	r6, r0, #0
 8005f36:	d1e0      	bne.n	8005efa <__ssputs_r+0x62>
 8005f38:	6921      	ldr	r1, [r4, #16]
 8005f3a:	9802      	ldr	r0, [sp, #8]
 8005f3c:	f7ff feb0 	bl	8005ca0 <_free_r>
 8005f40:	230c      	movs	r3, #12
 8005f42:	2001      	movs	r0, #1
 8005f44:	9a02      	ldr	r2, [sp, #8]
 8005f46:	4240      	negs	r0, r0
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	89a2      	ldrh	r2, [r4, #12]
 8005f4c:	3334      	adds	r3, #52	@ 0x34
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	81a3      	strh	r3, [r4, #12]
 8005f52:	e7e9      	b.n	8005f28 <__ssputs_r+0x90>
 8005f54:	fffffb7f 	.word	0xfffffb7f

08005f58 <_svfiprintf_r>:
 8005f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5a:	b0a1      	sub	sp, #132	@ 0x84
 8005f5c:	9003      	str	r0, [sp, #12]
 8005f5e:	001d      	movs	r5, r3
 8005f60:	898b      	ldrh	r3, [r1, #12]
 8005f62:	000f      	movs	r7, r1
 8005f64:	0016      	movs	r6, r2
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	d511      	bpl.n	8005f8e <_svfiprintf_r+0x36>
 8005f6a:	690b      	ldr	r3, [r1, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10e      	bne.n	8005f8e <_svfiprintf_r+0x36>
 8005f70:	2140      	movs	r1, #64	@ 0x40
 8005f72:	f7ff ff01 	bl	8005d78 <_malloc_r>
 8005f76:	6038      	str	r0, [r7, #0]
 8005f78:	6138      	str	r0, [r7, #16]
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d105      	bne.n	8005f8a <_svfiprintf_r+0x32>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	9a03      	ldr	r2, [sp, #12]
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	2001      	movs	r0, #1
 8005f86:	4240      	negs	r0, r0
 8005f88:	e0cf      	b.n	800612a <_svfiprintf_r+0x1d2>
 8005f8a:	2340      	movs	r3, #64	@ 0x40
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	ac08      	add	r4, sp, #32
 8005f92:	6163      	str	r3, [r4, #20]
 8005f94:	3320      	adds	r3, #32
 8005f96:	7663      	strb	r3, [r4, #25]
 8005f98:	3310      	adds	r3, #16
 8005f9a:	76a3      	strb	r3, [r4, #26]
 8005f9c:	9507      	str	r5, [sp, #28]
 8005f9e:	0035      	movs	r5, r6
 8005fa0:	782b      	ldrb	r3, [r5, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <_svfiprintf_r+0x52>
 8005fa6:	2b25      	cmp	r3, #37	@ 0x25
 8005fa8:	d148      	bne.n	800603c <_svfiprintf_r+0xe4>
 8005faa:	1bab      	subs	r3, r5, r6
 8005fac:	9305      	str	r3, [sp, #20]
 8005fae:	42b5      	cmp	r5, r6
 8005fb0:	d00b      	beq.n	8005fca <_svfiprintf_r+0x72>
 8005fb2:	0032      	movs	r2, r6
 8005fb4:	0039      	movs	r1, r7
 8005fb6:	9803      	ldr	r0, [sp, #12]
 8005fb8:	f7ff ff6e 	bl	8005e98 <__ssputs_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	d100      	bne.n	8005fc2 <_svfiprintf_r+0x6a>
 8005fc0:	e0ae      	b.n	8006120 <_svfiprintf_r+0x1c8>
 8005fc2:	6963      	ldr	r3, [r4, #20]
 8005fc4:	9a05      	ldr	r2, [sp, #20]
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	6163      	str	r3, [r4, #20]
 8005fca:	782b      	ldrb	r3, [r5, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d100      	bne.n	8005fd2 <_svfiprintf_r+0x7a>
 8005fd0:	e0a6      	b.n	8006120 <_svfiprintf_r+0x1c8>
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4252      	negs	r2, r2
 8005fd8:	6062      	str	r2, [r4, #4]
 8005fda:	a904      	add	r1, sp, #16
 8005fdc:	3254      	adds	r2, #84	@ 0x54
 8005fde:	1852      	adds	r2, r2, r1
 8005fe0:	1c6e      	adds	r6, r5, #1
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	60e3      	str	r3, [r4, #12]
 8005fe6:	60a3      	str	r3, [r4, #8]
 8005fe8:	7013      	strb	r3, [r2, #0]
 8005fea:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005fec:	4b54      	ldr	r3, [pc, #336]	@ (8006140 <_svfiprintf_r+0x1e8>)
 8005fee:	2205      	movs	r2, #5
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	7831      	ldrb	r1, [r6, #0]
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	f000 fa51 	bl	800649c <memchr>
 8005ffa:	1c75      	adds	r5, r6, #1
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d11f      	bne.n	8006040 <_svfiprintf_r+0xe8>
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	06d3      	lsls	r3, r2, #27
 8006004:	d504      	bpl.n	8006010 <_svfiprintf_r+0xb8>
 8006006:	2353      	movs	r3, #83	@ 0x53
 8006008:	a904      	add	r1, sp, #16
 800600a:	185b      	adds	r3, r3, r1
 800600c:	2120      	movs	r1, #32
 800600e:	7019      	strb	r1, [r3, #0]
 8006010:	0713      	lsls	r3, r2, #28
 8006012:	d504      	bpl.n	800601e <_svfiprintf_r+0xc6>
 8006014:	2353      	movs	r3, #83	@ 0x53
 8006016:	a904      	add	r1, sp, #16
 8006018:	185b      	adds	r3, r3, r1
 800601a:	212b      	movs	r1, #43	@ 0x2b
 800601c:	7019      	strb	r1, [r3, #0]
 800601e:	7833      	ldrb	r3, [r6, #0]
 8006020:	2b2a      	cmp	r3, #42	@ 0x2a
 8006022:	d016      	beq.n	8006052 <_svfiprintf_r+0xfa>
 8006024:	0035      	movs	r5, r6
 8006026:	2100      	movs	r1, #0
 8006028:	200a      	movs	r0, #10
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	782a      	ldrb	r2, [r5, #0]
 800602e:	1c6e      	adds	r6, r5, #1
 8006030:	3a30      	subs	r2, #48	@ 0x30
 8006032:	2a09      	cmp	r2, #9
 8006034:	d950      	bls.n	80060d8 <_svfiprintf_r+0x180>
 8006036:	2900      	cmp	r1, #0
 8006038:	d111      	bne.n	800605e <_svfiprintf_r+0x106>
 800603a:	e017      	b.n	800606c <_svfiprintf_r+0x114>
 800603c:	3501      	adds	r5, #1
 800603e:	e7af      	b.n	8005fa0 <_svfiprintf_r+0x48>
 8006040:	9b05      	ldr	r3, [sp, #20]
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	1ac0      	subs	r0, r0, r3
 8006046:	2301      	movs	r3, #1
 8006048:	4083      	lsls	r3, r0
 800604a:	4313      	orrs	r3, r2
 800604c:	002e      	movs	r6, r5
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	e7cc      	b.n	8005fec <_svfiprintf_r+0x94>
 8006052:	9b07      	ldr	r3, [sp, #28]
 8006054:	1d19      	adds	r1, r3, #4
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	9107      	str	r1, [sp, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	db01      	blt.n	8006062 <_svfiprintf_r+0x10a>
 800605e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006060:	e004      	b.n	800606c <_svfiprintf_r+0x114>
 8006062:	425b      	negs	r3, r3
 8006064:	60e3      	str	r3, [r4, #12]
 8006066:	2302      	movs	r3, #2
 8006068:	4313      	orrs	r3, r2
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	782b      	ldrb	r3, [r5, #0]
 800606e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006070:	d10c      	bne.n	800608c <_svfiprintf_r+0x134>
 8006072:	786b      	ldrb	r3, [r5, #1]
 8006074:	2b2a      	cmp	r3, #42	@ 0x2a
 8006076:	d134      	bne.n	80060e2 <_svfiprintf_r+0x18a>
 8006078:	9b07      	ldr	r3, [sp, #28]
 800607a:	3502      	adds	r5, #2
 800607c:	1d1a      	adds	r2, r3, #4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	9207      	str	r2, [sp, #28]
 8006082:	2b00      	cmp	r3, #0
 8006084:	da01      	bge.n	800608a <_svfiprintf_r+0x132>
 8006086:	2301      	movs	r3, #1
 8006088:	425b      	negs	r3, r3
 800608a:	9309      	str	r3, [sp, #36]	@ 0x24
 800608c:	4e2d      	ldr	r6, [pc, #180]	@ (8006144 <_svfiprintf_r+0x1ec>)
 800608e:	2203      	movs	r2, #3
 8006090:	0030      	movs	r0, r6
 8006092:	7829      	ldrb	r1, [r5, #0]
 8006094:	f000 fa02 	bl	800649c <memchr>
 8006098:	2800      	cmp	r0, #0
 800609a:	d006      	beq.n	80060aa <_svfiprintf_r+0x152>
 800609c:	2340      	movs	r3, #64	@ 0x40
 800609e:	1b80      	subs	r0, r0, r6
 80060a0:	4083      	lsls	r3, r0
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	3501      	adds	r5, #1
 80060a6:	4313      	orrs	r3, r2
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	7829      	ldrb	r1, [r5, #0]
 80060ac:	2206      	movs	r2, #6
 80060ae:	4826      	ldr	r0, [pc, #152]	@ (8006148 <_svfiprintf_r+0x1f0>)
 80060b0:	1c6e      	adds	r6, r5, #1
 80060b2:	7621      	strb	r1, [r4, #24]
 80060b4:	f000 f9f2 	bl	800649c <memchr>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d038      	beq.n	800612e <_svfiprintf_r+0x1d6>
 80060bc:	4b23      	ldr	r3, [pc, #140]	@ (800614c <_svfiprintf_r+0x1f4>)
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d122      	bne.n	8006108 <_svfiprintf_r+0x1b0>
 80060c2:	2207      	movs	r2, #7
 80060c4:	9b07      	ldr	r3, [sp, #28]
 80060c6:	3307      	adds	r3, #7
 80060c8:	4393      	bics	r3, r2
 80060ca:	3308      	adds	r3, #8
 80060cc:	9307      	str	r3, [sp, #28]
 80060ce:	6963      	ldr	r3, [r4, #20]
 80060d0:	9a04      	ldr	r2, [sp, #16]
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	6163      	str	r3, [r4, #20]
 80060d6:	e762      	b.n	8005f9e <_svfiprintf_r+0x46>
 80060d8:	4343      	muls	r3, r0
 80060da:	0035      	movs	r5, r6
 80060dc:	2101      	movs	r1, #1
 80060de:	189b      	adds	r3, r3, r2
 80060e0:	e7a4      	b.n	800602c <_svfiprintf_r+0xd4>
 80060e2:	2300      	movs	r3, #0
 80060e4:	200a      	movs	r0, #10
 80060e6:	0019      	movs	r1, r3
 80060e8:	3501      	adds	r5, #1
 80060ea:	6063      	str	r3, [r4, #4]
 80060ec:	782a      	ldrb	r2, [r5, #0]
 80060ee:	1c6e      	adds	r6, r5, #1
 80060f0:	3a30      	subs	r2, #48	@ 0x30
 80060f2:	2a09      	cmp	r2, #9
 80060f4:	d903      	bls.n	80060fe <_svfiprintf_r+0x1a6>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0c8      	beq.n	800608c <_svfiprintf_r+0x134>
 80060fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80060fc:	e7c6      	b.n	800608c <_svfiprintf_r+0x134>
 80060fe:	4341      	muls	r1, r0
 8006100:	0035      	movs	r5, r6
 8006102:	2301      	movs	r3, #1
 8006104:	1889      	adds	r1, r1, r2
 8006106:	e7f1      	b.n	80060ec <_svfiprintf_r+0x194>
 8006108:	aa07      	add	r2, sp, #28
 800610a:	9200      	str	r2, [sp, #0]
 800610c:	0021      	movs	r1, r4
 800610e:	003a      	movs	r2, r7
 8006110:	4b0f      	ldr	r3, [pc, #60]	@ (8006150 <_svfiprintf_r+0x1f8>)
 8006112:	9803      	ldr	r0, [sp, #12]
 8006114:	e000      	b.n	8006118 <_svfiprintf_r+0x1c0>
 8006116:	bf00      	nop
 8006118:	9004      	str	r0, [sp, #16]
 800611a:	9b04      	ldr	r3, [sp, #16]
 800611c:	3301      	adds	r3, #1
 800611e:	d1d6      	bne.n	80060ce <_svfiprintf_r+0x176>
 8006120:	89bb      	ldrh	r3, [r7, #12]
 8006122:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006124:	065b      	lsls	r3, r3, #25
 8006126:	d500      	bpl.n	800612a <_svfiprintf_r+0x1d2>
 8006128:	e72c      	b.n	8005f84 <_svfiprintf_r+0x2c>
 800612a:	b021      	add	sp, #132	@ 0x84
 800612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612e:	aa07      	add	r2, sp, #28
 8006130:	9200      	str	r2, [sp, #0]
 8006132:	0021      	movs	r1, r4
 8006134:	003a      	movs	r2, r7
 8006136:	4b06      	ldr	r3, [pc, #24]	@ (8006150 <_svfiprintf_r+0x1f8>)
 8006138:	9803      	ldr	r0, [sp, #12]
 800613a:	f000 f87b 	bl	8006234 <_printf_i>
 800613e:	e7eb      	b.n	8006118 <_svfiprintf_r+0x1c0>
 8006140:	08006684 	.word	0x08006684
 8006144:	0800668a 	.word	0x0800668a
 8006148:	0800668e 	.word	0x0800668e
 800614c:	00000000 	.word	0x00000000
 8006150:	08005e99 	.word	0x08005e99

08006154 <_printf_common>:
 8006154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006156:	0016      	movs	r6, r2
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	688a      	ldr	r2, [r1, #8]
 800615c:	690b      	ldr	r3, [r1, #16]
 800615e:	000c      	movs	r4, r1
 8006160:	9000      	str	r0, [sp, #0]
 8006162:	4293      	cmp	r3, r2
 8006164:	da00      	bge.n	8006168 <_printf_common+0x14>
 8006166:	0013      	movs	r3, r2
 8006168:	0022      	movs	r2, r4
 800616a:	6033      	str	r3, [r6, #0]
 800616c:	3243      	adds	r2, #67	@ 0x43
 800616e:	7812      	ldrb	r2, [r2, #0]
 8006170:	2a00      	cmp	r2, #0
 8006172:	d001      	beq.n	8006178 <_printf_common+0x24>
 8006174:	3301      	adds	r3, #1
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	069b      	lsls	r3, r3, #26
 800617c:	d502      	bpl.n	8006184 <_printf_common+0x30>
 800617e:	6833      	ldr	r3, [r6, #0]
 8006180:	3302      	adds	r3, #2
 8006182:	6033      	str	r3, [r6, #0]
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	2306      	movs	r3, #6
 8006188:	0015      	movs	r5, r2
 800618a:	401d      	ands	r5, r3
 800618c:	421a      	tst	r2, r3
 800618e:	d027      	beq.n	80061e0 <_printf_common+0x8c>
 8006190:	0023      	movs	r3, r4
 8006192:	3343      	adds	r3, #67	@ 0x43
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	1e5a      	subs	r2, r3, #1
 8006198:	4193      	sbcs	r3, r2
 800619a:	6822      	ldr	r2, [r4, #0]
 800619c:	0692      	lsls	r2, r2, #26
 800619e:	d430      	bmi.n	8006202 <_printf_common+0xae>
 80061a0:	0022      	movs	r2, r4
 80061a2:	9901      	ldr	r1, [sp, #4]
 80061a4:	9800      	ldr	r0, [sp, #0]
 80061a6:	9d08      	ldr	r5, [sp, #32]
 80061a8:	3243      	adds	r2, #67	@ 0x43
 80061aa:	47a8      	blx	r5
 80061ac:	3001      	adds	r0, #1
 80061ae:	d025      	beq.n	80061fc <_printf_common+0xa8>
 80061b0:	2206      	movs	r2, #6
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	2500      	movs	r5, #0
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d105      	bne.n	80061c8 <_printf_common+0x74>
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	68e5      	ldr	r5, [r4, #12]
 80061c0:	1aed      	subs	r5, r5, r3
 80061c2:	43eb      	mvns	r3, r5
 80061c4:	17db      	asrs	r3, r3, #31
 80061c6:	401d      	ands	r5, r3
 80061c8:	68a3      	ldr	r3, [r4, #8]
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	4293      	cmp	r3, r2
 80061ce:	dd01      	ble.n	80061d4 <_printf_common+0x80>
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	18ed      	adds	r5, r5, r3
 80061d4:	2600      	movs	r6, #0
 80061d6:	42b5      	cmp	r5, r6
 80061d8:	d120      	bne.n	800621c <_printf_common+0xc8>
 80061da:	2000      	movs	r0, #0
 80061dc:	e010      	b.n	8006200 <_printf_common+0xac>
 80061de:	3501      	adds	r5, #1
 80061e0:	68e3      	ldr	r3, [r4, #12]
 80061e2:	6832      	ldr	r2, [r6, #0]
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	42ab      	cmp	r3, r5
 80061e8:	ddd2      	ble.n	8006190 <_printf_common+0x3c>
 80061ea:	0022      	movs	r2, r4
 80061ec:	2301      	movs	r3, #1
 80061ee:	9901      	ldr	r1, [sp, #4]
 80061f0:	9800      	ldr	r0, [sp, #0]
 80061f2:	9f08      	ldr	r7, [sp, #32]
 80061f4:	3219      	adds	r2, #25
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	d1f0      	bne.n	80061de <_printf_common+0x8a>
 80061fc:	2001      	movs	r0, #1
 80061fe:	4240      	negs	r0, r0
 8006200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006202:	2030      	movs	r0, #48	@ 0x30
 8006204:	18e1      	adds	r1, r4, r3
 8006206:	3143      	adds	r1, #67	@ 0x43
 8006208:	7008      	strb	r0, [r1, #0]
 800620a:	0021      	movs	r1, r4
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	3145      	adds	r1, #69	@ 0x45
 8006210:	7809      	ldrb	r1, [r1, #0]
 8006212:	18a2      	adds	r2, r4, r2
 8006214:	3243      	adds	r2, #67	@ 0x43
 8006216:	3302      	adds	r3, #2
 8006218:	7011      	strb	r1, [r2, #0]
 800621a:	e7c1      	b.n	80061a0 <_printf_common+0x4c>
 800621c:	0022      	movs	r2, r4
 800621e:	2301      	movs	r3, #1
 8006220:	9901      	ldr	r1, [sp, #4]
 8006222:	9800      	ldr	r0, [sp, #0]
 8006224:	9f08      	ldr	r7, [sp, #32]
 8006226:	321a      	adds	r2, #26
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	d0e6      	beq.n	80061fc <_printf_common+0xa8>
 800622e:	3601      	adds	r6, #1
 8006230:	e7d1      	b.n	80061d6 <_printf_common+0x82>
	...

08006234 <_printf_i>:
 8006234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006236:	b08b      	sub	sp, #44	@ 0x2c
 8006238:	9206      	str	r2, [sp, #24]
 800623a:	000a      	movs	r2, r1
 800623c:	3243      	adds	r2, #67	@ 0x43
 800623e:	9307      	str	r3, [sp, #28]
 8006240:	9005      	str	r0, [sp, #20]
 8006242:	9203      	str	r2, [sp, #12]
 8006244:	7e0a      	ldrb	r2, [r1, #24]
 8006246:	000c      	movs	r4, r1
 8006248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800624a:	2a78      	cmp	r2, #120	@ 0x78
 800624c:	d809      	bhi.n	8006262 <_printf_i+0x2e>
 800624e:	2a62      	cmp	r2, #98	@ 0x62
 8006250:	d80b      	bhi.n	800626a <_printf_i+0x36>
 8006252:	2a00      	cmp	r2, #0
 8006254:	d100      	bne.n	8006258 <_printf_i+0x24>
 8006256:	e0bc      	b.n	80063d2 <_printf_i+0x19e>
 8006258:	497b      	ldr	r1, [pc, #492]	@ (8006448 <_printf_i+0x214>)
 800625a:	9104      	str	r1, [sp, #16]
 800625c:	2a58      	cmp	r2, #88	@ 0x58
 800625e:	d100      	bne.n	8006262 <_printf_i+0x2e>
 8006260:	e090      	b.n	8006384 <_printf_i+0x150>
 8006262:	0025      	movs	r5, r4
 8006264:	3542      	adds	r5, #66	@ 0x42
 8006266:	702a      	strb	r2, [r5, #0]
 8006268:	e022      	b.n	80062b0 <_printf_i+0x7c>
 800626a:	0010      	movs	r0, r2
 800626c:	3863      	subs	r0, #99	@ 0x63
 800626e:	2815      	cmp	r0, #21
 8006270:	d8f7      	bhi.n	8006262 <_printf_i+0x2e>
 8006272:	f7f9 ff4f 	bl	8000114 <__gnu_thumb1_case_shi>
 8006276:	0016      	.short	0x0016
 8006278:	fff6001f 	.word	0xfff6001f
 800627c:	fff6fff6 	.word	0xfff6fff6
 8006280:	001ffff6 	.word	0x001ffff6
 8006284:	fff6fff6 	.word	0xfff6fff6
 8006288:	fff6fff6 	.word	0xfff6fff6
 800628c:	003600a1 	.word	0x003600a1
 8006290:	fff60080 	.word	0xfff60080
 8006294:	00b2fff6 	.word	0x00b2fff6
 8006298:	0036fff6 	.word	0x0036fff6
 800629c:	fff6fff6 	.word	0xfff6fff6
 80062a0:	0084      	.short	0x0084
 80062a2:	0025      	movs	r5, r4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	3542      	adds	r5, #66	@ 0x42
 80062a8:	1d11      	adds	r1, r2, #4
 80062aa:	6019      	str	r1, [r3, #0]
 80062ac:	6813      	ldr	r3, [r2, #0]
 80062ae:	702b      	strb	r3, [r5, #0]
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0a0      	b.n	80063f6 <_printf_i+0x1c2>
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	6809      	ldr	r1, [r1, #0]
 80062b8:	1d02      	adds	r2, r0, #4
 80062ba:	060d      	lsls	r5, r1, #24
 80062bc:	d50b      	bpl.n	80062d6 <_printf_i+0xa2>
 80062be:	6806      	ldr	r6, [r0, #0]
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	2e00      	cmp	r6, #0
 80062c4:	da03      	bge.n	80062ce <_printf_i+0x9a>
 80062c6:	232d      	movs	r3, #45	@ 0x2d
 80062c8:	9a03      	ldr	r2, [sp, #12]
 80062ca:	4276      	negs	r6, r6
 80062cc:	7013      	strb	r3, [r2, #0]
 80062ce:	4b5e      	ldr	r3, [pc, #376]	@ (8006448 <_printf_i+0x214>)
 80062d0:	270a      	movs	r7, #10
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	e018      	b.n	8006308 <_printf_i+0xd4>
 80062d6:	6806      	ldr	r6, [r0, #0]
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	0649      	lsls	r1, r1, #25
 80062dc:	d5f1      	bpl.n	80062c2 <_printf_i+0x8e>
 80062de:	b236      	sxth	r6, r6
 80062e0:	e7ef      	b.n	80062c2 <_printf_i+0x8e>
 80062e2:	6808      	ldr	r0, [r1, #0]
 80062e4:	6819      	ldr	r1, [r3, #0]
 80062e6:	c940      	ldmia	r1!, {r6}
 80062e8:	0605      	lsls	r5, r0, #24
 80062ea:	d402      	bmi.n	80062f2 <_printf_i+0xbe>
 80062ec:	0640      	lsls	r0, r0, #25
 80062ee:	d500      	bpl.n	80062f2 <_printf_i+0xbe>
 80062f0:	b2b6      	uxth	r6, r6
 80062f2:	6019      	str	r1, [r3, #0]
 80062f4:	4b54      	ldr	r3, [pc, #336]	@ (8006448 <_printf_i+0x214>)
 80062f6:	270a      	movs	r7, #10
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80062fc:	d100      	bne.n	8006300 <_printf_i+0xcc>
 80062fe:	3f02      	subs	r7, #2
 8006300:	0023      	movs	r3, r4
 8006302:	2200      	movs	r2, #0
 8006304:	3343      	adds	r3, #67	@ 0x43
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	6863      	ldr	r3, [r4, #4]
 800630a:	60a3      	str	r3, [r4, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	db03      	blt.n	8006318 <_printf_i+0xe4>
 8006310:	2104      	movs	r1, #4
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	438a      	bics	r2, r1
 8006316:	6022      	str	r2, [r4, #0]
 8006318:	2e00      	cmp	r6, #0
 800631a:	d102      	bne.n	8006322 <_printf_i+0xee>
 800631c:	9d03      	ldr	r5, [sp, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00c      	beq.n	800633c <_printf_i+0x108>
 8006322:	9d03      	ldr	r5, [sp, #12]
 8006324:	0030      	movs	r0, r6
 8006326:	0039      	movs	r1, r7
 8006328:	f7f9 ff84 	bl	8000234 <__aeabi_uidivmod>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	3d01      	subs	r5, #1
 8006330:	5c5b      	ldrb	r3, [r3, r1]
 8006332:	702b      	strb	r3, [r5, #0]
 8006334:	0033      	movs	r3, r6
 8006336:	0006      	movs	r6, r0
 8006338:	429f      	cmp	r7, r3
 800633a:	d9f3      	bls.n	8006324 <_printf_i+0xf0>
 800633c:	2f08      	cmp	r7, #8
 800633e:	d109      	bne.n	8006354 <_printf_i+0x120>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	07db      	lsls	r3, r3, #31
 8006344:	d506      	bpl.n	8006354 <_printf_i+0x120>
 8006346:	6862      	ldr	r2, [r4, #4]
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	429a      	cmp	r2, r3
 800634c:	dc02      	bgt.n	8006354 <_printf_i+0x120>
 800634e:	2330      	movs	r3, #48	@ 0x30
 8006350:	3d01      	subs	r5, #1
 8006352:	702b      	strb	r3, [r5, #0]
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	1b5b      	subs	r3, r3, r5
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	9b07      	ldr	r3, [sp, #28]
 800635c:	0021      	movs	r1, r4
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	9805      	ldr	r0, [sp, #20]
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	aa09      	add	r2, sp, #36	@ 0x24
 8006366:	f7ff fef5 	bl	8006154 <_printf_common>
 800636a:	3001      	adds	r0, #1
 800636c:	d148      	bne.n	8006400 <_printf_i+0x1cc>
 800636e:	2001      	movs	r0, #1
 8006370:	4240      	negs	r0, r0
 8006372:	b00b      	add	sp, #44	@ 0x2c
 8006374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006376:	2220      	movs	r2, #32
 8006378:	6809      	ldr	r1, [r1, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	6022      	str	r2, [r4, #0]
 800637e:	2278      	movs	r2, #120	@ 0x78
 8006380:	4932      	ldr	r1, [pc, #200]	@ (800644c <_printf_i+0x218>)
 8006382:	9104      	str	r1, [sp, #16]
 8006384:	0021      	movs	r1, r4
 8006386:	3145      	adds	r1, #69	@ 0x45
 8006388:	700a      	strb	r2, [r1, #0]
 800638a:	6819      	ldr	r1, [r3, #0]
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	c940      	ldmia	r1!, {r6}
 8006390:	0610      	lsls	r0, r2, #24
 8006392:	d402      	bmi.n	800639a <_printf_i+0x166>
 8006394:	0650      	lsls	r0, r2, #25
 8006396:	d500      	bpl.n	800639a <_printf_i+0x166>
 8006398:	b2b6      	uxth	r6, r6
 800639a:	6019      	str	r1, [r3, #0]
 800639c:	07d3      	lsls	r3, r2, #31
 800639e:	d502      	bpl.n	80063a6 <_printf_i+0x172>
 80063a0:	2320      	movs	r3, #32
 80063a2:	4313      	orrs	r3, r2
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	2e00      	cmp	r6, #0
 80063a8:	d001      	beq.n	80063ae <_printf_i+0x17a>
 80063aa:	2710      	movs	r7, #16
 80063ac:	e7a8      	b.n	8006300 <_printf_i+0xcc>
 80063ae:	2220      	movs	r2, #32
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	4393      	bics	r3, r2
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	e7f8      	b.n	80063aa <_printf_i+0x176>
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	680d      	ldr	r5, [r1, #0]
 80063bc:	1d10      	adds	r0, r2, #4
 80063be:	6949      	ldr	r1, [r1, #20]
 80063c0:	6018      	str	r0, [r3, #0]
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	062e      	lsls	r6, r5, #24
 80063c6:	d501      	bpl.n	80063cc <_printf_i+0x198>
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <_printf_i+0x19e>
 80063cc:	066d      	lsls	r5, r5, #25
 80063ce:	d5fb      	bpl.n	80063c8 <_printf_i+0x194>
 80063d0:	8019      	strh	r1, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9d03      	ldr	r5, [sp, #12]
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	e7bf      	b.n	800635a <_printf_i+0x126>
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	1d11      	adds	r1, r2, #4
 80063de:	6019      	str	r1, [r3, #0]
 80063e0:	6815      	ldr	r5, [r2, #0]
 80063e2:	2100      	movs	r1, #0
 80063e4:	0028      	movs	r0, r5
 80063e6:	6862      	ldr	r2, [r4, #4]
 80063e8:	f000 f858 	bl	800649c <memchr>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d001      	beq.n	80063f4 <_printf_i+0x1c0>
 80063f0:	1b40      	subs	r0, r0, r5
 80063f2:	6060      	str	r0, [r4, #4]
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9a03      	ldr	r2, [sp, #12]
 80063fc:	7013      	strb	r3, [r2, #0]
 80063fe:	e7ac      	b.n	800635a <_printf_i+0x126>
 8006400:	002a      	movs	r2, r5
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	9906      	ldr	r1, [sp, #24]
 8006406:	9805      	ldr	r0, [sp, #20]
 8006408:	9d07      	ldr	r5, [sp, #28]
 800640a:	47a8      	blx	r5
 800640c:	3001      	adds	r0, #1
 800640e:	d0ae      	beq.n	800636e <_printf_i+0x13a>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	079b      	lsls	r3, r3, #30
 8006414:	d415      	bmi.n	8006442 <_printf_i+0x20e>
 8006416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006418:	68e0      	ldr	r0, [r4, #12]
 800641a:	4298      	cmp	r0, r3
 800641c:	daa9      	bge.n	8006372 <_printf_i+0x13e>
 800641e:	0018      	movs	r0, r3
 8006420:	e7a7      	b.n	8006372 <_printf_i+0x13e>
 8006422:	0022      	movs	r2, r4
 8006424:	2301      	movs	r3, #1
 8006426:	9906      	ldr	r1, [sp, #24]
 8006428:	9805      	ldr	r0, [sp, #20]
 800642a:	9e07      	ldr	r6, [sp, #28]
 800642c:	3219      	adds	r2, #25
 800642e:	47b0      	blx	r6
 8006430:	3001      	adds	r0, #1
 8006432:	d09c      	beq.n	800636e <_printf_i+0x13a>
 8006434:	3501      	adds	r5, #1
 8006436:	68e3      	ldr	r3, [r4, #12]
 8006438:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	42ab      	cmp	r3, r5
 800643e:	dcf0      	bgt.n	8006422 <_printf_i+0x1ee>
 8006440:	e7e9      	b.n	8006416 <_printf_i+0x1e2>
 8006442:	2500      	movs	r5, #0
 8006444:	e7f7      	b.n	8006436 <_printf_i+0x202>
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	08006695 	.word	0x08006695
 800644c:	080066a6 	.word	0x080066a6

08006450 <memmove>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4288      	cmp	r0, r1
 8006454:	d806      	bhi.n	8006464 <memmove+0x14>
 8006456:	2300      	movs	r3, #0
 8006458:	429a      	cmp	r2, r3
 800645a:	d008      	beq.n	800646e <memmove+0x1e>
 800645c:	5ccc      	ldrb	r4, [r1, r3]
 800645e:	54c4      	strb	r4, [r0, r3]
 8006460:	3301      	adds	r3, #1
 8006462:	e7f9      	b.n	8006458 <memmove+0x8>
 8006464:	188b      	adds	r3, r1, r2
 8006466:	4298      	cmp	r0, r3
 8006468:	d2f5      	bcs.n	8006456 <memmove+0x6>
 800646a:	3a01      	subs	r2, #1
 800646c:	d200      	bcs.n	8006470 <memmove+0x20>
 800646e:	bd10      	pop	{r4, pc}
 8006470:	5c8b      	ldrb	r3, [r1, r2]
 8006472:	5483      	strb	r3, [r0, r2]
 8006474:	e7f9      	b.n	800646a <memmove+0x1a>
	...

08006478 <_sbrk_r>:
 8006478:	2300      	movs	r3, #0
 800647a:	b570      	push	{r4, r5, r6, lr}
 800647c:	4d06      	ldr	r5, [pc, #24]	@ (8006498 <_sbrk_r+0x20>)
 800647e:	0004      	movs	r4, r0
 8006480:	0008      	movs	r0, r1
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	f7fb f8b4 	bl	80015f0 <_sbrk>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d103      	bne.n	8006494 <_sbrk_r+0x1c>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d000      	beq.n	8006494 <_sbrk_r+0x1c>
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	bd70      	pop	{r4, r5, r6, pc}
 8006496:	46c0      	nop			@ (mov r8, r8)
 8006498:	200003ec 	.word	0x200003ec

0800649c <memchr>:
 800649c:	b2c9      	uxtb	r1, r1
 800649e:	1882      	adds	r2, r0, r2
 80064a0:	4290      	cmp	r0, r2
 80064a2:	d101      	bne.n	80064a8 <memchr+0xc>
 80064a4:	2000      	movs	r0, #0
 80064a6:	4770      	bx	lr
 80064a8:	7803      	ldrb	r3, [r0, #0]
 80064aa:	428b      	cmp	r3, r1
 80064ac:	d0fb      	beq.n	80064a6 <memchr+0xa>
 80064ae:	3001      	adds	r0, #1
 80064b0:	e7f6      	b.n	80064a0 <memchr+0x4>

080064b2 <memcpy>:
 80064b2:	2300      	movs	r3, #0
 80064b4:	b510      	push	{r4, lr}
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d100      	bne.n	80064bc <memcpy+0xa>
 80064ba:	bd10      	pop	{r4, pc}
 80064bc:	5ccc      	ldrb	r4, [r1, r3]
 80064be:	54c4      	strb	r4, [r0, r3]
 80064c0:	3301      	adds	r3, #1
 80064c2:	e7f8      	b.n	80064b6 <memcpy+0x4>

080064c4 <_realloc_r>:
 80064c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c6:	0006      	movs	r6, r0
 80064c8:	000c      	movs	r4, r1
 80064ca:	0015      	movs	r5, r2
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d105      	bne.n	80064dc <_realloc_r+0x18>
 80064d0:	0011      	movs	r1, r2
 80064d2:	f7ff fc51 	bl	8005d78 <_malloc_r>
 80064d6:	0004      	movs	r4, r0
 80064d8:	0020      	movs	r0, r4
 80064da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064dc:	2a00      	cmp	r2, #0
 80064de:	d103      	bne.n	80064e8 <_realloc_r+0x24>
 80064e0:	f7ff fbde 	bl	8005ca0 <_free_r>
 80064e4:	2400      	movs	r4, #0
 80064e6:	e7f7      	b.n	80064d8 <_realloc_r+0x14>
 80064e8:	f000 f81b 	bl	8006522 <_malloc_usable_size_r>
 80064ec:	0007      	movs	r7, r0
 80064ee:	4285      	cmp	r5, r0
 80064f0:	d802      	bhi.n	80064f8 <_realloc_r+0x34>
 80064f2:	0843      	lsrs	r3, r0, #1
 80064f4:	42ab      	cmp	r3, r5
 80064f6:	d3ef      	bcc.n	80064d8 <_realloc_r+0x14>
 80064f8:	0029      	movs	r1, r5
 80064fa:	0030      	movs	r0, r6
 80064fc:	f7ff fc3c 	bl	8005d78 <_malloc_r>
 8006500:	9001      	str	r0, [sp, #4]
 8006502:	2800      	cmp	r0, #0
 8006504:	d0ee      	beq.n	80064e4 <_realloc_r+0x20>
 8006506:	002a      	movs	r2, r5
 8006508:	42bd      	cmp	r5, r7
 800650a:	d900      	bls.n	800650e <_realloc_r+0x4a>
 800650c:	003a      	movs	r2, r7
 800650e:	0021      	movs	r1, r4
 8006510:	9801      	ldr	r0, [sp, #4]
 8006512:	f7ff ffce 	bl	80064b2 <memcpy>
 8006516:	0021      	movs	r1, r4
 8006518:	0030      	movs	r0, r6
 800651a:	f7ff fbc1 	bl	8005ca0 <_free_r>
 800651e:	9c01      	ldr	r4, [sp, #4]
 8006520:	e7da      	b.n	80064d8 <_realloc_r+0x14>

08006522 <_malloc_usable_size_r>:
 8006522:	1f0b      	subs	r3, r1, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	1f18      	subs	r0, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	da01      	bge.n	8006530 <_malloc_usable_size_r+0xe>
 800652c:	580b      	ldr	r3, [r1, r0]
 800652e:	18c0      	adds	r0, r0, r3
 8006530:	4770      	bx	lr
	...

08006534 <_init>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	46c0      	nop			@ (mov r8, r8)
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr

08006540 <_fini>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	46c0      	nop			@ (mov r8, r8)
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr
